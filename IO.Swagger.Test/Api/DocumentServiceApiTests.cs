/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DocumentServiceApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DocumentServiceApiTests
    {
        private DocumentServiceApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DocumentServiceApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DocumentServiceApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DocumentServiceApi
            //Assert.IsInstanceOfType(typeof(DocumentServiceApi), instance, "instance is a DocumentServiceApi");
        }

        
        /// <summary>
        /// Test GenerateKekosPrintingPage
        /// </summary>
        [Test]
        public void GenerateKekosPrintingPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kekosId = null;
            //var response = instance.GenerateKekosPrintingPage(kekosId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKekosReaserchPrintingPage
        /// </summary>
        [Test]
        public void GenerateKekosReaserchPrintingPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kekosResearchCardId = null;
            //var response = instance.GenerateKekosReaserchPrintingPage(kekosResearchCardId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKeoPrintingPage
        /// </summary>
        [Test]
        public void GenerateKeoPrintingPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? keoId = null;
            //var response = instance.GenerateKeoPrintingPage(keoId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKeokPrintingPage
        /// </summary>
        [Test]
        public void GenerateKeokPrintingPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? keokId = null;
            //var response = instance.GenerateKeokPrintingPage(keokId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKeonPrintingPage
        /// </summary>
        [Test]
        public void GenerateKeonPrintingPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? keonId = null;
            //var response = instance.GenerateKeonPrintingPage(keonId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKepwCollectingPrintingPage
        /// </summary>
        [Test]
        public void GenerateKepwCollectingPrintingPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kepwId = null;
            //var response = instance.GenerateKepwCollectingPrintingPage(kepwId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKepwDismantlePrintingPage
        /// </summary>
        [Test]
        public void GenerateKepwDismantlePrintingPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kepwId = null;
            //var response = instance.GenerateKepwDismantlePrintingPage(kepwId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKezsPrintingPage
        /// </summary>
        [Test]
        public void GenerateKezsPrintingPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kezsId = null;
            //int? groupNumber = null;
            //var response = instance.GenerateKezsPrintingPage(kezsId, groupNumber);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKpoConfirmation
        /// </summary>
        [Test]
        public void GenerateKpoConfirmationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kpoId = null;
            //var response = instance.GenerateKpoConfirmation(kpoId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKpoPrintingPage
        /// </summary>
        [Test]
        public void GenerateKpoPrintingPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kpoId = null;
            //var response = instance.GenerateKpoPrintingPage(kpoId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKpokConfirmation
        /// </summary>
        [Test]
        public void GenerateKpokConfirmationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kpokId = null;
            //var response = instance.GenerateKpokConfirmation(kpokId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKpokReceivePrintingPage
        /// </summary>
        [Test]
        public void GenerateKpokReceivePrintingPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kpokId = null;
            //var response = instance.GenerateKpokReceivePrintingPage(kpokId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GenerateKpokTransferPrintingPage
        /// </summary>
        [Test]
        public void GenerateKpokTransferPrintingPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid? kpokId = null;
            //var response = instance.GenerateKpokTransferPrintingPage(kpokId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
