/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonItemWithCompanyDto
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonItemWithCompanyDto :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonItemWithCompanyDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonItemWithCompanyDto" /> class.
        /// </summary>
        /// <param name="keonItemId">Id wpisu keon.</param>
        /// <param name="keonId">Id karty ewidencji odpadów niebezpiecznych.</param>
        /// <param name="receiveConfirmationTime">Data otrzymania potwierdzenia.</param>
        /// <param name="documentNumber">Numer dokumentu.</param>
        /// <param name="wasteMass">Masa odpadów.</param>
        /// <param name="senderCompanyId">Id przekazującego odpady.</param>
        /// <param name="senderCompanyHtmlAddress">senderCompanyHtmlAddress.</param>
        /// <param name="receiverCompanyId">Id przejmującego odpady.</param>
        /// <param name="receiverCompanyHtmlAddress">receiverCompanyHtmlAddress.</param>
        /// <param name="createdByUser">Utworzone przez użytkownika.</param>
        /// <param name="isDealer">Działalność jako sprzedawca odpadów.</param>
        /// <param name="isBroker">Działalność jako pośrednik w obrocie odpadami.</param>
        /// <param name="createdAt">Data utworzenia.</param>
        /// <param name="senderName">Nazwa przekazującego.</param>
        /// <param name="senderIdentificationNumber">Numer rejestrowy przekazującego.</param>
        /// <param name="receiverName">Nazwa przejmującego.</param>
        /// <param name="receiverIdentificationNumber">Numer rejestrowy przejmującego.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonItemWithCompanyDto(Guid? keonItemId = default(Guid?), Guid? keonId = default(Guid?), DateTime? receiveConfirmationTime = default(DateTime?), string documentNumber = default(string), double? wasteMass = default(double?), Guid? senderCompanyId = default(Guid?), string senderCompanyHtmlAddress = default(string), Guid? receiverCompanyId = default(Guid?), string receiverCompanyHtmlAddress = default(string), string createdByUser = default(string), bool? isDealer = default(bool?), bool? isBroker = default(bool?), DateTime? createdAt = default(DateTime?), string senderName = default(string), string senderIdentificationNumber = default(string), string receiverName = default(string), string receiverIdentificationNumber = default(string))
        {
            this.KeonItemId = keonItemId;
            this.KeonId = keonId;
            this.ReceiveConfirmationTime = receiveConfirmationTime;
            this.DocumentNumber = documentNumber;
            this.WasteMass = wasteMass;
            this.SenderCompanyId = senderCompanyId;
            this.SenderCompanyHtmlAddress = senderCompanyHtmlAddress;
            this.ReceiverCompanyId = receiverCompanyId;
            this.ReceiverCompanyHtmlAddress = receiverCompanyHtmlAddress;
            this.CreatedByUser = createdByUser;
            this.IsDealer = isDealer;
            this.IsBroker = isBroker;
            this.CreatedAt = createdAt;
            this.SenderName = senderName;
            this.SenderIdentificationNumber = senderIdentificationNumber;
            this.ReceiverName = receiverName;
            this.ReceiverIdentificationNumber = receiverIdentificationNumber;
        }
        
        /// <summary>
        /// Id wpisu keon
        /// </summary>
        /// <value>Id wpisu keon</value>
        [DataMember(Name="keonItemId", EmitDefaultValue=false)]
        public Guid? KeonItemId { get; set; }

        /// <summary>
        /// Id karty ewidencji odpadów niebezpiecznych
        /// </summary>
        /// <value>Id karty ewidencji odpadów niebezpiecznych</value>
        [DataMember(Name="keonId", EmitDefaultValue=false)]
        public Guid? KeonId { get; set; }

        /// <summary>
        /// Data otrzymania potwierdzenia
        /// </summary>
        /// <value>Data otrzymania potwierdzenia</value>
        [DataMember(Name="receiveConfirmationTime", EmitDefaultValue=false)]
        public DateTime? ReceiveConfirmationTime { get; set; }

        /// <summary>
        /// Numer dokumentu
        /// </summary>
        /// <value>Numer dokumentu</value>
        [DataMember(Name="documentNumber", EmitDefaultValue=false)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Masa odpadów
        /// </summary>
        /// <value>Masa odpadów</value>
        [DataMember(Name="wasteMass", EmitDefaultValue=false)]
        public double? WasteMass { get; set; }

        /// <summary>
        /// Id przekazującego odpady
        /// </summary>
        /// <value>Id przekazującego odpady</value>
        [DataMember(Name="senderCompanyId", EmitDefaultValue=false)]
        public Guid? SenderCompanyId { get; set; }

        /// <summary>
        /// Gets or Sets SenderCompanyHtmlAddress
        /// </summary>
        [DataMember(Name="senderCompanyHtmlAddress", EmitDefaultValue=false)]
        public string SenderCompanyHtmlAddress { get; set; }

        /// <summary>
        /// Id przejmującego odpady
        /// </summary>
        /// <value>Id przejmującego odpady</value>
        [DataMember(Name="receiverCompanyId", EmitDefaultValue=false)]
        public Guid? ReceiverCompanyId { get; set; }

        /// <summary>
        /// Gets or Sets ReceiverCompanyHtmlAddress
        /// </summary>
        [DataMember(Name="receiverCompanyHtmlAddress", EmitDefaultValue=false)]
        public string ReceiverCompanyHtmlAddress { get; set; }

        /// <summary>
        /// Utworzone przez użytkownika
        /// </summary>
        /// <value>Utworzone przez użytkownika</value>
        [DataMember(Name="createdByUser", EmitDefaultValue=false)]
        public string CreatedByUser { get; set; }

        /// <summary>
        /// Działalność jako sprzedawca odpadów
        /// </summary>
        /// <value>Działalność jako sprzedawca odpadów</value>
        [DataMember(Name="isDealer", EmitDefaultValue=false)]
        public bool? IsDealer { get; set; }

        /// <summary>
        /// Działalność jako pośrednik w obrocie odpadami
        /// </summary>
        /// <value>Działalność jako pośrednik w obrocie odpadami</value>
        [DataMember(Name="isBroker", EmitDefaultValue=false)]
        public bool? IsBroker { get; set; }

        /// <summary>
        /// Data utworzenia
        /// </summary>
        /// <value>Data utworzenia</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Nazwa przekazującego
        /// </summary>
        /// <value>Nazwa przekazującego</value>
        [DataMember(Name="senderName", EmitDefaultValue=false)]
        public string SenderName { get; set; }

        /// <summary>
        /// Numer rejestrowy przekazującego
        /// </summary>
        /// <value>Numer rejestrowy przekazującego</value>
        [DataMember(Name="senderIdentificationNumber", EmitDefaultValue=false)]
        public string SenderIdentificationNumber { get; set; }

        /// <summary>
        /// Nazwa przejmującego
        /// </summary>
        /// <value>Nazwa przejmującego</value>
        [DataMember(Name="receiverName", EmitDefaultValue=false)]
        public string ReceiverName { get; set; }

        /// <summary>
        /// Numer rejestrowy przejmującego
        /// </summary>
        /// <value>Numer rejestrowy przejmującego</value>
        [DataMember(Name="receiverIdentificationNumber", EmitDefaultValue=false)]
        public string ReceiverIdentificationNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonItemWithCompanyDto {\n");
            sb.Append("  KeonItemId: ").Append(KeonItemId).Append("\n");
            sb.Append("  KeonId: ").Append(KeonId).Append("\n");
            sb.Append("  ReceiveConfirmationTime: ").Append(ReceiveConfirmationTime).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  WasteMass: ").Append(WasteMass).Append("\n");
            sb.Append("  SenderCompanyId: ").Append(SenderCompanyId).Append("\n");
            sb.Append("  SenderCompanyHtmlAddress: ").Append(SenderCompanyHtmlAddress).Append("\n");
            sb.Append("  ReceiverCompanyId: ").Append(ReceiverCompanyId).Append("\n");
            sb.Append("  ReceiverCompanyHtmlAddress: ").Append(ReceiverCompanyHtmlAddress).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  IsDealer: ").Append(IsDealer).Append("\n");
            sb.Append("  IsBroker: ").Append(IsBroker).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("  SenderIdentificationNumber: ").Append(SenderIdentificationNumber).Append("\n");
            sb.Append("  ReceiverName: ").Append(ReceiverName).Append("\n");
            sb.Append("  ReceiverIdentificationNumber: ").Append(ReceiverIdentificationNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonItemWithCompanyDto);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonItemWithCompanyDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonItemWithCompanyDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterHazardousWasteRecordCardV1KeonItemWithCompanyDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KeonItemId == input.KeonItemId ||
                    (this.KeonItemId != null &&
                    this.KeonItemId.Equals(input.KeonItemId))
                ) && 
                (
                    this.KeonId == input.KeonId ||
                    (this.KeonId != null &&
                    this.KeonId.Equals(input.KeonId))
                ) && 
                (
                    this.ReceiveConfirmationTime == input.ReceiveConfirmationTime ||
                    (this.ReceiveConfirmationTime != null &&
                    this.ReceiveConfirmationTime.Equals(input.ReceiveConfirmationTime))
                ) && 
                (
                    this.DocumentNumber == input.DocumentNumber ||
                    (this.DocumentNumber != null &&
                    this.DocumentNumber.Equals(input.DocumentNumber))
                ) && 
                (
                    this.WasteMass == input.WasteMass ||
                    (this.WasteMass != null &&
                    this.WasteMass.Equals(input.WasteMass))
                ) && 
                (
                    this.SenderCompanyId == input.SenderCompanyId ||
                    (this.SenderCompanyId != null &&
                    this.SenderCompanyId.Equals(input.SenderCompanyId))
                ) && 
                (
                    this.SenderCompanyHtmlAddress == input.SenderCompanyHtmlAddress ||
                    (this.SenderCompanyHtmlAddress != null &&
                    this.SenderCompanyHtmlAddress.Equals(input.SenderCompanyHtmlAddress))
                ) && 
                (
                    this.ReceiverCompanyId == input.ReceiverCompanyId ||
                    (this.ReceiverCompanyId != null &&
                    this.ReceiverCompanyId.Equals(input.ReceiverCompanyId))
                ) && 
                (
                    this.ReceiverCompanyHtmlAddress == input.ReceiverCompanyHtmlAddress ||
                    (this.ReceiverCompanyHtmlAddress != null &&
                    this.ReceiverCompanyHtmlAddress.Equals(input.ReceiverCompanyHtmlAddress))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.IsDealer == input.IsDealer ||
                    (this.IsDealer != null &&
                    this.IsDealer.Equals(input.IsDealer))
                ) && 
                (
                    this.IsBroker == input.IsBroker ||
                    (this.IsBroker != null &&
                    this.IsBroker.Equals(input.IsBroker))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.SenderName == input.SenderName ||
                    (this.SenderName != null &&
                    this.SenderName.Equals(input.SenderName))
                ) && 
                (
                    this.SenderIdentificationNumber == input.SenderIdentificationNumber ||
                    (this.SenderIdentificationNumber != null &&
                    this.SenderIdentificationNumber.Equals(input.SenderIdentificationNumber))
                ) && 
                (
                    this.ReceiverName == input.ReceiverName ||
                    (this.ReceiverName != null &&
                    this.ReceiverName.Equals(input.ReceiverName))
                ) && 
                (
                    this.ReceiverIdentificationNumber == input.ReceiverIdentificationNumber ||
                    (this.ReceiverIdentificationNumber != null &&
                    this.ReceiverIdentificationNumber.Equals(input.ReceiverIdentificationNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KeonItemId != null)
                    hashCode = hashCode * 59 + this.KeonItemId.GetHashCode();
                if (this.KeonId != null)
                    hashCode = hashCode * 59 + this.KeonId.GetHashCode();
                if (this.ReceiveConfirmationTime != null)
                    hashCode = hashCode * 59 + this.ReceiveConfirmationTime.GetHashCode();
                if (this.DocumentNumber != null)
                    hashCode = hashCode * 59 + this.DocumentNumber.GetHashCode();
                if (this.WasteMass != null)
                    hashCode = hashCode * 59 + this.WasteMass.GetHashCode();
                if (this.SenderCompanyId != null)
                    hashCode = hashCode * 59 + this.SenderCompanyId.GetHashCode();
                if (this.SenderCompanyHtmlAddress != null)
                    hashCode = hashCode * 59 + this.SenderCompanyHtmlAddress.GetHashCode();
                if (this.ReceiverCompanyId != null)
                    hashCode = hashCode * 59 + this.ReceiverCompanyId.GetHashCode();
                if (this.ReceiverCompanyHtmlAddress != null)
                    hashCode = hashCode * 59 + this.ReceiverCompanyHtmlAddress.GetHashCode();
                if (this.CreatedByUser != null)
                    hashCode = hashCode * 59 + this.CreatedByUser.GetHashCode();
                if (this.IsDealer != null)
                    hashCode = hashCode * 59 + this.IsDealer.GetHashCode();
                if (this.IsBroker != null)
                    hashCode = hashCode * 59 + this.IsBroker.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.SenderName != null)
                    hashCode = hashCode * 59 + this.SenderName.GetHashCode();
                if (this.SenderIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.SenderIdentificationNumber.GetHashCode();
                if (this.ReceiverName != null)
                    hashCode = hashCode * 59 + this.ReceiverName.GetHashCode();
                if (this.ReceiverIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.ReceiverIdentificationNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
