/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse" /> class.
        /// </summary>
        /// <param name="initialVehiclesMass">Masa pojazdów [Mg].</param>
        /// <param name="initialVehiclesCount">Liczba pojazdów [szt.].</param>
        /// <param name="cardNumber">Numer karty.</param>
        /// <param name="wasteCode">Kod odpadu.</param>
        /// <param name="year">Rok kalendarzowy.</param>
        /// <param name="recycledWasteMassSummary">Łączna masa odpadów poddanych recyklingowi.</param>
        /// <param name="energyRecoveryWasteMassSummary">Łączna masa odpadów poddanych odzyskowi energii.</param>
        /// <param name="otherThanRecycledWasteMassSummary">Łączna masa odpadów poddanych innemu niż recykling procesowi odzysku z wyłączeniem odzysku energii.</param>
        /// <param name="shreddedWasteMassSummary">Łączna masa odpadów poddanych rozdrobnieniu w strzępiarce.</param>
        /// <param name="disposedWasteMassSummary">Łączna masa odpadów poddanych unieszkodliwianiu.</param>
        /// <param name="transferredAbroadWasteMassSummary">Łączna masa odpadów przekazanych do innego kraju.</param>
        /// <param name="wasteCodeExtended">Kod ex.</param>
        /// <param name="wasteCodeExtendedDescription">Rodzaj odpadu ex.</param>
        /// <param name="hazardousWasteReclassification">Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne.</param>
        /// <param name="hazardousWasteReclassificationDescription">Rodzaj odpadu.</param>
        /// <param name="dismantleTransferredWastes">dismantleTransferredWastes.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse(double? initialVehiclesMass = default(double?), int? initialVehiclesCount = default(int?), string cardNumber = default(string), string wasteCode = default(string), int? year = default(int?), double? recycledWasteMassSummary = default(double?), double? energyRecoveryWasteMassSummary = default(double?), double? otherThanRecycledWasteMassSummary = default(double?), double? shreddedWasteMassSummary = default(double?), double? disposedWasteMassSummary = default(double?), double? transferredAbroadWasteMassSummary = default(double?), bool? wasteCodeExtended = default(bool?), string wasteCodeExtendedDescription = default(string), bool? hazardousWasteReclassification = default(bool?), string hazardousWasteReclassificationDescription = default(string), WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1PaginatedPageDismantleTransferredWasteListItem dismantleTransferredWastes = default(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1PaginatedPageDismantleTransferredWasteListItem))
        {
            this.InitialVehiclesMass = initialVehiclesMass;
            this.InitialVehiclesCount = initialVehiclesCount;
            this.CardNumber = cardNumber;
            this.WasteCode = wasteCode;
            this.Year = year;
            this.RecycledWasteMassSummary = recycledWasteMassSummary;
            this.EnergyRecoveryWasteMassSummary = energyRecoveryWasteMassSummary;
            this.OtherThanRecycledWasteMassSummary = otherThanRecycledWasteMassSummary;
            this.ShreddedWasteMassSummary = shreddedWasteMassSummary;
            this.DisposedWasteMassSummary = disposedWasteMassSummary;
            this.TransferredAbroadWasteMassSummary = transferredAbroadWasteMassSummary;
            this.WasteCodeExtended = wasteCodeExtended;
            this.WasteCodeExtendedDescription = wasteCodeExtendedDescription;
            this.HazardousWasteReclassification = hazardousWasteReclassification;
            this.HazardousWasteReclassificationDescription = hazardousWasteReclassificationDescription;
            this.DismantleTransferredWastes = dismantleTransferredWastes;
        }
        
        /// <summary>
        /// Masa pojazdów [Mg]
        /// </summary>
        /// <value>Masa pojazdów [Mg]</value>
        [DataMember(Name="initialVehiclesMass", EmitDefaultValue=false)]
        public double? InitialVehiclesMass { get; set; }

        /// <summary>
        /// Liczba pojazdów [szt.]
        /// </summary>
        /// <value>Liczba pojazdów [szt.]</value>
        [DataMember(Name="initialVehiclesCount", EmitDefaultValue=false)]
        public int? InitialVehiclesCount { get; set; }

        /// <summary>
        /// Numer karty
        /// </summary>
        /// <value>Numer karty</value>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Kod odpadu
        /// </summary>
        /// <value>Kod odpadu</value>
        [DataMember(Name="wasteCode", EmitDefaultValue=false)]
        public string WasteCode { get; set; }

        /// <summary>
        /// Rok kalendarzowy
        /// </summary>
        /// <value>Rok kalendarzowy</value>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int? Year { get; set; }

        /// <summary>
        /// Łączna masa odpadów poddanych recyklingowi
        /// </summary>
        /// <value>Łączna masa odpadów poddanych recyklingowi</value>
        [DataMember(Name="recycledWasteMassSummary", EmitDefaultValue=false)]
        public double? RecycledWasteMassSummary { get; set; }

        /// <summary>
        /// Łączna masa odpadów poddanych odzyskowi energii
        /// </summary>
        /// <value>Łączna masa odpadów poddanych odzyskowi energii</value>
        [DataMember(Name="energyRecoveryWasteMassSummary", EmitDefaultValue=false)]
        public double? EnergyRecoveryWasteMassSummary { get; set; }

        /// <summary>
        /// Łączna masa odpadów poddanych innemu niż recykling procesowi odzysku z wyłączeniem odzysku energii
        /// </summary>
        /// <value>Łączna masa odpadów poddanych innemu niż recykling procesowi odzysku z wyłączeniem odzysku energii</value>
        [DataMember(Name="otherThanRecycledWasteMassSummary", EmitDefaultValue=false)]
        public double? OtherThanRecycledWasteMassSummary { get; set; }

        /// <summary>
        /// Łączna masa odpadów poddanych rozdrobnieniu w strzępiarce
        /// </summary>
        /// <value>Łączna masa odpadów poddanych rozdrobnieniu w strzępiarce</value>
        [DataMember(Name="shreddedWasteMassSummary", EmitDefaultValue=false)]
        public double? ShreddedWasteMassSummary { get; set; }

        /// <summary>
        /// Łączna masa odpadów poddanych unieszkodliwianiu
        /// </summary>
        /// <value>Łączna masa odpadów poddanych unieszkodliwianiu</value>
        [DataMember(Name="disposedWasteMassSummary", EmitDefaultValue=false)]
        public double? DisposedWasteMassSummary { get; set; }

        /// <summary>
        /// Łączna masa odpadów przekazanych do innego kraju
        /// </summary>
        /// <value>Łączna masa odpadów przekazanych do innego kraju</value>
        [DataMember(Name="transferredAbroadWasteMassSummary", EmitDefaultValue=false)]
        public double? TransferredAbroadWasteMassSummary { get; set; }

        /// <summary>
        /// Kod ex
        /// </summary>
        /// <value>Kod ex</value>
        [DataMember(Name="wasteCodeExtended", EmitDefaultValue=false)]
        public bool? WasteCodeExtended { get; set; }

        /// <summary>
        /// Rodzaj odpadu ex
        /// </summary>
        /// <value>Rodzaj odpadu ex</value>
        [DataMember(Name="wasteCodeExtendedDescription", EmitDefaultValue=false)]
        public string WasteCodeExtendedDescription { get; set; }

        /// <summary>
        /// Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne
        /// </summary>
        /// <value>Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne</value>
        [DataMember(Name="hazardousWasteReclassification", EmitDefaultValue=false)]
        public bool? HazardousWasteReclassification { get; set; }

        /// <summary>
        /// Rodzaj odpadu
        /// </summary>
        /// <value>Rodzaj odpadu</value>
        [DataMember(Name="hazardousWasteReclassificationDescription", EmitDefaultValue=false)]
        public string HazardousWasteReclassificationDescription { get; set; }

        /// <summary>
        /// Gets or Sets DismantleTransferredWastes
        /// </summary>
        [DataMember(Name="dismantleTransferredWastes", EmitDefaultValue=false)]
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1PaginatedPageDismantleTransferredWasteListItem DismantleTransferredWastes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse {\n");
            sb.Append("  InitialVehiclesMass: ").Append(InitialVehiclesMass).Append("\n");
            sb.Append("  InitialVehiclesCount: ").Append(InitialVehiclesCount).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  WasteCode: ").Append(WasteCode).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  RecycledWasteMassSummary: ").Append(RecycledWasteMassSummary).Append("\n");
            sb.Append("  EnergyRecoveryWasteMassSummary: ").Append(EnergyRecoveryWasteMassSummary).Append("\n");
            sb.Append("  OtherThanRecycledWasteMassSummary: ").Append(OtherThanRecycledWasteMassSummary).Append("\n");
            sb.Append("  ShreddedWasteMassSummary: ").Append(ShreddedWasteMassSummary).Append("\n");
            sb.Append("  DisposedWasteMassSummary: ").Append(DisposedWasteMassSummary).Append("\n");
            sb.Append("  TransferredAbroadWasteMassSummary: ").Append(TransferredAbroadWasteMassSummary).Append("\n");
            sb.Append("  WasteCodeExtended: ").Append(WasteCodeExtended).Append("\n");
            sb.Append("  WasteCodeExtendedDescription: ").Append(WasteCodeExtendedDescription).Append("\n");
            sb.Append("  HazardousWasteReclassification: ").Append(HazardousWasteReclassification).Append("\n");
            sb.Append("  HazardousWasteReclassificationDescription: ").Append(HazardousWasteReclassificationDescription).Append("\n");
            sb.Append("  DismantleTransferredWastes: ").Append(DismantleTransferredWastes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InitialVehiclesMass == input.InitialVehiclesMass ||
                    (this.InitialVehiclesMass != null &&
                    this.InitialVehiclesMass.Equals(input.InitialVehiclesMass))
                ) && 
                (
                    this.InitialVehiclesCount == input.InitialVehiclesCount ||
                    (this.InitialVehiclesCount != null &&
                    this.InitialVehiclesCount.Equals(input.InitialVehiclesCount))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.WasteCode == input.WasteCode ||
                    (this.WasteCode != null &&
                    this.WasteCode.Equals(input.WasteCode))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.RecycledWasteMassSummary == input.RecycledWasteMassSummary ||
                    (this.RecycledWasteMassSummary != null &&
                    this.RecycledWasteMassSummary.Equals(input.RecycledWasteMassSummary))
                ) && 
                (
                    this.EnergyRecoveryWasteMassSummary == input.EnergyRecoveryWasteMassSummary ||
                    (this.EnergyRecoveryWasteMassSummary != null &&
                    this.EnergyRecoveryWasteMassSummary.Equals(input.EnergyRecoveryWasteMassSummary))
                ) && 
                (
                    this.OtherThanRecycledWasteMassSummary == input.OtherThanRecycledWasteMassSummary ||
                    (this.OtherThanRecycledWasteMassSummary != null &&
                    this.OtherThanRecycledWasteMassSummary.Equals(input.OtherThanRecycledWasteMassSummary))
                ) && 
                (
                    this.ShreddedWasteMassSummary == input.ShreddedWasteMassSummary ||
                    (this.ShreddedWasteMassSummary != null &&
                    this.ShreddedWasteMassSummary.Equals(input.ShreddedWasteMassSummary))
                ) && 
                (
                    this.DisposedWasteMassSummary == input.DisposedWasteMassSummary ||
                    (this.DisposedWasteMassSummary != null &&
                    this.DisposedWasteMassSummary.Equals(input.DisposedWasteMassSummary))
                ) && 
                (
                    this.TransferredAbroadWasteMassSummary == input.TransferredAbroadWasteMassSummary ||
                    (this.TransferredAbroadWasteMassSummary != null &&
                    this.TransferredAbroadWasteMassSummary.Equals(input.TransferredAbroadWasteMassSummary))
                ) && 
                (
                    this.WasteCodeExtended == input.WasteCodeExtended ||
                    (this.WasteCodeExtended != null &&
                    this.WasteCodeExtended.Equals(input.WasteCodeExtended))
                ) && 
                (
                    this.WasteCodeExtendedDescription == input.WasteCodeExtendedDescription ||
                    (this.WasteCodeExtendedDescription != null &&
                    this.WasteCodeExtendedDescription.Equals(input.WasteCodeExtendedDescription))
                ) && 
                (
                    this.HazardousWasteReclassification == input.HazardousWasteReclassification ||
                    (this.HazardousWasteReclassification != null &&
                    this.HazardousWasteReclassification.Equals(input.HazardousWasteReclassification))
                ) && 
                (
                    this.HazardousWasteReclassificationDescription == input.HazardousWasteReclassificationDescription ||
                    (this.HazardousWasteReclassificationDescription != null &&
                    this.HazardousWasteReclassificationDescription.Equals(input.HazardousWasteReclassificationDescription))
                ) && 
                (
                    this.DismantleTransferredWastes == input.DismantleTransferredWastes ||
                    (this.DismantleTransferredWastes != null &&
                    this.DismantleTransferredWastes.Equals(input.DismantleTransferredWastes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InitialVehiclesMass != null)
                    hashCode = hashCode * 59 + this.InitialVehiclesMass.GetHashCode();
                if (this.InitialVehiclesCount != null)
                    hashCode = hashCode * 59 + this.InitialVehiclesCount.GetHashCode();
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                if (this.WasteCode != null)
                    hashCode = hashCode * 59 + this.WasteCode.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.RecycledWasteMassSummary != null)
                    hashCode = hashCode * 59 + this.RecycledWasteMassSummary.GetHashCode();
                if (this.EnergyRecoveryWasteMassSummary != null)
                    hashCode = hashCode * 59 + this.EnergyRecoveryWasteMassSummary.GetHashCode();
                if (this.OtherThanRecycledWasteMassSummary != null)
                    hashCode = hashCode * 59 + this.OtherThanRecycledWasteMassSummary.GetHashCode();
                if (this.ShreddedWasteMassSummary != null)
                    hashCode = hashCode * 59 + this.ShreddedWasteMassSummary.GetHashCode();
                if (this.DisposedWasteMassSummary != null)
                    hashCode = hashCode * 59 + this.DisposedWasteMassSummary.GetHashCode();
                if (this.TransferredAbroadWasteMassSummary != null)
                    hashCode = hashCode * 59 + this.TransferredAbroadWasteMassSummary.GetHashCode();
                if (this.WasteCodeExtended != null)
                    hashCode = hashCode * 59 + this.WasteCodeExtended.GetHashCode();
                if (this.WasteCodeExtendedDescription != null)
                    hashCode = hashCode * 59 + this.WasteCodeExtendedDescription.GetHashCode();
                if (this.HazardousWasteReclassification != null)
                    hashCode = hashCode * 59 + this.HazardousWasteReclassification.GetHashCode();
                if (this.HazardousWasteReclassificationDescription != null)
                    hashCode = hashCode * 59 + this.HazardousWasteReclassificationDescription.GetHashCode();
                if (this.DismantleTransferredWastes != null)
                    hashCode = hashCode * 59 + this.DismantleTransferredWastes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
