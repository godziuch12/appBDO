/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoForwardedListItem
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoForwardedListItem :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoForwardedListItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoForwardedListItem" /> class.
        /// </summary>
        /// <param name="keoForwardedId">Id wpisu Przekazane odpady.</param>
        /// <param name="wasteCollectionDate">wasteCollectionDate.</param>
        /// <param name="wasteMass">Masa odpadów.</param>
        /// <param name="cardNumberKpo">Numer karty kpo.</param>
        /// <param name="basedOnKpo">Wpis dokonywany na podstawie karty przekazania odpadów.</param>
        /// <param name="transferAbroad">Wywóz poza RP.</param>
        /// <param name="transferToNaturalPersons">Przekazane osobom fizycznym lub innym jednostkom organizacyjnym niebędącym przedsiębiorcami.</param>
        /// <param name="ownerExemptFromRecords">Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów.</param>
        /// <param name="transportDate">transportDate.</param>
        /// <param name="createdByUser">Utworzone przez użytkownika.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoForwardedListItem(Guid? keoForwardedId = default(Guid?), DateTime? wasteCollectionDate = default(DateTime?), double? wasteMass = default(double?), string cardNumberKpo = default(string), bool? basedOnKpo = default(bool?), bool? transferAbroad = default(bool?), bool? transferToNaturalPersons = default(bool?), bool? ownerExemptFromRecords = default(bool?), DateTime? transportDate = default(DateTime?), string createdByUser = default(string))
        {
            this.KeoForwardedId = keoForwardedId;
            this.WasteCollectionDate = wasteCollectionDate;
            this.WasteMass = wasteMass;
            this.CardNumberKpo = cardNumberKpo;
            this.BasedOnKpo = basedOnKpo;
            this.TransferAbroad = transferAbroad;
            this.TransferToNaturalPersons = transferToNaturalPersons;
            this.OwnerExemptFromRecords = ownerExemptFromRecords;
            this.TransportDate = transportDate;
            this.CreatedByUser = createdByUser;
        }
        
        /// <summary>
        /// Id wpisu Przekazane odpady
        /// </summary>
        /// <value>Id wpisu Przekazane odpady</value>
        [DataMember(Name="keoForwardedId", EmitDefaultValue=false)]
        public Guid? KeoForwardedId { get; set; }

        /// <summary>
        /// Gets or Sets WasteCollectionDate
        /// </summary>
        [DataMember(Name="wasteCollectionDate", EmitDefaultValue=false)]
        public DateTime? WasteCollectionDate { get; set; }

        /// <summary>
        /// Masa odpadów
        /// </summary>
        /// <value>Masa odpadów</value>
        [DataMember(Name="wasteMass", EmitDefaultValue=false)]
        public double? WasteMass { get; set; }

        /// <summary>
        /// Numer karty kpo
        /// </summary>
        /// <value>Numer karty kpo</value>
        [DataMember(Name="cardNumberKpo", EmitDefaultValue=false)]
        public string CardNumberKpo { get; set; }

        /// <summary>
        /// Wpis dokonywany na podstawie karty przekazania odpadów
        /// </summary>
        /// <value>Wpis dokonywany na podstawie karty przekazania odpadów</value>
        [DataMember(Name="basedOnKpo", EmitDefaultValue=false)]
        public bool? BasedOnKpo { get; set; }

        /// <summary>
        /// Wywóz poza RP
        /// </summary>
        /// <value>Wywóz poza RP</value>
        [DataMember(Name="transferAbroad", EmitDefaultValue=false)]
        public bool? TransferAbroad { get; set; }

        /// <summary>
        /// Przekazane osobom fizycznym lub innym jednostkom organizacyjnym niebędącym przedsiębiorcami
        /// </summary>
        /// <value>Przekazane osobom fizycznym lub innym jednostkom organizacyjnym niebędącym przedsiębiorcami</value>
        [DataMember(Name="transferToNaturalPersons", EmitDefaultValue=false)]
        public bool? TransferToNaturalPersons { get; set; }

        /// <summary>
        /// Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów
        /// </summary>
        /// <value>Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów</value>
        [DataMember(Name="ownerExemptFromRecords", EmitDefaultValue=false)]
        public bool? OwnerExemptFromRecords { get; set; }

        /// <summary>
        /// Gets or Sets TransportDate
        /// </summary>
        [DataMember(Name="transportDate", EmitDefaultValue=false)]
        public DateTime? TransportDate { get; set; }

        /// <summary>
        /// Utworzone przez użytkownika
        /// </summary>
        /// <value>Utworzone przez użytkownika</value>
        [DataMember(Name="createdByUser", EmitDefaultValue=false)]
        public string CreatedByUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoForwardedListItem {\n");
            sb.Append("  KeoForwardedId: ").Append(KeoForwardedId).Append("\n");
            sb.Append("  WasteCollectionDate: ").Append(WasteCollectionDate).Append("\n");
            sb.Append("  WasteMass: ").Append(WasteMass).Append("\n");
            sb.Append("  CardNumberKpo: ").Append(CardNumberKpo).Append("\n");
            sb.Append("  BasedOnKpo: ").Append(BasedOnKpo).Append("\n");
            sb.Append("  TransferAbroad: ").Append(TransferAbroad).Append("\n");
            sb.Append("  TransferToNaturalPersons: ").Append(TransferToNaturalPersons).Append("\n");
            sb.Append("  OwnerExemptFromRecords: ").Append(OwnerExemptFromRecords).Append("\n");
            sb.Append("  TransportDate: ").Append(TransportDate).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoForwardedListItem);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoForwardedListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoForwardedListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoForwardedListItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KeoForwardedId == input.KeoForwardedId ||
                    (this.KeoForwardedId != null &&
                    this.KeoForwardedId.Equals(input.KeoForwardedId))
                ) && 
                (
                    this.WasteCollectionDate == input.WasteCollectionDate ||
                    (this.WasteCollectionDate != null &&
                    this.WasteCollectionDate.Equals(input.WasteCollectionDate))
                ) && 
                (
                    this.WasteMass == input.WasteMass ||
                    (this.WasteMass != null &&
                    this.WasteMass.Equals(input.WasteMass))
                ) && 
                (
                    this.CardNumberKpo == input.CardNumberKpo ||
                    (this.CardNumberKpo != null &&
                    this.CardNumberKpo.Equals(input.CardNumberKpo))
                ) && 
                (
                    this.BasedOnKpo == input.BasedOnKpo ||
                    (this.BasedOnKpo != null &&
                    this.BasedOnKpo.Equals(input.BasedOnKpo))
                ) && 
                (
                    this.TransferAbroad == input.TransferAbroad ||
                    (this.TransferAbroad != null &&
                    this.TransferAbroad.Equals(input.TransferAbroad))
                ) && 
                (
                    this.TransferToNaturalPersons == input.TransferToNaturalPersons ||
                    (this.TransferToNaturalPersons != null &&
                    this.TransferToNaturalPersons.Equals(input.TransferToNaturalPersons))
                ) && 
                (
                    this.OwnerExemptFromRecords == input.OwnerExemptFromRecords ||
                    (this.OwnerExemptFromRecords != null &&
                    this.OwnerExemptFromRecords.Equals(input.OwnerExemptFromRecords))
                ) && 
                (
                    this.TransportDate == input.TransportDate ||
                    (this.TransportDate != null &&
                    this.TransportDate.Equals(input.TransportDate))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KeoForwardedId != null)
                    hashCode = hashCode * 59 + this.KeoForwardedId.GetHashCode();
                if (this.WasteCollectionDate != null)
                    hashCode = hashCode * 59 + this.WasteCollectionDate.GetHashCode();
                if (this.WasteMass != null)
                    hashCode = hashCode * 59 + this.WasteMass.GetHashCode();
                if (this.CardNumberKpo != null)
                    hashCode = hashCode * 59 + this.CardNumberKpo.GetHashCode();
                if (this.BasedOnKpo != null)
                    hashCode = hashCode * 59 + this.BasedOnKpo.GetHashCode();
                if (this.TransferAbroad != null)
                    hashCode = hashCode * 59 + this.TransferAbroad.GetHashCode();
                if (this.TransferToNaturalPersons != null)
                    hashCode = hashCode * 59 + this.TransferToNaturalPersons.GetHashCode();
                if (this.OwnerExemptFromRecords != null)
                    hashCode = hashCode * 59 + this.OwnerExemptFromRecords.GetHashCode();
                if (this.TransportDate != null)
                    hashCode = hashCode * 59 + this.TransportDate.GetHashCode();
                if (this.CreatedByUser != null)
                    hashCode = hashCode * 59 + this.CreatedByUser.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
