/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1LandSurfaceRulerDto
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1LandSurfaceRulerDto :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1LandSurfaceRulerDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1LandSurfaceRulerDto" /> class.
        /// </summary>
        /// <param name="kekosLandSurfaceRulerId">Id władającego powierzchnią ziemi.</param>
        /// <param name="isForeigner">Podmiot zagraniczny władający powierzchnią ziemi.</param>
        /// <param name="name">Imię i nazwisko lub nazwa władającego powierzchnią ziemi.</param>
        /// <param name="kekosAppliedSedimentId">Id wpisu Zastosowane osady.</param>
        /// <param name="recordingCompanyId">recordingCompanyId.</param>
        /// <param name="addressHtml">Adres.</param>
        /// <param name="addressFormatted">addressFormatted.</param>
        /// <param name="terytPk">Numer TERYT.</param>
        /// <param name="district">district.</param>
        /// <param name="province">province.</param>
        /// <param name="commune">commune.</param>
        /// <param name="communeType">communeType.</param>
        /// <param name="locality">Miejscowość.</param>
        /// <param name="localityType">localityType.</param>
        /// <param name="parentLocality">parentLocality.</param>
        /// <param name="street">Ulica.</param>
        /// <param name="streetType">streetType.</param>
        /// <param name="buildingNumber">Numer budynku.</param>
        /// <param name="localNumber">Numer lokalu.</param>
        /// <param name="postalCode">Kod pocztowy.</param>
        /// <param name="postLocality">postLocality.</param>
        /// <param name="countryId">Id kraju.</param>
        /// <param name="countryName">Kraj.</param>
        /// <param name="hasNoStreetName">Nie podano nazwy ulicy.</param>
        /// <param name="hasNoBuildingNumber">Nie podano numeru budynku.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1LandSurfaceRulerDto(Guid? kekosLandSurfaceRulerId = default(Guid?), bool? isForeigner = default(bool?), string name = default(string), Guid? kekosAppliedSedimentId = default(Guid?), Guid? recordingCompanyId = default(Guid?), string addressHtml = default(string), string addressFormatted = default(string), string terytPk = default(string), string district = default(string), string province = default(string), string commune = default(string), string communeType = default(string), string locality = default(string), string localityType = default(string), string parentLocality = default(string), string street = default(string), string streetType = default(string), string buildingNumber = default(string), string localNumber = default(string), string postalCode = default(string), string postLocality = default(string), int? countryId = default(int?), string countryName = default(string), bool? hasNoStreetName = default(bool?), bool? hasNoBuildingNumber = default(bool?))
        {
            this.KekosLandSurfaceRulerId = kekosLandSurfaceRulerId;
            this.IsForeigner = isForeigner;
            this.Name = name;
            this.KekosAppliedSedimentId = kekosAppliedSedimentId;
            this.RecordingCompanyId = recordingCompanyId;
            this.AddressHtml = addressHtml;
            this.AddressFormatted = addressFormatted;
            this.TerytPk = terytPk;
            this.District = district;
            this.Province = province;
            this.Commune = commune;
            this.CommuneType = communeType;
            this.Locality = locality;
            this.LocalityType = localityType;
            this.ParentLocality = parentLocality;
            this.Street = street;
            this.StreetType = streetType;
            this.BuildingNumber = buildingNumber;
            this.LocalNumber = localNumber;
            this.PostalCode = postalCode;
            this.PostLocality = postLocality;
            this.CountryId = countryId;
            this.CountryName = countryName;
            this.HasNoStreetName = hasNoStreetName;
            this.HasNoBuildingNumber = hasNoBuildingNumber;
        }
        
        /// <summary>
        /// Id władającego powierzchnią ziemi
        /// </summary>
        /// <value>Id władającego powierzchnią ziemi</value>
        [DataMember(Name="kekosLandSurfaceRulerId", EmitDefaultValue=false)]
        public Guid? KekosLandSurfaceRulerId { get; set; }

        /// <summary>
        /// Podmiot zagraniczny władający powierzchnią ziemi
        /// </summary>
        /// <value>Podmiot zagraniczny władający powierzchnią ziemi</value>
        [DataMember(Name="isForeigner", EmitDefaultValue=false)]
        public bool? IsForeigner { get; set; }

        /// <summary>
        /// Imię i nazwisko lub nazwa władającego powierzchnią ziemi
        /// </summary>
        /// <value>Imię i nazwisko lub nazwa władającego powierzchnią ziemi</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Id wpisu Zastosowane osady
        /// </summary>
        /// <value>Id wpisu Zastosowane osady</value>
        [DataMember(Name="kekosAppliedSedimentId", EmitDefaultValue=false)]
        public Guid? KekosAppliedSedimentId { get; set; }

        /// <summary>
        /// Gets or Sets RecordingCompanyId
        /// </summary>
        [DataMember(Name="recordingCompanyId", EmitDefaultValue=false)]
        public Guid? RecordingCompanyId { get; set; }

        /// <summary>
        /// Adres
        /// </summary>
        /// <value>Adres</value>
        [DataMember(Name="addressHtml", EmitDefaultValue=false)]
        public string AddressHtml { get; set; }

        /// <summary>
        /// Gets or Sets AddressFormatted
        /// </summary>
        [DataMember(Name="addressFormatted", EmitDefaultValue=false)]
        public string AddressFormatted { get; set; }

        /// <summary>
        /// Numer TERYT
        /// </summary>
        /// <value>Numer TERYT</value>
        [DataMember(Name="terytPk", EmitDefaultValue=false)]
        public string TerytPk { get; set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>
        [DataMember(Name="district", EmitDefaultValue=false)]
        public string District { get; set; }

        /// <summary>
        /// Gets or Sets Province
        /// </summary>
        [DataMember(Name="province", EmitDefaultValue=false)]
        public string Province { get; set; }

        /// <summary>
        /// Gets or Sets Commune
        /// </summary>
        [DataMember(Name="commune", EmitDefaultValue=false)]
        public string Commune { get; set; }

        /// <summary>
        /// Gets or Sets CommuneType
        /// </summary>
        [DataMember(Name="communeType", EmitDefaultValue=false)]
        public string CommuneType { get; set; }

        /// <summary>
        /// Miejscowość
        /// </summary>
        /// <value>Miejscowość</value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// Gets or Sets LocalityType
        /// </summary>
        [DataMember(Name="localityType", EmitDefaultValue=false)]
        public string LocalityType { get; set; }

        /// <summary>
        /// Gets or Sets ParentLocality
        /// </summary>
        [DataMember(Name="parentLocality", EmitDefaultValue=false)]
        public string ParentLocality { get; set; }

        /// <summary>
        /// Ulica
        /// </summary>
        /// <value>Ulica</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets StreetType
        /// </summary>
        [DataMember(Name="streetType", EmitDefaultValue=false)]
        public string StreetType { get; set; }

        /// <summary>
        /// Numer budynku
        /// </summary>
        /// <value>Numer budynku</value>
        [DataMember(Name="buildingNumber", EmitDefaultValue=false)]
        public string BuildingNumber { get; set; }

        /// <summary>
        /// Numer lokalu
        /// </summary>
        /// <value>Numer lokalu</value>
        [DataMember(Name="localNumber", EmitDefaultValue=false)]
        public string LocalNumber { get; set; }

        /// <summary>
        /// Kod pocztowy
        /// </summary>
        /// <value>Kod pocztowy</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets PostLocality
        /// </summary>
        [DataMember(Name="postLocality", EmitDefaultValue=false)]
        public string PostLocality { get; set; }

        /// <summary>
        /// Id kraju
        /// </summary>
        /// <value>Id kraju</value>
        [DataMember(Name="countryId", EmitDefaultValue=false)]
        public int? CountryId { get; set; }

        /// <summary>
        /// Kraj
        /// </summary>
        /// <value>Kraj</value>
        [DataMember(Name="countryName", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Nie podano nazwy ulicy
        /// </summary>
        /// <value>Nie podano nazwy ulicy</value>
        [DataMember(Name="hasNoStreetName", EmitDefaultValue=false)]
        public bool? HasNoStreetName { get; set; }

        /// <summary>
        /// Nie podano numeru budynku
        /// </summary>
        /// <value>Nie podano numeru budynku</value>
        [DataMember(Name="hasNoBuildingNumber", EmitDefaultValue=false)]
        public bool? HasNoBuildingNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1LandSurfaceRulerDto {\n");
            sb.Append("  KekosLandSurfaceRulerId: ").Append(KekosLandSurfaceRulerId).Append("\n");
            sb.Append("  IsForeigner: ").Append(IsForeigner).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  KekosAppliedSedimentId: ").Append(KekosAppliedSedimentId).Append("\n");
            sb.Append("  RecordingCompanyId: ").Append(RecordingCompanyId).Append("\n");
            sb.Append("  AddressHtml: ").Append(AddressHtml).Append("\n");
            sb.Append("  AddressFormatted: ").Append(AddressFormatted).Append("\n");
            sb.Append("  TerytPk: ").Append(TerytPk).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  Commune: ").Append(Commune).Append("\n");
            sb.Append("  CommuneType: ").Append(CommuneType).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  LocalityType: ").Append(LocalityType).Append("\n");
            sb.Append("  ParentLocality: ").Append(ParentLocality).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  StreetType: ").Append(StreetType).Append("\n");
            sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
            sb.Append("  LocalNumber: ").Append(LocalNumber).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  PostLocality: ").Append(PostLocality).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  HasNoStreetName: ").Append(HasNoStreetName).Append("\n");
            sb.Append("  HasNoBuildingNumber: ").Append(HasNoBuildingNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1LandSurfaceRulerDto);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1LandSurfaceRulerDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1LandSurfaceRulerDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1LandSurfaceRulerDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KekosLandSurfaceRulerId == input.KekosLandSurfaceRulerId ||
                    (this.KekosLandSurfaceRulerId != null &&
                    this.KekosLandSurfaceRulerId.Equals(input.KekosLandSurfaceRulerId))
                ) && 
                (
                    this.IsForeigner == input.IsForeigner ||
                    (this.IsForeigner != null &&
                    this.IsForeigner.Equals(input.IsForeigner))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.KekosAppliedSedimentId == input.KekosAppliedSedimentId ||
                    (this.KekosAppliedSedimentId != null &&
                    this.KekosAppliedSedimentId.Equals(input.KekosAppliedSedimentId))
                ) && 
                (
                    this.RecordingCompanyId == input.RecordingCompanyId ||
                    (this.RecordingCompanyId != null &&
                    this.RecordingCompanyId.Equals(input.RecordingCompanyId))
                ) && 
                (
                    this.AddressHtml == input.AddressHtml ||
                    (this.AddressHtml != null &&
                    this.AddressHtml.Equals(input.AddressHtml))
                ) && 
                (
                    this.AddressFormatted == input.AddressFormatted ||
                    (this.AddressFormatted != null &&
                    this.AddressFormatted.Equals(input.AddressFormatted))
                ) && 
                (
                    this.TerytPk == input.TerytPk ||
                    (this.TerytPk != null &&
                    this.TerytPk.Equals(input.TerytPk))
                ) && 
                (
                    this.District == input.District ||
                    (this.District != null &&
                    this.District.Equals(input.District))
                ) && 
                (
                    this.Province == input.Province ||
                    (this.Province != null &&
                    this.Province.Equals(input.Province))
                ) && 
                (
                    this.Commune == input.Commune ||
                    (this.Commune != null &&
                    this.Commune.Equals(input.Commune))
                ) && 
                (
                    this.CommuneType == input.CommuneType ||
                    (this.CommuneType != null &&
                    this.CommuneType.Equals(input.CommuneType))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.LocalityType == input.LocalityType ||
                    (this.LocalityType != null &&
                    this.LocalityType.Equals(input.LocalityType))
                ) && 
                (
                    this.ParentLocality == input.ParentLocality ||
                    (this.ParentLocality != null &&
                    this.ParentLocality.Equals(input.ParentLocality))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.StreetType == input.StreetType ||
                    (this.StreetType != null &&
                    this.StreetType.Equals(input.StreetType))
                ) && 
                (
                    this.BuildingNumber == input.BuildingNumber ||
                    (this.BuildingNumber != null &&
                    this.BuildingNumber.Equals(input.BuildingNumber))
                ) && 
                (
                    this.LocalNumber == input.LocalNumber ||
                    (this.LocalNumber != null &&
                    this.LocalNumber.Equals(input.LocalNumber))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.PostLocality == input.PostLocality ||
                    (this.PostLocality != null &&
                    this.PostLocality.Equals(input.PostLocality))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.HasNoStreetName == input.HasNoStreetName ||
                    (this.HasNoStreetName != null &&
                    this.HasNoStreetName.Equals(input.HasNoStreetName))
                ) && 
                (
                    this.HasNoBuildingNumber == input.HasNoBuildingNumber ||
                    (this.HasNoBuildingNumber != null &&
                    this.HasNoBuildingNumber.Equals(input.HasNoBuildingNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KekosLandSurfaceRulerId != null)
                    hashCode = hashCode * 59 + this.KekosLandSurfaceRulerId.GetHashCode();
                if (this.IsForeigner != null)
                    hashCode = hashCode * 59 + this.IsForeigner.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.KekosAppliedSedimentId != null)
                    hashCode = hashCode * 59 + this.KekosAppliedSedimentId.GetHashCode();
                if (this.RecordingCompanyId != null)
                    hashCode = hashCode * 59 + this.RecordingCompanyId.GetHashCode();
                if (this.AddressHtml != null)
                    hashCode = hashCode * 59 + this.AddressHtml.GetHashCode();
                if (this.AddressFormatted != null)
                    hashCode = hashCode * 59 + this.AddressFormatted.GetHashCode();
                if (this.TerytPk != null)
                    hashCode = hashCode * 59 + this.TerytPk.GetHashCode();
                if (this.District != null)
                    hashCode = hashCode * 59 + this.District.GetHashCode();
                if (this.Province != null)
                    hashCode = hashCode * 59 + this.Province.GetHashCode();
                if (this.Commune != null)
                    hashCode = hashCode * 59 + this.Commune.GetHashCode();
                if (this.CommuneType != null)
                    hashCode = hashCode * 59 + this.CommuneType.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.LocalityType != null)
                    hashCode = hashCode * 59 + this.LocalityType.GetHashCode();
                if (this.ParentLocality != null)
                    hashCode = hashCode * 59 + this.ParentLocality.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.StreetType != null)
                    hashCode = hashCode * 59 + this.StreetType.GetHashCode();
                if (this.BuildingNumber != null)
                    hashCode = hashCode * 59 + this.BuildingNumber.GetHashCode();
                if (this.LocalNumber != null)
                    hashCode = hashCode * 59 + this.LocalNumber.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.PostLocality != null)
                    hashCode = hashCode * 59 + this.PostLocality.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.HasNoStreetName != null)
                    hashCode = hashCode * 59 + this.HasNoStreetName.GetHashCode();
                if (this.HasNoBuildingNumber != null)
                    hashCode = hashCode * 59 + this.HasNoBuildingNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
