/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse" /> class.
        /// </summary>
        /// <param name="cardNumber">Numer karty.</param>
        /// <param name="calendarYear">Rok kalendarzowy.</param>
        /// <param name="wasteCodeWithDescription">wasteCodeWithDescription.</param>
        /// <param name="companyName">Nazwa lub imię i nazwisko.</param>
        /// <param name="companyAdress">Adres.</param>
        /// <param name="companyIdentificationNumber">Numer rejestrowy.</param>
        /// <param name="companyNip">NIP.</param>
        /// <param name="companyNipEu">NIP europejski.</param>
        /// <param name="eupName">Nazwa miejsca prowadzenia działalności.</param>
        /// <param name="eupIdentificationNumber">Numer miejsca prowadzenia działalności.</param>
        /// <param name="eupAdress">Adres miejsca prowadzenia działalności.</param>
        /// <param name="sludgeMassMgSum">sludgeMassMgSum.</param>
        /// <param name="sludgeMassMgSmSum">sludgeMassMgSmSum.</param>
        /// <param name="appliedSludgeMassSum">appliedSludgeMassSum.</param>
        /// <param name="appliedSludgeDryMatterMassSum">appliedSludgeDryMatterMassSum.</param>
        /// <param name="listItems">listItems.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse(string cardNumber = default(string), string calendarYear = default(string), string wasteCodeWithDescription = default(string), string companyName = default(string), string companyAdress = default(string), string companyIdentificationNumber = default(string), string companyNip = default(string), string companyNipEu = default(string), string eupName = default(string), string eupIdentificationNumber = default(string), string eupAdress = default(string), double? sludgeMassMgSum = default(double?), double? sludgeMassMgSmSum = default(double?), double? appliedSludgeMassSum = default(double?), double? appliedSludgeDryMatterMassSum = default(double?), List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosPrintingPageListItem> listItems = default(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosPrintingPageListItem>))
        {
            this.CardNumber = cardNumber;
            this.CalendarYear = calendarYear;
            this.WasteCodeWithDescription = wasteCodeWithDescription;
            this.CompanyName = companyName;
            this.CompanyAdress = companyAdress;
            this.CompanyIdentificationNumber = companyIdentificationNumber;
            this.CompanyNip = companyNip;
            this.CompanyNipEu = companyNipEu;
            this.EupName = eupName;
            this.EupIdentificationNumber = eupIdentificationNumber;
            this.EupAdress = eupAdress;
            this.SludgeMassMgSum = sludgeMassMgSum;
            this.SludgeMassMgSmSum = sludgeMassMgSmSum;
            this.AppliedSludgeMassSum = appliedSludgeMassSum;
            this.AppliedSludgeDryMatterMassSum = appliedSludgeDryMatterMassSum;
            this.ListItems = listItems;
        }
        
        /// <summary>
        /// Numer karty
        /// </summary>
        /// <value>Numer karty</value>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Rok kalendarzowy
        /// </summary>
        /// <value>Rok kalendarzowy</value>
        [DataMember(Name="calendarYear", EmitDefaultValue=false)]
        public string CalendarYear { get; set; }

        /// <summary>
        /// Gets or Sets WasteCodeWithDescription
        /// </summary>
        [DataMember(Name="wasteCodeWithDescription", EmitDefaultValue=false)]
        public string WasteCodeWithDescription { get; set; }

        /// <summary>
        /// Nazwa lub imię i nazwisko
        /// </summary>
        /// <value>Nazwa lub imię i nazwisko</value>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Adres
        /// </summary>
        /// <value>Adres</value>
        [DataMember(Name="companyAdress", EmitDefaultValue=false)]
        public string CompanyAdress { get; set; }

        /// <summary>
        /// Numer rejestrowy
        /// </summary>
        /// <value>Numer rejestrowy</value>
        [DataMember(Name="companyIdentificationNumber", EmitDefaultValue=false)]
        public string CompanyIdentificationNumber { get; set; }

        /// <summary>
        /// NIP
        /// </summary>
        /// <value>NIP</value>
        [DataMember(Name="companyNip", EmitDefaultValue=false)]
        public string CompanyNip { get; set; }

        /// <summary>
        /// NIP europejski
        /// </summary>
        /// <value>NIP europejski</value>
        [DataMember(Name="companyNipEu", EmitDefaultValue=false)]
        public string CompanyNipEu { get; set; }

        /// <summary>
        /// Nazwa miejsca prowadzenia działalności
        /// </summary>
        /// <value>Nazwa miejsca prowadzenia działalności</value>
        [DataMember(Name="eupName", EmitDefaultValue=false)]
        public string EupName { get; set; }

        /// <summary>
        /// Numer miejsca prowadzenia działalności
        /// </summary>
        /// <value>Numer miejsca prowadzenia działalności</value>
        [DataMember(Name="eupIdentificationNumber", EmitDefaultValue=false)]
        public string EupIdentificationNumber { get; set; }

        /// <summary>
        /// Adres miejsca prowadzenia działalności
        /// </summary>
        /// <value>Adres miejsca prowadzenia działalności</value>
        [DataMember(Name="eupAdress", EmitDefaultValue=false)]
        public string EupAdress { get; set; }

        /// <summary>
        /// Gets or Sets SludgeMassMgSum
        /// </summary>
        [DataMember(Name="sludgeMassMgSum", EmitDefaultValue=false)]
        public double? SludgeMassMgSum { get; set; }

        /// <summary>
        /// Gets or Sets SludgeMassMgSmSum
        /// </summary>
        [DataMember(Name="sludgeMassMgSmSum", EmitDefaultValue=false)]
        public double? SludgeMassMgSmSum { get; set; }

        /// <summary>
        /// Gets or Sets AppliedSludgeMassSum
        /// </summary>
        [DataMember(Name="appliedSludgeMassSum", EmitDefaultValue=false)]
        public double? AppliedSludgeMassSum { get; set; }

        /// <summary>
        /// Gets or Sets AppliedSludgeDryMatterMassSum
        /// </summary>
        [DataMember(Name="appliedSludgeDryMatterMassSum", EmitDefaultValue=false)]
        public double? AppliedSludgeDryMatterMassSum { get; set; }

        /// <summary>
        /// Gets or Sets ListItems
        /// </summary>
        [DataMember(Name="listItems", EmitDefaultValue=false)]
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosPrintingPageListItem> ListItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse {\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CalendarYear: ").Append(CalendarYear).Append("\n");
            sb.Append("  WasteCodeWithDescription: ").Append(WasteCodeWithDescription).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyAdress: ").Append(CompanyAdress).Append("\n");
            sb.Append("  CompanyIdentificationNumber: ").Append(CompanyIdentificationNumber).Append("\n");
            sb.Append("  CompanyNip: ").Append(CompanyNip).Append("\n");
            sb.Append("  CompanyNipEu: ").Append(CompanyNipEu).Append("\n");
            sb.Append("  EupName: ").Append(EupName).Append("\n");
            sb.Append("  EupIdentificationNumber: ").Append(EupIdentificationNumber).Append("\n");
            sb.Append("  EupAdress: ").Append(EupAdress).Append("\n");
            sb.Append("  SludgeMassMgSum: ").Append(SludgeMassMgSum).Append("\n");
            sb.Append("  SludgeMassMgSmSum: ").Append(SludgeMassMgSmSum).Append("\n");
            sb.Append("  AppliedSludgeMassSum: ").Append(AppliedSludgeMassSum).Append("\n");
            sb.Append("  AppliedSludgeDryMatterMassSum: ").Append(AppliedSludgeDryMatterMassSum).Append("\n");
            sb.Append("  ListItems: ").Append(ListItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.CalendarYear == input.CalendarYear ||
                    (this.CalendarYear != null &&
                    this.CalendarYear.Equals(input.CalendarYear))
                ) && 
                (
                    this.WasteCodeWithDescription == input.WasteCodeWithDescription ||
                    (this.WasteCodeWithDescription != null &&
                    this.WasteCodeWithDescription.Equals(input.WasteCodeWithDescription))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.CompanyAdress == input.CompanyAdress ||
                    (this.CompanyAdress != null &&
                    this.CompanyAdress.Equals(input.CompanyAdress))
                ) && 
                (
                    this.CompanyIdentificationNumber == input.CompanyIdentificationNumber ||
                    (this.CompanyIdentificationNumber != null &&
                    this.CompanyIdentificationNumber.Equals(input.CompanyIdentificationNumber))
                ) && 
                (
                    this.CompanyNip == input.CompanyNip ||
                    (this.CompanyNip != null &&
                    this.CompanyNip.Equals(input.CompanyNip))
                ) && 
                (
                    this.CompanyNipEu == input.CompanyNipEu ||
                    (this.CompanyNipEu != null &&
                    this.CompanyNipEu.Equals(input.CompanyNipEu))
                ) && 
                (
                    this.EupName == input.EupName ||
                    (this.EupName != null &&
                    this.EupName.Equals(input.EupName))
                ) && 
                (
                    this.EupIdentificationNumber == input.EupIdentificationNumber ||
                    (this.EupIdentificationNumber != null &&
                    this.EupIdentificationNumber.Equals(input.EupIdentificationNumber))
                ) && 
                (
                    this.EupAdress == input.EupAdress ||
                    (this.EupAdress != null &&
                    this.EupAdress.Equals(input.EupAdress))
                ) && 
                (
                    this.SludgeMassMgSum == input.SludgeMassMgSum ||
                    (this.SludgeMassMgSum != null &&
                    this.SludgeMassMgSum.Equals(input.SludgeMassMgSum))
                ) && 
                (
                    this.SludgeMassMgSmSum == input.SludgeMassMgSmSum ||
                    (this.SludgeMassMgSmSum != null &&
                    this.SludgeMassMgSmSum.Equals(input.SludgeMassMgSmSum))
                ) && 
                (
                    this.AppliedSludgeMassSum == input.AppliedSludgeMassSum ||
                    (this.AppliedSludgeMassSum != null &&
                    this.AppliedSludgeMassSum.Equals(input.AppliedSludgeMassSum))
                ) && 
                (
                    this.AppliedSludgeDryMatterMassSum == input.AppliedSludgeDryMatterMassSum ||
                    (this.AppliedSludgeDryMatterMassSum != null &&
                    this.AppliedSludgeDryMatterMassSum.Equals(input.AppliedSludgeDryMatterMassSum))
                ) && 
                (
                    this.ListItems == input.ListItems ||
                    this.ListItems != null &&
                    this.ListItems.SequenceEqual(input.ListItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                if (this.CalendarYear != null)
                    hashCode = hashCode * 59 + this.CalendarYear.GetHashCode();
                if (this.WasteCodeWithDescription != null)
                    hashCode = hashCode * 59 + this.WasteCodeWithDescription.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyAdress != null)
                    hashCode = hashCode * 59 + this.CompanyAdress.GetHashCode();
                if (this.CompanyIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.CompanyIdentificationNumber.GetHashCode();
                if (this.CompanyNip != null)
                    hashCode = hashCode * 59 + this.CompanyNip.GetHashCode();
                if (this.CompanyNipEu != null)
                    hashCode = hashCode * 59 + this.CompanyNipEu.GetHashCode();
                if (this.EupName != null)
                    hashCode = hashCode * 59 + this.EupName.GetHashCode();
                if (this.EupIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.EupIdentificationNumber.GetHashCode();
                if (this.EupAdress != null)
                    hashCode = hashCode * 59 + this.EupAdress.GetHashCode();
                if (this.SludgeMassMgSum != null)
                    hashCode = hashCode * 59 + this.SludgeMassMgSum.GetHashCode();
                if (this.SludgeMassMgSmSum != null)
                    hashCode = hashCode * 59 + this.SludgeMassMgSmSum.GetHashCode();
                if (this.AppliedSludgeMassSum != null)
                    hashCode = hashCode * 59 + this.AppliedSludgeMassSum.GetHashCode();
                if (this.AppliedSludgeDryMatterMassSum != null)
                    hashCode = hashCode * 59 + this.AppliedSludgeDryMatterMassSum.GetHashCode();
                if (this.ListItems != null)
                    hashCode = hashCode * 59 + this.ListItems.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
