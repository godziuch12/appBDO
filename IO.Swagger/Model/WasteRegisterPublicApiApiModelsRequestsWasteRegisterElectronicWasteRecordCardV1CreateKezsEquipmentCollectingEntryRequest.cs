/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest :  IEquatable<WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest" /> class.
        /// </summary>
        /// <param name="kezsEquipmentGroupCardId">Id grupy zebranego sprzętu.</param>
        /// <param name="kpoId">Id karty przekazania odpadów.</param>
        /// <param name="kpokId">Id Karty Przekazania Odpadów Komunalnych.</param>
        /// <param name="receivedFromUser">Imię i nazwisko użytkownika przekazującego.</param>
        /// <param name="isEquipmentOwnerExemptFromRecord">Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów.</param>
        /// <param name="isImportToRp">Przywóz do RP.</param>
        /// <param name="isEntryBasedOnKpo">Wpis dokonywany na podstawie karty przekazania odpadów.</param>
        /// <param name="isEntryBasedOnKpok">Wpis dokonywany na podstawie karty przekazania odpadów komunalnych.</param>
        /// <param name="receivedDate">Data przyjęcia.</param>
        /// <param name="receivedEquipmentMass">Masa przyjętego sprzętu.</param>
        /// <param name="countryId">Id kraju.</param>
        /// <param name="locality">Miejscowość.</param>
        /// <param name="street">Ulica.</param>
        /// <param name="postalCode">Kod pocztowy.</param>
        /// <param name="buildingNumber">Numer budynku.</param>
        /// <param name="localNumber">Numer lokalu.</param>
        /// <param name="additionalInformation">Informacje dodatkowe.</param>
        public WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest(Guid? kezsEquipmentGroupCardId = default(Guid?), Guid? kpoId = default(Guid?), Guid? kpokId = default(Guid?), bool? receivedFromUser = default(bool?), bool? isEquipmentOwnerExemptFromRecord = default(bool?), bool? isImportToRp = default(bool?), bool? isEntryBasedOnKpo = default(bool?), bool? isEntryBasedOnKpok = default(bool?), DateTime? receivedDate = default(DateTime?), double? receivedEquipmentMass = default(double?), int? countryId = default(int?), string locality = default(string), string street = default(string), string postalCode = default(string), string buildingNumber = default(string), string localNumber = default(string), string additionalInformation = default(string))
        {
            this.KezsEquipmentGroupCardId = kezsEquipmentGroupCardId;
            this.KpoId = kpoId;
            this.KpokId = kpokId;
            this.ReceivedFromUser = receivedFromUser;
            this.IsEquipmentOwnerExemptFromRecord = isEquipmentOwnerExemptFromRecord;
            this.IsImportToRp = isImportToRp;
            this.IsEntryBasedOnKpo = isEntryBasedOnKpo;
            this.IsEntryBasedOnKpok = isEntryBasedOnKpok;
            this.ReceivedDate = receivedDate;
            this.ReceivedEquipmentMass = receivedEquipmentMass;
            this.CountryId = countryId;
            this.Locality = locality;
            this.Street = street;
            this.PostalCode = postalCode;
            this.BuildingNumber = buildingNumber;
            this.LocalNumber = localNumber;
            this.AdditionalInformation = additionalInformation;
        }
        
        /// <summary>
        /// Id grupy zebranego sprzętu
        /// </summary>
        /// <value>Id grupy zebranego sprzętu</value>
        [DataMember(Name="kezsEquipmentGroupCardId", EmitDefaultValue=false)]
        public Guid? KezsEquipmentGroupCardId { get; set; }

        /// <summary>
        /// Id karty przekazania odpadów
        /// </summary>
        /// <value>Id karty przekazania odpadów</value>
        [DataMember(Name="kpoId", EmitDefaultValue=false)]
        public Guid? KpoId { get; set; }

        /// <summary>
        /// Id Karty Przekazania Odpadów Komunalnych
        /// </summary>
        /// <value>Id Karty Przekazania Odpadów Komunalnych</value>
        [DataMember(Name="kpokId", EmitDefaultValue=false)]
        public Guid? KpokId { get; set; }

        /// <summary>
        /// Imię i nazwisko użytkownika przekazującego
        /// </summary>
        /// <value>Imię i nazwisko użytkownika przekazującego</value>
        [DataMember(Name="receivedFromUser", EmitDefaultValue=false)]
        public bool? ReceivedFromUser { get; set; }

        /// <summary>
        /// Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów
        /// </summary>
        /// <value>Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów</value>
        [DataMember(Name="isEquipmentOwnerExemptFromRecord", EmitDefaultValue=false)]
        public bool? IsEquipmentOwnerExemptFromRecord { get; set; }

        /// <summary>
        /// Przywóz do RP
        /// </summary>
        /// <value>Przywóz do RP</value>
        [DataMember(Name="isImportToRp", EmitDefaultValue=false)]
        public bool? IsImportToRp { get; set; }

        /// <summary>
        /// Wpis dokonywany na podstawie karty przekazania odpadów
        /// </summary>
        /// <value>Wpis dokonywany na podstawie karty przekazania odpadów</value>
        [DataMember(Name="isEntryBasedOnKpo", EmitDefaultValue=false)]
        public bool? IsEntryBasedOnKpo { get; set; }

        /// <summary>
        /// Wpis dokonywany na podstawie karty przekazania odpadów komunalnych
        /// </summary>
        /// <value>Wpis dokonywany na podstawie karty przekazania odpadów komunalnych</value>
        [DataMember(Name="isEntryBasedOnKpok", EmitDefaultValue=false)]
        public bool? IsEntryBasedOnKpok { get; set; }

        /// <summary>
        /// Data przyjęcia
        /// </summary>
        /// <value>Data przyjęcia</value>
        [DataMember(Name="receivedDate", EmitDefaultValue=false)]
        public DateTime? ReceivedDate { get; set; }

        /// <summary>
        /// Masa przyjętego sprzętu
        /// </summary>
        /// <value>Masa przyjętego sprzętu</value>
        [DataMember(Name="receivedEquipmentMass", EmitDefaultValue=false)]
        public double? ReceivedEquipmentMass { get; set; }

        /// <summary>
        /// Id kraju
        /// </summary>
        /// <value>Id kraju</value>
        [DataMember(Name="countryId", EmitDefaultValue=false)]
        public int? CountryId { get; set; }

        /// <summary>
        /// Miejscowość
        /// </summary>
        /// <value>Miejscowość</value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// Ulica
        /// </summary>
        /// <value>Ulica</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Kod pocztowy
        /// </summary>
        /// <value>Kod pocztowy</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Numer budynku
        /// </summary>
        /// <value>Numer budynku</value>
        [DataMember(Name="buildingNumber", EmitDefaultValue=false)]
        public string BuildingNumber { get; set; }

        /// <summary>
        /// Numer lokalu
        /// </summary>
        /// <value>Numer lokalu</value>
        [DataMember(Name="localNumber", EmitDefaultValue=false)]
        public string LocalNumber { get; set; }

        /// <summary>
        /// Informacje dodatkowe
        /// </summary>
        /// <value>Informacje dodatkowe</value>
        [DataMember(Name="additionalInformation", EmitDefaultValue=false)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest {\n");
            sb.Append("  KezsEquipmentGroupCardId: ").Append(KezsEquipmentGroupCardId).Append("\n");
            sb.Append("  KpoId: ").Append(KpoId).Append("\n");
            sb.Append("  KpokId: ").Append(KpokId).Append("\n");
            sb.Append("  ReceivedFromUser: ").Append(ReceivedFromUser).Append("\n");
            sb.Append("  IsEquipmentOwnerExemptFromRecord: ").Append(IsEquipmentOwnerExemptFromRecord).Append("\n");
            sb.Append("  IsImportToRp: ").Append(IsImportToRp).Append("\n");
            sb.Append("  IsEntryBasedOnKpo: ").Append(IsEntryBasedOnKpo).Append("\n");
            sb.Append("  IsEntryBasedOnKpok: ").Append(IsEntryBasedOnKpok).Append("\n");
            sb.Append("  ReceivedDate: ").Append(ReceivedDate).Append("\n");
            sb.Append("  ReceivedEquipmentMass: ").Append(ReceivedEquipmentMass).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
            sb.Append("  LocalNumber: ").Append(LocalNumber).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KezsEquipmentGroupCardId == input.KezsEquipmentGroupCardId ||
                    (this.KezsEquipmentGroupCardId != null &&
                    this.KezsEquipmentGroupCardId.Equals(input.KezsEquipmentGroupCardId))
                ) && 
                (
                    this.KpoId == input.KpoId ||
                    (this.KpoId != null &&
                    this.KpoId.Equals(input.KpoId))
                ) && 
                (
                    this.KpokId == input.KpokId ||
                    (this.KpokId != null &&
                    this.KpokId.Equals(input.KpokId))
                ) && 
                (
                    this.ReceivedFromUser == input.ReceivedFromUser ||
                    (this.ReceivedFromUser != null &&
                    this.ReceivedFromUser.Equals(input.ReceivedFromUser))
                ) && 
                (
                    this.IsEquipmentOwnerExemptFromRecord == input.IsEquipmentOwnerExemptFromRecord ||
                    (this.IsEquipmentOwnerExemptFromRecord != null &&
                    this.IsEquipmentOwnerExemptFromRecord.Equals(input.IsEquipmentOwnerExemptFromRecord))
                ) && 
                (
                    this.IsImportToRp == input.IsImportToRp ||
                    (this.IsImportToRp != null &&
                    this.IsImportToRp.Equals(input.IsImportToRp))
                ) && 
                (
                    this.IsEntryBasedOnKpo == input.IsEntryBasedOnKpo ||
                    (this.IsEntryBasedOnKpo != null &&
                    this.IsEntryBasedOnKpo.Equals(input.IsEntryBasedOnKpo))
                ) && 
                (
                    this.IsEntryBasedOnKpok == input.IsEntryBasedOnKpok ||
                    (this.IsEntryBasedOnKpok != null &&
                    this.IsEntryBasedOnKpok.Equals(input.IsEntryBasedOnKpok))
                ) && 
                (
                    this.ReceivedDate == input.ReceivedDate ||
                    (this.ReceivedDate != null &&
                    this.ReceivedDate.Equals(input.ReceivedDate))
                ) && 
                (
                    this.ReceivedEquipmentMass == input.ReceivedEquipmentMass ||
                    (this.ReceivedEquipmentMass != null &&
                    this.ReceivedEquipmentMass.Equals(input.ReceivedEquipmentMass))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.BuildingNumber == input.BuildingNumber ||
                    (this.BuildingNumber != null &&
                    this.BuildingNumber.Equals(input.BuildingNumber))
                ) && 
                (
                    this.LocalNumber == input.LocalNumber ||
                    (this.LocalNumber != null &&
                    this.LocalNumber.Equals(input.LocalNumber))
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KezsEquipmentGroupCardId != null)
                    hashCode = hashCode * 59 + this.KezsEquipmentGroupCardId.GetHashCode();
                if (this.KpoId != null)
                    hashCode = hashCode * 59 + this.KpoId.GetHashCode();
                if (this.KpokId != null)
                    hashCode = hashCode * 59 + this.KpokId.GetHashCode();
                if (this.ReceivedFromUser != null)
                    hashCode = hashCode * 59 + this.ReceivedFromUser.GetHashCode();
                if (this.IsEquipmentOwnerExemptFromRecord != null)
                    hashCode = hashCode * 59 + this.IsEquipmentOwnerExemptFromRecord.GetHashCode();
                if (this.IsImportToRp != null)
                    hashCode = hashCode * 59 + this.IsImportToRp.GetHashCode();
                if (this.IsEntryBasedOnKpo != null)
                    hashCode = hashCode * 59 + this.IsEntryBasedOnKpo.GetHashCode();
                if (this.IsEntryBasedOnKpok != null)
                    hashCode = hashCode * 59 + this.IsEntryBasedOnKpok.GetHashCode();
                if (this.ReceivedDate != null)
                    hashCode = hashCode * 59 + this.ReceivedDate.GetHashCode();
                if (this.ReceivedEquipmentMass != null)
                    hashCode = hashCode * 59 + this.ReceivedEquipmentMass.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.BuildingNumber != null)
                    hashCode = hashCode * 59 + this.BuildingNumber.GetHashCode();
                if (this.LocalNumber != null)
                    hashCode = hashCode * 59 + this.LocalNumber.GetHashCode();
                if (this.AdditionalInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalInformation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
