/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1BatchGeneratedSedimentDto
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1BatchGeneratedSedimentDto :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1BatchGeneratedSedimentDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1BatchGeneratedSedimentDto" /> class.
        /// </summary>
        /// <param name="batchOfGeneratedSedimentId">Id wpisu wytworzone osady.</param>
        /// <param name="batchNumber">batchNumber.</param>
        /// <param name="dateOfSewageSludgeCreation">Data wytworzenia komunalnych osadów ściekowych.</param>
        /// <param name="sludgeMassMg">Masa wytworzonych komunalnych osadów ściekowych [Mg].</param>
        /// <param name="sludgeMassMgSm">Sucha masa wytworzonych komunalnych osadów ściekowych [Mg s.m.].</param>
        /// <param name="isFermentation">Rodzaj obróbki: fermentacja.</param>
        /// <param name="isDrying">Rodzaj obróbki: suszenie.</param>
        /// <param name="isDehydration">Rodzaj obróbki: odwodnienie.</param>
        /// <param name="isComposting">Rodzaj obróbki: kompostowanie.</param>
        /// <param name="isHygienisation">Rodzaj obróbki: higienizacja.</param>
        /// <param name="isDifferentProcess">Rodzaj obróbki: inny.</param>
        /// <param name="differentProcess">Inny proces.</param>
        /// <param name="createdByUserFirstNameAndLastName">Imię i nazwisko użytkownika tworzącego kartę.</param>
        /// <param name="appliedSludgeMass">Masa zastosowanych komunalnych osadów ściekowych.</param>
        /// <param name="appliedSludgeDryMatterMass">Sucha masa zastosowanych komunalnych osadów ściekowych.</param>
        /// <param name="batchFromStockLevel">Rodzaj partii: 0 - wytworzona w roku bieżącym, 1 - znajduje się na stanie magazynowym.</param>
        /// <param name="lastKekosResearchCard">lastKekosResearchCard.</param>
        /// <param name="researchNumber">Numer badania.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1BatchGeneratedSedimentDto(Guid? batchOfGeneratedSedimentId = default(Guid?), string batchNumber = default(string), DateTime? dateOfSewageSludgeCreation = default(DateTime?), double? sludgeMassMg = default(double?), double? sludgeMassMgSm = default(double?), bool? isFermentation = default(bool?), bool? isDrying = default(bool?), bool? isDehydration = default(bool?), bool? isComposting = default(bool?), bool? isHygienisation = default(bool?), bool? isDifferentProcess = default(bool?), string differentProcess = default(string), string createdByUserFirstNameAndLastName = default(string), double? appliedSludgeMass = default(double?), double? appliedSludgeDryMatterMass = default(double?), bool? batchFromStockLevel = default(bool?), Guid? lastKekosResearchCard = default(Guid?), string researchNumber = default(string))
        {
            this.BatchOfGeneratedSedimentId = batchOfGeneratedSedimentId;
            this.BatchNumber = batchNumber;
            this.DateOfSewageSludgeCreation = dateOfSewageSludgeCreation;
            this.SludgeMassMg = sludgeMassMg;
            this.SludgeMassMgSm = sludgeMassMgSm;
            this.IsFermentation = isFermentation;
            this.IsDrying = isDrying;
            this.IsDehydration = isDehydration;
            this.IsComposting = isComposting;
            this.IsHygienisation = isHygienisation;
            this.IsDifferentProcess = isDifferentProcess;
            this.DifferentProcess = differentProcess;
            this.CreatedByUserFirstNameAndLastName = createdByUserFirstNameAndLastName;
            this.AppliedSludgeMass = appliedSludgeMass;
            this.AppliedSludgeDryMatterMass = appliedSludgeDryMatterMass;
            this.BatchFromStockLevel = batchFromStockLevel;
            this.LastKekosResearchCard = lastKekosResearchCard;
            this.ResearchNumber = researchNumber;
        }
        
        /// <summary>
        /// Id wpisu wytworzone osady
        /// </summary>
        /// <value>Id wpisu wytworzone osady</value>
        [DataMember(Name="batchOfGeneratedSedimentId", EmitDefaultValue=false)]
        public Guid? BatchOfGeneratedSedimentId { get; set; }

        /// <summary>
        /// Gets or Sets BatchNumber
        /// </summary>
        [DataMember(Name="batchNumber", EmitDefaultValue=false)]
        public string BatchNumber { get; set; }

        /// <summary>
        /// Data wytworzenia komunalnych osadów ściekowych
        /// </summary>
        /// <value>Data wytworzenia komunalnych osadów ściekowych</value>
        [DataMember(Name="dateOfSewageSludgeCreation", EmitDefaultValue=false)]
        public DateTime? DateOfSewageSludgeCreation { get; set; }

        /// <summary>
        /// Masa wytworzonych komunalnych osadów ściekowych [Mg]
        /// </summary>
        /// <value>Masa wytworzonych komunalnych osadów ściekowych [Mg]</value>
        [DataMember(Name="sludgeMassMg", EmitDefaultValue=false)]
        public double? SludgeMassMg { get; set; }

        /// <summary>
        /// Sucha masa wytworzonych komunalnych osadów ściekowych [Mg s.m.]
        /// </summary>
        /// <value>Sucha masa wytworzonych komunalnych osadów ściekowych [Mg s.m.]</value>
        [DataMember(Name="sludgeMassMgSm", EmitDefaultValue=false)]
        public double? SludgeMassMgSm { get; set; }

        /// <summary>
        /// Rodzaj obróbki: fermentacja
        /// </summary>
        /// <value>Rodzaj obróbki: fermentacja</value>
        [DataMember(Name="isFermentation", EmitDefaultValue=false)]
        public bool? IsFermentation { get; set; }

        /// <summary>
        /// Rodzaj obróbki: suszenie
        /// </summary>
        /// <value>Rodzaj obróbki: suszenie</value>
        [DataMember(Name="isDrying", EmitDefaultValue=false)]
        public bool? IsDrying { get; set; }

        /// <summary>
        /// Rodzaj obróbki: odwodnienie
        /// </summary>
        /// <value>Rodzaj obróbki: odwodnienie</value>
        [DataMember(Name="isDehydration", EmitDefaultValue=false)]
        public bool? IsDehydration { get; set; }

        /// <summary>
        /// Rodzaj obróbki: kompostowanie
        /// </summary>
        /// <value>Rodzaj obróbki: kompostowanie</value>
        [DataMember(Name="isComposting", EmitDefaultValue=false)]
        public bool? IsComposting { get; set; }

        /// <summary>
        /// Rodzaj obróbki: higienizacja
        /// </summary>
        /// <value>Rodzaj obróbki: higienizacja</value>
        [DataMember(Name="isHygienisation", EmitDefaultValue=false)]
        public bool? IsHygienisation { get; set; }

        /// <summary>
        /// Rodzaj obróbki: inny
        /// </summary>
        /// <value>Rodzaj obróbki: inny</value>
        [DataMember(Name="isDifferentProcess", EmitDefaultValue=false)]
        public bool? IsDifferentProcess { get; set; }

        /// <summary>
        /// Inny proces
        /// </summary>
        /// <value>Inny proces</value>
        [DataMember(Name="differentProcess", EmitDefaultValue=false)]
        public string DifferentProcess { get; set; }

        /// <summary>
        /// Imię i nazwisko użytkownika tworzącego kartę
        /// </summary>
        /// <value>Imię i nazwisko użytkownika tworzącego kartę</value>
        [DataMember(Name="createdByUserFirstNameAndLastName", EmitDefaultValue=false)]
        public string CreatedByUserFirstNameAndLastName { get; set; }

        /// <summary>
        /// Masa zastosowanych komunalnych osadów ściekowych
        /// </summary>
        /// <value>Masa zastosowanych komunalnych osadów ściekowych</value>
        [DataMember(Name="appliedSludgeMass", EmitDefaultValue=false)]
        public double? AppliedSludgeMass { get; set; }

        /// <summary>
        /// Sucha masa zastosowanych komunalnych osadów ściekowych
        /// </summary>
        /// <value>Sucha masa zastosowanych komunalnych osadów ściekowych</value>
        [DataMember(Name="appliedSludgeDryMatterMass", EmitDefaultValue=false)]
        public double? AppliedSludgeDryMatterMass { get; set; }

        /// <summary>
        /// Rodzaj partii: 0 - wytworzona w roku bieżącym, 1 - znajduje się na stanie magazynowym
        /// </summary>
        /// <value>Rodzaj partii: 0 - wytworzona w roku bieżącym, 1 - znajduje się na stanie magazynowym</value>
        [DataMember(Name="batchFromStockLevel", EmitDefaultValue=false)]
        public bool? BatchFromStockLevel { get; set; }

        /// <summary>
        /// Gets or Sets LastKekosResearchCard
        /// </summary>
        [DataMember(Name="lastKekosResearchCard", EmitDefaultValue=false)]
        public Guid? LastKekosResearchCard { get; set; }

        /// <summary>
        /// Numer badania
        /// </summary>
        /// <value>Numer badania</value>
        [DataMember(Name="researchNumber", EmitDefaultValue=false)]
        public string ResearchNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1BatchGeneratedSedimentDto {\n");
            sb.Append("  BatchOfGeneratedSedimentId: ").Append(BatchOfGeneratedSedimentId).Append("\n");
            sb.Append("  BatchNumber: ").Append(BatchNumber).Append("\n");
            sb.Append("  DateOfSewageSludgeCreation: ").Append(DateOfSewageSludgeCreation).Append("\n");
            sb.Append("  SludgeMassMg: ").Append(SludgeMassMg).Append("\n");
            sb.Append("  SludgeMassMgSm: ").Append(SludgeMassMgSm).Append("\n");
            sb.Append("  IsFermentation: ").Append(IsFermentation).Append("\n");
            sb.Append("  IsDrying: ").Append(IsDrying).Append("\n");
            sb.Append("  IsDehydration: ").Append(IsDehydration).Append("\n");
            sb.Append("  IsComposting: ").Append(IsComposting).Append("\n");
            sb.Append("  IsHygienisation: ").Append(IsHygienisation).Append("\n");
            sb.Append("  IsDifferentProcess: ").Append(IsDifferentProcess).Append("\n");
            sb.Append("  DifferentProcess: ").Append(DifferentProcess).Append("\n");
            sb.Append("  CreatedByUserFirstNameAndLastName: ").Append(CreatedByUserFirstNameAndLastName).Append("\n");
            sb.Append("  AppliedSludgeMass: ").Append(AppliedSludgeMass).Append("\n");
            sb.Append("  AppliedSludgeDryMatterMass: ").Append(AppliedSludgeDryMatterMass).Append("\n");
            sb.Append("  BatchFromStockLevel: ").Append(BatchFromStockLevel).Append("\n");
            sb.Append("  LastKekosResearchCard: ").Append(LastKekosResearchCard).Append("\n");
            sb.Append("  ResearchNumber: ").Append(ResearchNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1BatchGeneratedSedimentDto);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1BatchGeneratedSedimentDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1BatchGeneratedSedimentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1BatchGeneratedSedimentDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BatchOfGeneratedSedimentId == input.BatchOfGeneratedSedimentId ||
                    (this.BatchOfGeneratedSedimentId != null &&
                    this.BatchOfGeneratedSedimentId.Equals(input.BatchOfGeneratedSedimentId))
                ) && 
                (
                    this.BatchNumber == input.BatchNumber ||
                    (this.BatchNumber != null &&
                    this.BatchNumber.Equals(input.BatchNumber))
                ) && 
                (
                    this.DateOfSewageSludgeCreation == input.DateOfSewageSludgeCreation ||
                    (this.DateOfSewageSludgeCreation != null &&
                    this.DateOfSewageSludgeCreation.Equals(input.DateOfSewageSludgeCreation))
                ) && 
                (
                    this.SludgeMassMg == input.SludgeMassMg ||
                    (this.SludgeMassMg != null &&
                    this.SludgeMassMg.Equals(input.SludgeMassMg))
                ) && 
                (
                    this.SludgeMassMgSm == input.SludgeMassMgSm ||
                    (this.SludgeMassMgSm != null &&
                    this.SludgeMassMgSm.Equals(input.SludgeMassMgSm))
                ) && 
                (
                    this.IsFermentation == input.IsFermentation ||
                    (this.IsFermentation != null &&
                    this.IsFermentation.Equals(input.IsFermentation))
                ) && 
                (
                    this.IsDrying == input.IsDrying ||
                    (this.IsDrying != null &&
                    this.IsDrying.Equals(input.IsDrying))
                ) && 
                (
                    this.IsDehydration == input.IsDehydration ||
                    (this.IsDehydration != null &&
                    this.IsDehydration.Equals(input.IsDehydration))
                ) && 
                (
                    this.IsComposting == input.IsComposting ||
                    (this.IsComposting != null &&
                    this.IsComposting.Equals(input.IsComposting))
                ) && 
                (
                    this.IsHygienisation == input.IsHygienisation ||
                    (this.IsHygienisation != null &&
                    this.IsHygienisation.Equals(input.IsHygienisation))
                ) && 
                (
                    this.IsDifferentProcess == input.IsDifferentProcess ||
                    (this.IsDifferentProcess != null &&
                    this.IsDifferentProcess.Equals(input.IsDifferentProcess))
                ) && 
                (
                    this.DifferentProcess == input.DifferentProcess ||
                    (this.DifferentProcess != null &&
                    this.DifferentProcess.Equals(input.DifferentProcess))
                ) && 
                (
                    this.CreatedByUserFirstNameAndLastName == input.CreatedByUserFirstNameAndLastName ||
                    (this.CreatedByUserFirstNameAndLastName != null &&
                    this.CreatedByUserFirstNameAndLastName.Equals(input.CreatedByUserFirstNameAndLastName))
                ) && 
                (
                    this.AppliedSludgeMass == input.AppliedSludgeMass ||
                    (this.AppliedSludgeMass != null &&
                    this.AppliedSludgeMass.Equals(input.AppliedSludgeMass))
                ) && 
                (
                    this.AppliedSludgeDryMatterMass == input.AppliedSludgeDryMatterMass ||
                    (this.AppliedSludgeDryMatterMass != null &&
                    this.AppliedSludgeDryMatterMass.Equals(input.AppliedSludgeDryMatterMass))
                ) && 
                (
                    this.BatchFromStockLevel == input.BatchFromStockLevel ||
                    (this.BatchFromStockLevel != null &&
                    this.BatchFromStockLevel.Equals(input.BatchFromStockLevel))
                ) && 
                (
                    this.LastKekosResearchCard == input.LastKekosResearchCard ||
                    (this.LastKekosResearchCard != null &&
                    this.LastKekosResearchCard.Equals(input.LastKekosResearchCard))
                ) && 
                (
                    this.ResearchNumber == input.ResearchNumber ||
                    (this.ResearchNumber != null &&
                    this.ResearchNumber.Equals(input.ResearchNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatchOfGeneratedSedimentId != null)
                    hashCode = hashCode * 59 + this.BatchOfGeneratedSedimentId.GetHashCode();
                if (this.BatchNumber != null)
                    hashCode = hashCode * 59 + this.BatchNumber.GetHashCode();
                if (this.DateOfSewageSludgeCreation != null)
                    hashCode = hashCode * 59 + this.DateOfSewageSludgeCreation.GetHashCode();
                if (this.SludgeMassMg != null)
                    hashCode = hashCode * 59 + this.SludgeMassMg.GetHashCode();
                if (this.SludgeMassMgSm != null)
                    hashCode = hashCode * 59 + this.SludgeMassMgSm.GetHashCode();
                if (this.IsFermentation != null)
                    hashCode = hashCode * 59 + this.IsFermentation.GetHashCode();
                if (this.IsDrying != null)
                    hashCode = hashCode * 59 + this.IsDrying.GetHashCode();
                if (this.IsDehydration != null)
                    hashCode = hashCode * 59 + this.IsDehydration.GetHashCode();
                if (this.IsComposting != null)
                    hashCode = hashCode * 59 + this.IsComposting.GetHashCode();
                if (this.IsHygienisation != null)
                    hashCode = hashCode * 59 + this.IsHygienisation.GetHashCode();
                if (this.IsDifferentProcess != null)
                    hashCode = hashCode * 59 + this.IsDifferentProcess.GetHashCode();
                if (this.DifferentProcess != null)
                    hashCode = hashCode * 59 + this.DifferentProcess.GetHashCode();
                if (this.CreatedByUserFirstNameAndLastName != null)
                    hashCode = hashCode * 59 + this.CreatedByUserFirstNameAndLastName.GetHashCode();
                if (this.AppliedSludgeMass != null)
                    hashCode = hashCode * 59 + this.AppliedSludgeMass.GetHashCode();
                if (this.AppliedSludgeDryMatterMass != null)
                    hashCode = hashCode * 59 + this.AppliedSludgeDryMatterMass.GetHashCode();
                if (this.BatchFromStockLevel != null)
                    hashCode = hashCode * 59 + this.BatchFromStockLevel.GetHashCode();
                if (this.LastKekosResearchCard != null)
                    hashCode = hashCode * 59 + this.LastKekosResearchCard.GetHashCode();
                if (this.ResearchNumber != null)
                    hashCode = hashCode * 59 + this.ResearchNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
