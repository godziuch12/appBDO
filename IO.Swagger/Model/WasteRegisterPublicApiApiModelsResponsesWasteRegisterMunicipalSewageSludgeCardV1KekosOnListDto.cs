/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto" /> class.
        /// </summary>
        /// <param name="kekosId">Id karty ewidencji komunalnych osadów ściekowych.</param>
        /// <param name="cardNumber">Numer karty.</param>
        /// <param name="wasteCode">Kod odpadu.</param>
        /// <param name="wasteCodeDescription">Opis odpadu.</param>
        /// <param name="createdByUser">Utworzone przez użytkownika.</param>
        /// <param name="canBeDeleted">Czy może być usunięta.</param>
        /// <param name="year">Rok kalendarzowy.</param>
        /// <param name="canBeEdited">canBeEdited.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto(Guid? kekosId = default(Guid?), string cardNumber = default(string), string wasteCode = default(string), string wasteCodeDescription = default(string), string createdByUser = default(string), bool? canBeDeleted = default(bool?), int? year = default(int?), bool? canBeEdited = default(bool?))
        {
            this.KekosId = kekosId;
            this.CardNumber = cardNumber;
            this.WasteCode = wasteCode;
            this.WasteCodeDescription = wasteCodeDescription;
            this.CreatedByUser = createdByUser;
            this.CanBeDeleted = canBeDeleted;
            this.Year = year;
            this.CanBeEdited = canBeEdited;
        }
        
        /// <summary>
        /// Id karty ewidencji komunalnych osadów ściekowych
        /// </summary>
        /// <value>Id karty ewidencji komunalnych osadów ściekowych</value>
        [DataMember(Name="kekosId", EmitDefaultValue=false)]
        public Guid? KekosId { get; set; }

        /// <summary>
        /// Numer karty
        /// </summary>
        /// <value>Numer karty</value>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Kod odpadu
        /// </summary>
        /// <value>Kod odpadu</value>
        [DataMember(Name="wasteCode", EmitDefaultValue=false)]
        public string WasteCode { get; set; }

        /// <summary>
        /// Opis odpadu
        /// </summary>
        /// <value>Opis odpadu</value>
        [DataMember(Name="wasteCodeDescription", EmitDefaultValue=false)]
        public string WasteCodeDescription { get; set; }

        /// <summary>
        /// Utworzone przez użytkownika
        /// </summary>
        /// <value>Utworzone przez użytkownika</value>
        [DataMember(Name="createdByUser", EmitDefaultValue=false)]
        public string CreatedByUser { get; set; }

        /// <summary>
        /// Czy może być usunięta
        /// </summary>
        /// <value>Czy może być usunięta</value>
        [DataMember(Name="canBeDeleted", EmitDefaultValue=false)]
        public bool? CanBeDeleted { get; set; }

        /// <summary>
        /// Rok kalendarzowy
        /// </summary>
        /// <value>Rok kalendarzowy</value>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int? Year { get; set; }

        /// <summary>
        /// Gets or Sets CanBeEdited
        /// </summary>
        [DataMember(Name="canBeEdited", EmitDefaultValue=false)]
        public bool? CanBeEdited { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto {\n");
            sb.Append("  KekosId: ").Append(KekosId).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  WasteCode: ").Append(WasteCode).Append("\n");
            sb.Append("  WasteCodeDescription: ").Append(WasteCodeDescription).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  CanBeDeleted: ").Append(CanBeDeleted).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  CanBeEdited: ").Append(CanBeEdited).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KekosId == input.KekosId ||
                    (this.KekosId != null &&
                    this.KekosId.Equals(input.KekosId))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.WasteCode == input.WasteCode ||
                    (this.WasteCode != null &&
                    this.WasteCode.Equals(input.WasteCode))
                ) && 
                (
                    this.WasteCodeDescription == input.WasteCodeDescription ||
                    (this.WasteCodeDescription != null &&
                    this.WasteCodeDescription.Equals(input.WasteCodeDescription))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.CanBeDeleted == input.CanBeDeleted ||
                    (this.CanBeDeleted != null &&
                    this.CanBeDeleted.Equals(input.CanBeDeleted))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.CanBeEdited == input.CanBeEdited ||
                    (this.CanBeEdited != null &&
                    this.CanBeEdited.Equals(input.CanBeEdited))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KekosId != null)
                    hashCode = hashCode * 59 + this.KekosId.GetHashCode();
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                if (this.WasteCode != null)
                    hashCode = hashCode * 59 + this.WasteCode.GetHashCode();
                if (this.WasteCodeDescription != null)
                    hashCode = hashCode * 59 + this.WasteCodeDescription.GetHashCode();
                if (this.CreatedByUser != null)
                    hashCode = hashCode * 59 + this.CreatedByUser.GetHashCode();
                if (this.CanBeDeleted != null)
                    hashCode = hashCode * 59 + this.CanBeDeleted.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.CanBeEdited != null)
                    hashCode = hashCode * 59 + this.CanBeEdited.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
