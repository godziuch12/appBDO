/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BdoServiceModelsDtoWasteRegisterWasteProcessWasteProcessDto
    /// </summary>
    [DataContract]
    public partial class BdoServiceModelsDtoWasteRegisterWasteProcessWasteProcessDto :  IEquatable<BdoServiceModelsDtoWasteRegisterWasteProcessWasteProcessDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BdoServiceModelsDtoWasteRegisterWasteProcessWasteProcessDto" /> class.
        /// </summary>
        /// <param name="wasteProcessId">wasteProcessId.</param>
        /// <param name="name">name.</param>
        /// <param name="codeName">codeName.</param>
        /// <param name="dateCreated">dateCreated.</param>
        /// <param name="parentId">parentId.</param>
        public BdoServiceModelsDtoWasteRegisterWasteProcessWasteProcessDto(int? wasteProcessId = default(int?), string name = default(string), string codeName = default(string), DateTime? dateCreated = default(DateTime?), int? parentId = default(int?))
        {
            this.WasteProcessId = wasteProcessId;
            this.Name = name;
            this.CodeName = codeName;
            this.DateCreated = dateCreated;
            this.ParentId = parentId;
        }
        
        /// <summary>
        /// Gets or Sets WasteProcessId
        /// </summary>
        [DataMember(Name="wasteProcessId", EmitDefaultValue=false)]
        public int? WasteProcessId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CodeName
        /// </summary>
        [DataMember(Name="codeName", EmitDefaultValue=false)]
        public string CodeName { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="dateCreated", EmitDefaultValue=false)]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parentId", EmitDefaultValue=false)]
        public int? ParentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BdoServiceModelsDtoWasteRegisterWasteProcessWasteProcessDto {\n");
            sb.Append("  WasteProcessId: ").Append(WasteProcessId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CodeName: ").Append(CodeName).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BdoServiceModelsDtoWasteRegisterWasteProcessWasteProcessDto);
        }

        /// <summary>
        /// Returns true if BdoServiceModelsDtoWasteRegisterWasteProcessWasteProcessDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BdoServiceModelsDtoWasteRegisterWasteProcessWasteProcessDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BdoServiceModelsDtoWasteRegisterWasteProcessWasteProcessDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WasteProcessId == input.WasteProcessId ||
                    (this.WasteProcessId != null &&
                    this.WasteProcessId.Equals(input.WasteProcessId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CodeName == input.CodeName ||
                    (this.CodeName != null &&
                    this.CodeName.Equals(input.CodeName))
                ) && 
                (
                    this.DateCreated == input.DateCreated ||
                    (this.DateCreated != null &&
                    this.DateCreated.Equals(input.DateCreated))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WasteProcessId != null)
                    hashCode = hashCode * 59 + this.WasteProcessId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CodeName != null)
                    hashCode = hashCode * 59 + this.CodeName.GetHashCode();
                if (this.DateCreated != null)
                    hashCode = hashCode * 59 + this.DateCreated.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
