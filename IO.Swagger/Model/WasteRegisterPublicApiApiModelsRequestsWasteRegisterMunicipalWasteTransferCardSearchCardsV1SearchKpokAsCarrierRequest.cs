/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest :  IEquatable<WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest" /> class.
        /// </summary>
        /// <param name="paginationParameters">Parametry paginacji.</param>
        /// <param name="searchInReceivers">searchInReceivers.</param>
        /// <param name="searchInSenders">searchInSenders.</param>
        /// <param name="name">name.</param>
        /// <param name="locality">Miejscowość.</param>
        /// <param name="street">Ulica.</param>
        /// <param name="nip">NIP.</param>
        /// <param name="identificationNumber">Numer rejestrowy.</param>
        /// <param name="wasteCodeAndDescription">Kod i opis odpadu.</param>
        /// <param name="cardNumber">Numer karty.</param>
        /// <param name="cardStatusCodeNames">cardStatusCodeNames.</param>
        /// <param name="communeName">Nazwa gminy.</param>
        /// <param name="communeArea">Obszar gminy.</param>
        /// <param name="cardSubtype">Podtyp karty.</param>
        /// <param name="transportTime">transportTime.</param>
        /// <param name="receiveConfirmationTime">Data otrzymania potwierdzenia.</param>
        /// <param name="senderFirstNameAndLastName">Imię i Nazwisko przekazującego.</param>
        /// <param name="receiverFirstNameAndLastName">receiverFirstNameAndLastName.</param>
        /// <param name="vehicleRegNumber">Numer rejestracyjny środka transportu.</param>
        /// <param name="transportDateRange">transportDateRange.</param>
        /// <param name="transportDateFrom">transportDateFrom.</param>
        /// <param name="transportDateTo">transportDateTo.</param>
        /// <param name="receiveConfirmationDateRange">receiveConfirmationDateRange.</param>
        /// <param name="receiveConfirmationDateFrom">receiveConfirmationDateFrom.</param>
        /// <param name="receiveConfirmationDateTo">receiveConfirmationDateTo.</param>
        public WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest(WasteRegisterPublicApiApiModelsCollectionsPaginationParameters paginationParameters = default(WasteRegisterPublicApiApiModelsCollectionsPaginationParameters), bool? searchInReceivers = default(bool?), bool? searchInSenders = default(bool?), string name = default(string), string locality = default(string), string street = default(string), string nip = default(string), string identificationNumber = default(string), string wasteCodeAndDescription = default(string), string cardNumber = default(string), string cardStatusCodeNames = default(string), string communeName = default(string), string communeArea = default(string), string cardSubtype = default(string), DateTime? transportTime = default(DateTime?), DateTime? receiveConfirmationTime = default(DateTime?), string senderFirstNameAndLastName = default(string), string receiverFirstNameAndLastName = default(string), string vehicleRegNumber = default(string), bool? transportDateRange = default(bool?), DateTime? transportDateFrom = default(DateTime?), DateTime? transportDateTo = default(DateTime?), bool? receiveConfirmationDateRange = default(bool?), DateTime? receiveConfirmationDateFrom = default(DateTime?), DateTime? receiveConfirmationDateTo = default(DateTime?))
        {
            this.PaginationParameters = paginationParameters;
            this.SearchInReceivers = searchInReceivers;
            this.SearchInSenders = searchInSenders;
            this.Name = name;
            this.Locality = locality;
            this.Street = street;
            this.Nip = nip;
            this.IdentificationNumber = identificationNumber;
            this.WasteCodeAndDescription = wasteCodeAndDescription;
            this.CardNumber = cardNumber;
            this.CardStatusCodeNames = cardStatusCodeNames;
            this.CommuneName = communeName;
            this.CommuneArea = communeArea;
            this.CardSubtype = cardSubtype;
            this.TransportTime = transportTime;
            this.ReceiveConfirmationTime = receiveConfirmationTime;
            this.SenderFirstNameAndLastName = senderFirstNameAndLastName;
            this.ReceiverFirstNameAndLastName = receiverFirstNameAndLastName;
            this.VehicleRegNumber = vehicleRegNumber;
            this.TransportDateRange = transportDateRange;
            this.TransportDateFrom = transportDateFrom;
            this.TransportDateTo = transportDateTo;
            this.ReceiveConfirmationDateRange = receiveConfirmationDateRange;
            this.ReceiveConfirmationDateFrom = receiveConfirmationDateFrom;
            this.ReceiveConfirmationDateTo = receiveConfirmationDateTo;
        }
        
        /// <summary>
        /// Parametry paginacji
        /// </summary>
        /// <value>Parametry paginacji</value>
        [DataMember(Name="paginationParameters", EmitDefaultValue=false)]
        public WasteRegisterPublicApiApiModelsCollectionsPaginationParameters PaginationParameters { get; set; }

        /// <summary>
        /// Gets or Sets SearchInReceivers
        /// </summary>
        [DataMember(Name="searchInReceivers", EmitDefaultValue=false)]
        public bool? SearchInReceivers { get; set; }

        /// <summary>
        /// Gets or Sets SearchInSenders
        /// </summary>
        [DataMember(Name="searchInSenders", EmitDefaultValue=false)]
        public bool? SearchInSenders { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Miejscowość
        /// </summary>
        /// <value>Miejscowość</value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// Ulica
        /// </summary>
        /// <value>Ulica</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// NIP
        /// </summary>
        /// <value>NIP</value>
        [DataMember(Name="nip", EmitDefaultValue=false)]
        public string Nip { get; set; }

        /// <summary>
        /// Numer rejestrowy
        /// </summary>
        /// <value>Numer rejestrowy</value>
        [DataMember(Name="identificationNumber", EmitDefaultValue=false)]
        public string IdentificationNumber { get; set; }

        /// <summary>
        /// Kod i opis odpadu
        /// </summary>
        /// <value>Kod i opis odpadu</value>
        [DataMember(Name="wasteCodeAndDescription", EmitDefaultValue=false)]
        public string WasteCodeAndDescription { get; set; }

        /// <summary>
        /// Numer karty
        /// </summary>
        /// <value>Numer karty</value>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets CardStatusCodeNames
        /// </summary>
        [DataMember(Name="cardStatusCodeNames", EmitDefaultValue=false)]
        public string CardStatusCodeNames { get; set; }

        /// <summary>
        /// Nazwa gminy
        /// </summary>
        /// <value>Nazwa gminy</value>
        [DataMember(Name="communeName", EmitDefaultValue=false)]
        public string CommuneName { get; set; }

        /// <summary>
        /// Obszar gminy
        /// </summary>
        /// <value>Obszar gminy</value>
        [DataMember(Name="communeArea", EmitDefaultValue=false)]
        public string CommuneArea { get; set; }

        /// <summary>
        /// Podtyp karty
        /// </summary>
        /// <value>Podtyp karty</value>
        [DataMember(Name="cardSubtype", EmitDefaultValue=false)]
        public string CardSubtype { get; set; }

        /// <summary>
        /// Gets or Sets TransportTime
        /// </summary>
        [DataMember(Name="transportTime", EmitDefaultValue=false)]
        public DateTime? TransportTime { get; set; }

        /// <summary>
        /// Data otrzymania potwierdzenia
        /// </summary>
        /// <value>Data otrzymania potwierdzenia</value>
        [DataMember(Name="receiveConfirmationTime", EmitDefaultValue=false)]
        public DateTime? ReceiveConfirmationTime { get; set; }

        /// <summary>
        /// Imię i Nazwisko przekazującego
        /// </summary>
        /// <value>Imię i Nazwisko przekazującego</value>
        [DataMember(Name="senderFirstNameAndLastName", EmitDefaultValue=false)]
        public string SenderFirstNameAndLastName { get; set; }

        /// <summary>
        /// Gets or Sets ReceiverFirstNameAndLastName
        /// </summary>
        [DataMember(Name="receiverFirstNameAndLastName", EmitDefaultValue=false)]
        public string ReceiverFirstNameAndLastName { get; set; }

        /// <summary>
        /// Numer rejestracyjny środka transportu
        /// </summary>
        /// <value>Numer rejestracyjny środka transportu</value>
        [DataMember(Name="vehicleRegNumber", EmitDefaultValue=false)]
        public string VehicleRegNumber { get; set; }

        /// <summary>
        /// Gets or Sets TransportDateRange
        /// </summary>
        [DataMember(Name="transportDateRange", EmitDefaultValue=false)]
        public bool? TransportDateRange { get; set; }

        /// <summary>
        /// Gets or Sets TransportDateFrom
        /// </summary>
        [DataMember(Name="transportDateFrom", EmitDefaultValue=false)]
        public DateTime? TransportDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets TransportDateTo
        /// </summary>
        [DataMember(Name="transportDateTo", EmitDefaultValue=false)]
        public DateTime? TransportDateTo { get; set; }

        /// <summary>
        /// Gets or Sets ReceiveConfirmationDateRange
        /// </summary>
        [DataMember(Name="receiveConfirmationDateRange", EmitDefaultValue=false)]
        public bool? ReceiveConfirmationDateRange { get; set; }

        /// <summary>
        /// Gets or Sets ReceiveConfirmationDateFrom
        /// </summary>
        [DataMember(Name="receiveConfirmationDateFrom", EmitDefaultValue=false)]
        public DateTime? ReceiveConfirmationDateFrom { get; set; }

        /// <summary>
        /// Gets or Sets ReceiveConfirmationDateTo
        /// </summary>
        [DataMember(Name="receiveConfirmationDateTo", EmitDefaultValue=false)]
        public DateTime? ReceiveConfirmationDateTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest {\n");
            sb.Append("  PaginationParameters: ").Append(PaginationParameters).Append("\n");
            sb.Append("  SearchInReceivers: ").Append(SearchInReceivers).Append("\n");
            sb.Append("  SearchInSenders: ").Append(SearchInSenders).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Nip: ").Append(Nip).Append("\n");
            sb.Append("  IdentificationNumber: ").Append(IdentificationNumber).Append("\n");
            sb.Append("  WasteCodeAndDescription: ").Append(WasteCodeAndDescription).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardStatusCodeNames: ").Append(CardStatusCodeNames).Append("\n");
            sb.Append("  CommuneName: ").Append(CommuneName).Append("\n");
            sb.Append("  CommuneArea: ").Append(CommuneArea).Append("\n");
            sb.Append("  CardSubtype: ").Append(CardSubtype).Append("\n");
            sb.Append("  TransportTime: ").Append(TransportTime).Append("\n");
            sb.Append("  ReceiveConfirmationTime: ").Append(ReceiveConfirmationTime).Append("\n");
            sb.Append("  SenderFirstNameAndLastName: ").Append(SenderFirstNameAndLastName).Append("\n");
            sb.Append("  ReceiverFirstNameAndLastName: ").Append(ReceiverFirstNameAndLastName).Append("\n");
            sb.Append("  VehicleRegNumber: ").Append(VehicleRegNumber).Append("\n");
            sb.Append("  TransportDateRange: ").Append(TransportDateRange).Append("\n");
            sb.Append("  TransportDateFrom: ").Append(TransportDateFrom).Append("\n");
            sb.Append("  TransportDateTo: ").Append(TransportDateTo).Append("\n");
            sb.Append("  ReceiveConfirmationDateRange: ").Append(ReceiveConfirmationDateRange).Append("\n");
            sb.Append("  ReceiveConfirmationDateFrom: ").Append(ReceiveConfirmationDateFrom).Append("\n");
            sb.Append("  ReceiveConfirmationDateTo: ").Append(ReceiveConfirmationDateTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaginationParameters == input.PaginationParameters ||
                    (this.PaginationParameters != null &&
                    this.PaginationParameters.Equals(input.PaginationParameters))
                ) && 
                (
                    this.SearchInReceivers == input.SearchInReceivers ||
                    (this.SearchInReceivers != null &&
                    this.SearchInReceivers.Equals(input.SearchInReceivers))
                ) && 
                (
                    this.SearchInSenders == input.SearchInSenders ||
                    (this.SearchInSenders != null &&
                    this.SearchInSenders.Equals(input.SearchInSenders))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.Nip == input.Nip ||
                    (this.Nip != null &&
                    this.Nip.Equals(input.Nip))
                ) && 
                (
                    this.IdentificationNumber == input.IdentificationNumber ||
                    (this.IdentificationNumber != null &&
                    this.IdentificationNumber.Equals(input.IdentificationNumber))
                ) && 
                (
                    this.WasteCodeAndDescription == input.WasteCodeAndDescription ||
                    (this.WasteCodeAndDescription != null &&
                    this.WasteCodeAndDescription.Equals(input.WasteCodeAndDescription))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.CardStatusCodeNames == input.CardStatusCodeNames ||
                    (this.CardStatusCodeNames != null &&
                    this.CardStatusCodeNames.Equals(input.CardStatusCodeNames))
                ) && 
                (
                    this.CommuneName == input.CommuneName ||
                    (this.CommuneName != null &&
                    this.CommuneName.Equals(input.CommuneName))
                ) && 
                (
                    this.CommuneArea == input.CommuneArea ||
                    (this.CommuneArea != null &&
                    this.CommuneArea.Equals(input.CommuneArea))
                ) && 
                (
                    this.CardSubtype == input.CardSubtype ||
                    (this.CardSubtype != null &&
                    this.CardSubtype.Equals(input.CardSubtype))
                ) && 
                (
                    this.TransportTime == input.TransportTime ||
                    (this.TransportTime != null &&
                    this.TransportTime.Equals(input.TransportTime))
                ) && 
                (
                    this.ReceiveConfirmationTime == input.ReceiveConfirmationTime ||
                    (this.ReceiveConfirmationTime != null &&
                    this.ReceiveConfirmationTime.Equals(input.ReceiveConfirmationTime))
                ) && 
                (
                    this.SenderFirstNameAndLastName == input.SenderFirstNameAndLastName ||
                    (this.SenderFirstNameAndLastName != null &&
                    this.SenderFirstNameAndLastName.Equals(input.SenderFirstNameAndLastName))
                ) && 
                (
                    this.ReceiverFirstNameAndLastName == input.ReceiverFirstNameAndLastName ||
                    (this.ReceiverFirstNameAndLastName != null &&
                    this.ReceiverFirstNameAndLastName.Equals(input.ReceiverFirstNameAndLastName))
                ) && 
                (
                    this.VehicleRegNumber == input.VehicleRegNumber ||
                    (this.VehicleRegNumber != null &&
                    this.VehicleRegNumber.Equals(input.VehicleRegNumber))
                ) && 
                (
                    this.TransportDateRange == input.TransportDateRange ||
                    (this.TransportDateRange != null &&
                    this.TransportDateRange.Equals(input.TransportDateRange))
                ) && 
                (
                    this.TransportDateFrom == input.TransportDateFrom ||
                    (this.TransportDateFrom != null &&
                    this.TransportDateFrom.Equals(input.TransportDateFrom))
                ) && 
                (
                    this.TransportDateTo == input.TransportDateTo ||
                    (this.TransportDateTo != null &&
                    this.TransportDateTo.Equals(input.TransportDateTo))
                ) && 
                (
                    this.ReceiveConfirmationDateRange == input.ReceiveConfirmationDateRange ||
                    (this.ReceiveConfirmationDateRange != null &&
                    this.ReceiveConfirmationDateRange.Equals(input.ReceiveConfirmationDateRange))
                ) && 
                (
                    this.ReceiveConfirmationDateFrom == input.ReceiveConfirmationDateFrom ||
                    (this.ReceiveConfirmationDateFrom != null &&
                    this.ReceiveConfirmationDateFrom.Equals(input.ReceiveConfirmationDateFrom))
                ) && 
                (
                    this.ReceiveConfirmationDateTo == input.ReceiveConfirmationDateTo ||
                    (this.ReceiveConfirmationDateTo != null &&
                    this.ReceiveConfirmationDateTo.Equals(input.ReceiveConfirmationDateTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PaginationParameters != null)
                    hashCode = hashCode * 59 + this.PaginationParameters.GetHashCode();
                if (this.SearchInReceivers != null)
                    hashCode = hashCode * 59 + this.SearchInReceivers.GetHashCode();
                if (this.SearchInSenders != null)
                    hashCode = hashCode * 59 + this.SearchInSenders.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.Nip != null)
                    hashCode = hashCode * 59 + this.Nip.GetHashCode();
                if (this.IdentificationNumber != null)
                    hashCode = hashCode * 59 + this.IdentificationNumber.GetHashCode();
                if (this.WasteCodeAndDescription != null)
                    hashCode = hashCode * 59 + this.WasteCodeAndDescription.GetHashCode();
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                if (this.CardStatusCodeNames != null)
                    hashCode = hashCode * 59 + this.CardStatusCodeNames.GetHashCode();
                if (this.CommuneName != null)
                    hashCode = hashCode * 59 + this.CommuneName.GetHashCode();
                if (this.CommuneArea != null)
                    hashCode = hashCode * 59 + this.CommuneArea.GetHashCode();
                if (this.CardSubtype != null)
                    hashCode = hashCode * 59 + this.CardSubtype.GetHashCode();
                if (this.TransportTime != null)
                    hashCode = hashCode * 59 + this.TransportTime.GetHashCode();
                if (this.ReceiveConfirmationTime != null)
                    hashCode = hashCode * 59 + this.ReceiveConfirmationTime.GetHashCode();
                if (this.SenderFirstNameAndLastName != null)
                    hashCode = hashCode * 59 + this.SenderFirstNameAndLastName.GetHashCode();
                if (this.ReceiverFirstNameAndLastName != null)
                    hashCode = hashCode * 59 + this.ReceiverFirstNameAndLastName.GetHashCode();
                if (this.VehicleRegNumber != null)
                    hashCode = hashCode * 59 + this.VehicleRegNumber.GetHashCode();
                if (this.TransportDateRange != null)
                    hashCode = hashCode * 59 + this.TransportDateRange.GetHashCode();
                if (this.TransportDateFrom != null)
                    hashCode = hashCode * 59 + this.TransportDateFrom.GetHashCode();
                if (this.TransportDateTo != null)
                    hashCode = hashCode * 59 + this.TransportDateTo.GetHashCode();
                if (this.ReceiveConfirmationDateRange != null)
                    hashCode = hashCode * 59 + this.ReceiveConfirmationDateRange.GetHashCode();
                if (this.ReceiveConfirmationDateFrom != null)
                    hashCode = hashCode * 59 + this.ReceiveConfirmationDateFrom.GetHashCode();
                if (this.ReceiveConfirmationDateTo != null)
                    hashCode = hashCode * 59 + this.ReceiveConfirmationDateTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
