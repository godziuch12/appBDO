/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokCardInfo
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokCardInfo :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokCardInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokCardInfo" /> class.
        /// </summary>
        /// <param name="wasteCode">Kod odpadu.</param>
        /// <param name="year">Rok kalendarzowy.</param>
        /// <param name="cardNumber">Numer karty.</param>
        /// <param name="provinceRegionCommune">provinceRegionCommune.</param>
        /// <param name="isWasteReceive">isWasteReceive.</param>
        /// <param name="isWasteCollecting">Zb - zbieranie odpadów.</param>
        /// <param name="isSalvage">Od - odzysk.</param>
        /// <param name="isNeutralization">Un - unieszkodliwianie.</param>
        /// <param name="initialWasteMass">initialWasteMass.</param>
        /// <param name="wasteCodeExtended">Kod ex.</param>
        /// <param name="wasteCodeExtendedDescription">Rodzaj odpadu ex.</param>
        /// <param name="hazardousWasteReclassification">Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne.</param>
        /// <param name="hazardousWasteReclassificationDescription">Rodzaj odpadu.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokCardInfo(string wasteCode = default(string), int? year = default(int?), string cardNumber = default(string), string provinceRegionCommune = default(string), bool? isWasteReceive = default(bool?), bool? isWasteCollecting = default(bool?), bool? isSalvage = default(bool?), bool? isNeutralization = default(bool?), double? initialWasteMass = default(double?), bool? wasteCodeExtended = default(bool?), string wasteCodeExtendedDescription = default(string), bool? hazardousWasteReclassification = default(bool?), string hazardousWasteReclassificationDescription = default(string))
        {
            this.WasteCode = wasteCode;
            this.Year = year;
            this.CardNumber = cardNumber;
            this.ProvinceRegionCommune = provinceRegionCommune;
            this.IsWasteReceive = isWasteReceive;
            this.IsWasteCollecting = isWasteCollecting;
            this.IsSalvage = isSalvage;
            this.IsNeutralization = isNeutralization;
            this.InitialWasteMass = initialWasteMass;
            this.WasteCodeExtended = wasteCodeExtended;
            this.WasteCodeExtendedDescription = wasteCodeExtendedDescription;
            this.HazardousWasteReclassification = hazardousWasteReclassification;
            this.HazardousWasteReclassificationDescription = hazardousWasteReclassificationDescription;
        }
        
        /// <summary>
        /// Kod odpadu
        /// </summary>
        /// <value>Kod odpadu</value>
        [DataMember(Name="wasteCode", EmitDefaultValue=false)]
        public string WasteCode { get; set; }

        /// <summary>
        /// Rok kalendarzowy
        /// </summary>
        /// <value>Rok kalendarzowy</value>
        [DataMember(Name="year", EmitDefaultValue=false)]
        public int? Year { get; set; }

        /// <summary>
        /// Numer karty
        /// </summary>
        /// <value>Numer karty</value>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProvinceRegionCommune
        /// </summary>
        [DataMember(Name="provinceRegionCommune", EmitDefaultValue=false)]
        public string ProvinceRegionCommune { get; set; }

        /// <summary>
        /// Gets or Sets IsWasteReceive
        /// </summary>
        [DataMember(Name="isWasteReceive", EmitDefaultValue=false)]
        public bool? IsWasteReceive { get; set; }

        /// <summary>
        /// Zb - zbieranie odpadów
        /// </summary>
        /// <value>Zb - zbieranie odpadów</value>
        [DataMember(Name="isWasteCollecting", EmitDefaultValue=false)]
        public bool? IsWasteCollecting { get; set; }

        /// <summary>
        /// Od - odzysk
        /// </summary>
        /// <value>Od - odzysk</value>
        [DataMember(Name="isSalvage", EmitDefaultValue=false)]
        public bool? IsSalvage { get; set; }

        /// <summary>
        /// Un - unieszkodliwianie
        /// </summary>
        /// <value>Un - unieszkodliwianie</value>
        [DataMember(Name="isNeutralization", EmitDefaultValue=false)]
        public bool? IsNeutralization { get; set; }

        /// <summary>
        /// Gets or Sets InitialWasteMass
        /// </summary>
        [DataMember(Name="initialWasteMass", EmitDefaultValue=false)]
        public double? InitialWasteMass { get; set; }

        /// <summary>
        /// Kod ex
        /// </summary>
        /// <value>Kod ex</value>
        [DataMember(Name="wasteCodeExtended", EmitDefaultValue=false)]
        public bool? WasteCodeExtended { get; set; }

        /// <summary>
        /// Rodzaj odpadu ex
        /// </summary>
        /// <value>Rodzaj odpadu ex</value>
        [DataMember(Name="wasteCodeExtendedDescription", EmitDefaultValue=false)]
        public string WasteCodeExtendedDescription { get; set; }

        /// <summary>
        /// Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne
        /// </summary>
        /// <value>Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne</value>
        [DataMember(Name="hazardousWasteReclassification", EmitDefaultValue=false)]
        public bool? HazardousWasteReclassification { get; set; }

        /// <summary>
        /// Rodzaj odpadu
        /// </summary>
        /// <value>Rodzaj odpadu</value>
        [DataMember(Name="hazardousWasteReclassificationDescription", EmitDefaultValue=false)]
        public string HazardousWasteReclassificationDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokCardInfo {\n");
            sb.Append("  WasteCode: ").Append(WasteCode).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  ProvinceRegionCommune: ").Append(ProvinceRegionCommune).Append("\n");
            sb.Append("  IsWasteReceive: ").Append(IsWasteReceive).Append("\n");
            sb.Append("  IsWasteCollecting: ").Append(IsWasteCollecting).Append("\n");
            sb.Append("  IsSalvage: ").Append(IsSalvage).Append("\n");
            sb.Append("  IsNeutralization: ").Append(IsNeutralization).Append("\n");
            sb.Append("  InitialWasteMass: ").Append(InitialWasteMass).Append("\n");
            sb.Append("  WasteCodeExtended: ").Append(WasteCodeExtended).Append("\n");
            sb.Append("  WasteCodeExtendedDescription: ").Append(WasteCodeExtendedDescription).Append("\n");
            sb.Append("  HazardousWasteReclassification: ").Append(HazardousWasteReclassification).Append("\n");
            sb.Append("  HazardousWasteReclassificationDescription: ").Append(HazardousWasteReclassificationDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokCardInfo);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokCardInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokCardInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokCardInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.WasteCode == input.WasteCode ||
                    (this.WasteCode != null &&
                    this.WasteCode.Equals(input.WasteCode))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.ProvinceRegionCommune == input.ProvinceRegionCommune ||
                    (this.ProvinceRegionCommune != null &&
                    this.ProvinceRegionCommune.Equals(input.ProvinceRegionCommune))
                ) && 
                (
                    this.IsWasteReceive == input.IsWasteReceive ||
                    (this.IsWasteReceive != null &&
                    this.IsWasteReceive.Equals(input.IsWasteReceive))
                ) && 
                (
                    this.IsWasteCollecting == input.IsWasteCollecting ||
                    (this.IsWasteCollecting != null &&
                    this.IsWasteCollecting.Equals(input.IsWasteCollecting))
                ) && 
                (
                    this.IsSalvage == input.IsSalvage ||
                    (this.IsSalvage != null &&
                    this.IsSalvage.Equals(input.IsSalvage))
                ) && 
                (
                    this.IsNeutralization == input.IsNeutralization ||
                    (this.IsNeutralization != null &&
                    this.IsNeutralization.Equals(input.IsNeutralization))
                ) && 
                (
                    this.InitialWasteMass == input.InitialWasteMass ||
                    (this.InitialWasteMass != null &&
                    this.InitialWasteMass.Equals(input.InitialWasteMass))
                ) && 
                (
                    this.WasteCodeExtended == input.WasteCodeExtended ||
                    (this.WasteCodeExtended != null &&
                    this.WasteCodeExtended.Equals(input.WasteCodeExtended))
                ) && 
                (
                    this.WasteCodeExtendedDescription == input.WasteCodeExtendedDescription ||
                    (this.WasteCodeExtendedDescription != null &&
                    this.WasteCodeExtendedDescription.Equals(input.WasteCodeExtendedDescription))
                ) && 
                (
                    this.HazardousWasteReclassification == input.HazardousWasteReclassification ||
                    (this.HazardousWasteReclassification != null &&
                    this.HazardousWasteReclassification.Equals(input.HazardousWasteReclassification))
                ) && 
                (
                    this.HazardousWasteReclassificationDescription == input.HazardousWasteReclassificationDescription ||
                    (this.HazardousWasteReclassificationDescription != null &&
                    this.HazardousWasteReclassificationDescription.Equals(input.HazardousWasteReclassificationDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WasteCode != null)
                    hashCode = hashCode * 59 + this.WasteCode.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                if (this.ProvinceRegionCommune != null)
                    hashCode = hashCode * 59 + this.ProvinceRegionCommune.GetHashCode();
                if (this.IsWasteReceive != null)
                    hashCode = hashCode * 59 + this.IsWasteReceive.GetHashCode();
                if (this.IsWasteCollecting != null)
                    hashCode = hashCode * 59 + this.IsWasteCollecting.GetHashCode();
                if (this.IsSalvage != null)
                    hashCode = hashCode * 59 + this.IsSalvage.GetHashCode();
                if (this.IsNeutralization != null)
                    hashCode = hashCode * 59 + this.IsNeutralization.GetHashCode();
                if (this.InitialWasteMass != null)
                    hashCode = hashCode * 59 + this.InitialWasteMass.GetHashCode();
                if (this.WasteCodeExtended != null)
                    hashCode = hashCode * 59 + this.WasteCodeExtended.GetHashCode();
                if (this.WasteCodeExtendedDescription != null)
                    hashCode = hashCode * 59 + this.WasteCodeExtendedDescription.GetHashCode();
                if (this.HazardousWasteReclassification != null)
                    hashCode = hashCode * 59 + this.HazardousWasteReclassification.GetHashCode();
                if (this.HazardousWasteReclassificationDescription != null)
                    hashCode = hashCode * 59 + this.HazardousWasteReclassificationDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
