/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest :  IEquatable<WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest" /> class.
        /// </summary>
        /// <param name="kezsEquipmentManagementId">Id wpisu Gospodarowanie sprzętem.</param>
        /// <param name="isHandedOver">Przekazane do innego zakładu przetwarzania.</param>
        /// <param name="isUsed">Przetwarzanie sprzętu we własnym zakeresie.</param>
        /// <param name="isRecycled">Zużyty sprzet przeznaczony do ponownego użycia.</param>
        /// <param name="kpoId">Id karty przekazania odpadów.</param>
        /// <param name="kpokId">Id Karty Przekazania Odpadów Komunalnych.</param>
        /// <param name="isEntryBasedOnKpo">Wpis dokonywany na podstawie karty przekazania odpadów.</param>
        /// <param name="isEntryBasedOnKpok">Wpis dokonywany na podstawie karty przekazania odpadów komunalnych.</param>
        /// <param name="kpoHandoverDate">Data przekazania do innego zakładu przetwarzania.</param>
        /// <param name="handedOverEquipmentMass">Masa przekazanych odpadów.</param>
        /// <param name="recycledEquipmentMass">Masa sprzętu przeznaczonego do ponownego użycia.</param>
        /// <param name="usedEquipmentMass">Masa przetwarzanego sprzętu.</param>
        /// <param name="additionalInformation">Informacje dodatkowe.</param>
        /// <param name="installationName">Nazwa instalacji.</param>
        /// <param name="wasteProcessId">Id procesu przetwarzania odpadów.</param>
        /// <param name="isRecycling">Recykling.</param>
        /// <param name="isRecycledParts">Części składowe - recykling.</param>
        /// <param name="recycledPartsEquipmentMass">Masa zużytego sprzętu przeznaczonego do ponownego użycia.</param>
        public WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest(Guid? kezsEquipmentManagementId = default(Guid?), bool? isHandedOver = default(bool?), bool? isUsed = default(bool?), bool? isRecycled = default(bool?), Guid? kpoId = default(Guid?), Guid? kpokId = default(Guid?), bool? isEntryBasedOnKpo = default(bool?), bool? isEntryBasedOnKpok = default(bool?), DateTime? kpoHandoverDate = default(DateTime?), double? handedOverEquipmentMass = default(double?), double? recycledEquipmentMass = default(double?), double? usedEquipmentMass = default(double?), string additionalInformation = default(string), string installationName = default(string), int? wasteProcessId = default(int?), bool? isRecycling = default(bool?), bool? isRecycledParts = default(bool?), double? recycledPartsEquipmentMass = default(double?))
        {
            this.KezsEquipmentManagementId = kezsEquipmentManagementId;
            this.IsHandedOver = isHandedOver;
            this.IsUsed = isUsed;
            this.IsRecycled = isRecycled;
            this.KpoId = kpoId;
            this.KpokId = kpokId;
            this.IsEntryBasedOnKpo = isEntryBasedOnKpo;
            this.IsEntryBasedOnKpok = isEntryBasedOnKpok;
            this.KpoHandoverDate = kpoHandoverDate;
            this.HandedOverEquipmentMass = handedOverEquipmentMass;
            this.RecycledEquipmentMass = recycledEquipmentMass;
            this.UsedEquipmentMass = usedEquipmentMass;
            this.AdditionalInformation = additionalInformation;
            this.InstallationName = installationName;
            this.WasteProcessId = wasteProcessId;
            this.IsRecycling = isRecycling;
            this.IsRecycledParts = isRecycledParts;
            this.RecycledPartsEquipmentMass = recycledPartsEquipmentMass;
        }
        
        /// <summary>
        /// Id wpisu Gospodarowanie sprzętem
        /// </summary>
        /// <value>Id wpisu Gospodarowanie sprzętem</value>
        [DataMember(Name="kezsEquipmentManagementId", EmitDefaultValue=false)]
        public Guid? KezsEquipmentManagementId { get; set; }

        /// <summary>
        /// Przekazane do innego zakładu przetwarzania
        /// </summary>
        /// <value>Przekazane do innego zakładu przetwarzania</value>
        [DataMember(Name="isHandedOver", EmitDefaultValue=false)]
        public bool? IsHandedOver { get; set; }

        /// <summary>
        /// Przetwarzanie sprzętu we własnym zakeresie
        /// </summary>
        /// <value>Przetwarzanie sprzętu we własnym zakeresie</value>
        [DataMember(Name="isUsed", EmitDefaultValue=false)]
        public bool? IsUsed { get; set; }

        /// <summary>
        /// Zużyty sprzet przeznaczony do ponownego użycia
        /// </summary>
        /// <value>Zużyty sprzet przeznaczony do ponownego użycia</value>
        [DataMember(Name="isRecycled", EmitDefaultValue=false)]
        public bool? IsRecycled { get; set; }

        /// <summary>
        /// Id karty przekazania odpadów
        /// </summary>
        /// <value>Id karty przekazania odpadów</value>
        [DataMember(Name="kpoId", EmitDefaultValue=false)]
        public Guid? KpoId { get; set; }

        /// <summary>
        /// Id Karty Przekazania Odpadów Komunalnych
        /// </summary>
        /// <value>Id Karty Przekazania Odpadów Komunalnych</value>
        [DataMember(Name="kpokId", EmitDefaultValue=false)]
        public Guid? KpokId { get; set; }

        /// <summary>
        /// Wpis dokonywany na podstawie karty przekazania odpadów
        /// </summary>
        /// <value>Wpis dokonywany na podstawie karty przekazania odpadów</value>
        [DataMember(Name="isEntryBasedOnKpo", EmitDefaultValue=false)]
        public bool? IsEntryBasedOnKpo { get; set; }

        /// <summary>
        /// Wpis dokonywany na podstawie karty przekazania odpadów komunalnych
        /// </summary>
        /// <value>Wpis dokonywany na podstawie karty przekazania odpadów komunalnych</value>
        [DataMember(Name="isEntryBasedOnKpok", EmitDefaultValue=false)]
        public bool? IsEntryBasedOnKpok { get; set; }

        /// <summary>
        /// Data przekazania do innego zakładu przetwarzania
        /// </summary>
        /// <value>Data przekazania do innego zakładu przetwarzania</value>
        [DataMember(Name="kpoHandoverDate", EmitDefaultValue=false)]
        public DateTime? KpoHandoverDate { get; set; }

        /// <summary>
        /// Masa przekazanych odpadów
        /// </summary>
        /// <value>Masa przekazanych odpadów</value>
        [DataMember(Name="handedOverEquipmentMass", EmitDefaultValue=false)]
        public double? HandedOverEquipmentMass { get; set; }

        /// <summary>
        /// Masa sprzętu przeznaczonego do ponownego użycia
        /// </summary>
        /// <value>Masa sprzętu przeznaczonego do ponownego użycia</value>
        [DataMember(Name="recycledEquipmentMass", EmitDefaultValue=false)]
        public double? RecycledEquipmentMass { get; set; }

        /// <summary>
        /// Masa przetwarzanego sprzętu
        /// </summary>
        /// <value>Masa przetwarzanego sprzętu</value>
        [DataMember(Name="usedEquipmentMass", EmitDefaultValue=false)]
        public double? UsedEquipmentMass { get; set; }

        /// <summary>
        /// Informacje dodatkowe
        /// </summary>
        /// <value>Informacje dodatkowe</value>
        [DataMember(Name="additionalInformation", EmitDefaultValue=false)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// Nazwa instalacji
        /// </summary>
        /// <value>Nazwa instalacji</value>
        [DataMember(Name="installationName", EmitDefaultValue=false)]
        public string InstallationName { get; set; }

        /// <summary>
        /// Id procesu przetwarzania odpadów
        /// </summary>
        /// <value>Id procesu przetwarzania odpadów</value>
        [DataMember(Name="wasteProcessId", EmitDefaultValue=false)]
        public int? WasteProcessId { get; set; }

        /// <summary>
        /// Recykling
        /// </summary>
        /// <value>Recykling</value>
        [DataMember(Name="isRecycling", EmitDefaultValue=false)]
        public bool? IsRecycling { get; set; }

        /// <summary>
        /// Części składowe - recykling
        /// </summary>
        /// <value>Części składowe - recykling</value>
        [DataMember(Name="isRecycledParts", EmitDefaultValue=false)]
        public bool? IsRecycledParts { get; set; }

        /// <summary>
        /// Masa zużytego sprzętu przeznaczonego do ponownego użycia
        /// </summary>
        /// <value>Masa zużytego sprzętu przeznaczonego do ponownego użycia</value>
        [DataMember(Name="recycledPartsEquipmentMass", EmitDefaultValue=false)]
        public double? RecycledPartsEquipmentMass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest {\n");
            sb.Append("  KezsEquipmentManagementId: ").Append(KezsEquipmentManagementId).Append("\n");
            sb.Append("  IsHandedOver: ").Append(IsHandedOver).Append("\n");
            sb.Append("  IsUsed: ").Append(IsUsed).Append("\n");
            sb.Append("  IsRecycled: ").Append(IsRecycled).Append("\n");
            sb.Append("  KpoId: ").Append(KpoId).Append("\n");
            sb.Append("  KpokId: ").Append(KpokId).Append("\n");
            sb.Append("  IsEntryBasedOnKpo: ").Append(IsEntryBasedOnKpo).Append("\n");
            sb.Append("  IsEntryBasedOnKpok: ").Append(IsEntryBasedOnKpok).Append("\n");
            sb.Append("  KpoHandoverDate: ").Append(KpoHandoverDate).Append("\n");
            sb.Append("  HandedOverEquipmentMass: ").Append(HandedOverEquipmentMass).Append("\n");
            sb.Append("  RecycledEquipmentMass: ").Append(RecycledEquipmentMass).Append("\n");
            sb.Append("  UsedEquipmentMass: ").Append(UsedEquipmentMass).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  InstallationName: ").Append(InstallationName).Append("\n");
            sb.Append("  WasteProcessId: ").Append(WasteProcessId).Append("\n");
            sb.Append("  IsRecycling: ").Append(IsRecycling).Append("\n");
            sb.Append("  IsRecycledParts: ").Append(IsRecycledParts).Append("\n");
            sb.Append("  RecycledPartsEquipmentMass: ").Append(RecycledPartsEquipmentMass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KezsEquipmentManagementId == input.KezsEquipmentManagementId ||
                    (this.KezsEquipmentManagementId != null &&
                    this.KezsEquipmentManagementId.Equals(input.KezsEquipmentManagementId))
                ) && 
                (
                    this.IsHandedOver == input.IsHandedOver ||
                    (this.IsHandedOver != null &&
                    this.IsHandedOver.Equals(input.IsHandedOver))
                ) && 
                (
                    this.IsUsed == input.IsUsed ||
                    (this.IsUsed != null &&
                    this.IsUsed.Equals(input.IsUsed))
                ) && 
                (
                    this.IsRecycled == input.IsRecycled ||
                    (this.IsRecycled != null &&
                    this.IsRecycled.Equals(input.IsRecycled))
                ) && 
                (
                    this.KpoId == input.KpoId ||
                    (this.KpoId != null &&
                    this.KpoId.Equals(input.KpoId))
                ) && 
                (
                    this.KpokId == input.KpokId ||
                    (this.KpokId != null &&
                    this.KpokId.Equals(input.KpokId))
                ) && 
                (
                    this.IsEntryBasedOnKpo == input.IsEntryBasedOnKpo ||
                    (this.IsEntryBasedOnKpo != null &&
                    this.IsEntryBasedOnKpo.Equals(input.IsEntryBasedOnKpo))
                ) && 
                (
                    this.IsEntryBasedOnKpok == input.IsEntryBasedOnKpok ||
                    (this.IsEntryBasedOnKpok != null &&
                    this.IsEntryBasedOnKpok.Equals(input.IsEntryBasedOnKpok))
                ) && 
                (
                    this.KpoHandoverDate == input.KpoHandoverDate ||
                    (this.KpoHandoverDate != null &&
                    this.KpoHandoverDate.Equals(input.KpoHandoverDate))
                ) && 
                (
                    this.HandedOverEquipmentMass == input.HandedOverEquipmentMass ||
                    (this.HandedOverEquipmentMass != null &&
                    this.HandedOverEquipmentMass.Equals(input.HandedOverEquipmentMass))
                ) && 
                (
                    this.RecycledEquipmentMass == input.RecycledEquipmentMass ||
                    (this.RecycledEquipmentMass != null &&
                    this.RecycledEquipmentMass.Equals(input.RecycledEquipmentMass))
                ) && 
                (
                    this.UsedEquipmentMass == input.UsedEquipmentMass ||
                    (this.UsedEquipmentMass != null &&
                    this.UsedEquipmentMass.Equals(input.UsedEquipmentMass))
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                ) && 
                (
                    this.InstallationName == input.InstallationName ||
                    (this.InstallationName != null &&
                    this.InstallationName.Equals(input.InstallationName))
                ) && 
                (
                    this.WasteProcessId == input.WasteProcessId ||
                    (this.WasteProcessId != null &&
                    this.WasteProcessId.Equals(input.WasteProcessId))
                ) && 
                (
                    this.IsRecycling == input.IsRecycling ||
                    (this.IsRecycling != null &&
                    this.IsRecycling.Equals(input.IsRecycling))
                ) && 
                (
                    this.IsRecycledParts == input.IsRecycledParts ||
                    (this.IsRecycledParts != null &&
                    this.IsRecycledParts.Equals(input.IsRecycledParts))
                ) && 
                (
                    this.RecycledPartsEquipmentMass == input.RecycledPartsEquipmentMass ||
                    (this.RecycledPartsEquipmentMass != null &&
                    this.RecycledPartsEquipmentMass.Equals(input.RecycledPartsEquipmentMass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KezsEquipmentManagementId != null)
                    hashCode = hashCode * 59 + this.KezsEquipmentManagementId.GetHashCode();
                if (this.IsHandedOver != null)
                    hashCode = hashCode * 59 + this.IsHandedOver.GetHashCode();
                if (this.IsUsed != null)
                    hashCode = hashCode * 59 + this.IsUsed.GetHashCode();
                if (this.IsRecycled != null)
                    hashCode = hashCode * 59 + this.IsRecycled.GetHashCode();
                if (this.KpoId != null)
                    hashCode = hashCode * 59 + this.KpoId.GetHashCode();
                if (this.KpokId != null)
                    hashCode = hashCode * 59 + this.KpokId.GetHashCode();
                if (this.IsEntryBasedOnKpo != null)
                    hashCode = hashCode * 59 + this.IsEntryBasedOnKpo.GetHashCode();
                if (this.IsEntryBasedOnKpok != null)
                    hashCode = hashCode * 59 + this.IsEntryBasedOnKpok.GetHashCode();
                if (this.KpoHandoverDate != null)
                    hashCode = hashCode * 59 + this.KpoHandoverDate.GetHashCode();
                if (this.HandedOverEquipmentMass != null)
                    hashCode = hashCode * 59 + this.HandedOverEquipmentMass.GetHashCode();
                if (this.RecycledEquipmentMass != null)
                    hashCode = hashCode * 59 + this.RecycledEquipmentMass.GetHashCode();
                if (this.UsedEquipmentMass != null)
                    hashCode = hashCode * 59 + this.UsedEquipmentMass.GetHashCode();
                if (this.AdditionalInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalInformation.GetHashCode();
                if (this.InstallationName != null)
                    hashCode = hashCode * 59 + this.InstallationName.GetHashCode();
                if (this.WasteProcessId != null)
                    hashCode = hashCode * 59 + this.WasteProcessId.GetHashCode();
                if (this.IsRecycling != null)
                    hashCode = hashCode * 59 + this.IsRecycling.GetHashCode();
                if (this.IsRecycledParts != null)
                    hashCode = hashCode * 59 + this.IsRecycledParts.GetHashCode();
                if (this.RecycledPartsEquipmentMass != null)
                    hashCode = hashCode * 59 + this.RecycledPartsEquipmentMass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
