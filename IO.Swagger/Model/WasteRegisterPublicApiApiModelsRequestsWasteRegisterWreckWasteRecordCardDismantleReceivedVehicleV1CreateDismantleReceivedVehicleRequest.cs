/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest :  IEquatable<WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest" /> class.
        /// </summary>
        /// <param name="receivedFromDismantleStation">Przyjęte do stacji demontażu od punktu zbierania pojazdów.</param>
        /// <param name="kepwId">Id karty ewidencji pojazdów wycofanych z eksploatacji.</param>
        /// <param name="receiveDate">Data przyjęcia.</param>
        /// <param name="vehiclesMass">Masa [Mg].</param>
        /// <param name="vehiclesCount">Liczba [szt.].</param>
        /// <param name="kpoId">Id karty przekazania odpadów.</param>
        /// <param name="receivedWithKpo">Na podstawie karty przekazania odpadów.</param>
        /// <param name="receivedFromAbroad">Przywóz do RP.</param>
        /// <param name="ownerNotRegistered">Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów.</param>
        /// <param name="countryId">Id kraju.</param>
        /// <param name="locality">Miejscowość.</param>
        /// <param name="street">Ulica.</param>
        /// <param name="buildingNumber">Numer budynku.</param>
        /// <param name="localNumber">Numer lokalu.</param>
        /// <param name="postalCode">Kod pocztowy.</param>
        /// <param name="additionalInfo">Informacje dodatkowe.</param>
        public WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest(bool? receivedFromDismantleStation = default(bool?), Guid? kepwId = default(Guid?), DateTime? receiveDate = default(DateTime?), double? vehiclesMass = default(double?), int? vehiclesCount = default(int?), Guid? kpoId = default(Guid?), bool? receivedWithKpo = default(bool?), bool? receivedFromAbroad = default(bool?), bool? ownerNotRegistered = default(bool?), int? countryId = default(int?), string locality = default(string), string street = default(string), string buildingNumber = default(string), string localNumber = default(string), string postalCode = default(string), string additionalInfo = default(string))
        {
            this.ReceivedFromDismantleStation = receivedFromDismantleStation;
            this.KepwId = kepwId;
            this.ReceiveDate = receiveDate;
            this.VehiclesMass = vehiclesMass;
            this.VehiclesCount = vehiclesCount;
            this.KpoId = kpoId;
            this.ReceivedWithKpo = receivedWithKpo;
            this.ReceivedFromAbroad = receivedFromAbroad;
            this.OwnerNotRegistered = ownerNotRegistered;
            this.CountryId = countryId;
            this.Locality = locality;
            this.Street = street;
            this.BuildingNumber = buildingNumber;
            this.LocalNumber = localNumber;
            this.PostalCode = postalCode;
            this.AdditionalInfo = additionalInfo;
        }
        
        /// <summary>
        /// Przyjęte do stacji demontażu od punktu zbierania pojazdów
        /// </summary>
        /// <value>Przyjęte do stacji demontażu od punktu zbierania pojazdów</value>
        [DataMember(Name="receivedFromDismantleStation", EmitDefaultValue=false)]
        public bool? ReceivedFromDismantleStation { get; set; }

        /// <summary>
        /// Id karty ewidencji pojazdów wycofanych z eksploatacji
        /// </summary>
        /// <value>Id karty ewidencji pojazdów wycofanych z eksploatacji</value>
        [DataMember(Name="kepwId", EmitDefaultValue=false)]
        public Guid? KepwId { get; set; }

        /// <summary>
        /// Data przyjęcia
        /// </summary>
        /// <value>Data przyjęcia</value>
        [DataMember(Name="receiveDate", EmitDefaultValue=false)]
        public DateTime? ReceiveDate { get; set; }

        /// <summary>
        /// Masa [Mg]
        /// </summary>
        /// <value>Masa [Mg]</value>
        [DataMember(Name="vehiclesMass", EmitDefaultValue=false)]
        public double? VehiclesMass { get; set; }

        /// <summary>
        /// Liczba [szt.]
        /// </summary>
        /// <value>Liczba [szt.]</value>
        [DataMember(Name="vehiclesCount", EmitDefaultValue=false)]
        public int? VehiclesCount { get; set; }

        /// <summary>
        /// Id karty przekazania odpadów
        /// </summary>
        /// <value>Id karty przekazania odpadów</value>
        [DataMember(Name="kpoId", EmitDefaultValue=false)]
        public Guid? KpoId { get; set; }

        /// <summary>
        /// Na podstawie karty przekazania odpadów
        /// </summary>
        /// <value>Na podstawie karty przekazania odpadów</value>
        [DataMember(Name="receivedWithKpo", EmitDefaultValue=false)]
        public bool? ReceivedWithKpo { get; set; }

        /// <summary>
        /// Przywóz do RP
        /// </summary>
        /// <value>Przywóz do RP</value>
        [DataMember(Name="receivedFromAbroad", EmitDefaultValue=false)]
        public bool? ReceivedFromAbroad { get; set; }

        /// <summary>
        /// Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów
        /// </summary>
        /// <value>Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów</value>
        [DataMember(Name="ownerNotRegistered", EmitDefaultValue=false)]
        public bool? OwnerNotRegistered { get; set; }

        /// <summary>
        /// Id kraju
        /// </summary>
        /// <value>Id kraju</value>
        [DataMember(Name="countryId", EmitDefaultValue=false)]
        public int? CountryId { get; set; }

        /// <summary>
        /// Miejscowość
        /// </summary>
        /// <value>Miejscowość</value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// Ulica
        /// </summary>
        /// <value>Ulica</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Numer budynku
        /// </summary>
        /// <value>Numer budynku</value>
        [DataMember(Name="buildingNumber", EmitDefaultValue=false)]
        public string BuildingNumber { get; set; }

        /// <summary>
        /// Numer lokalu
        /// </summary>
        /// <value>Numer lokalu</value>
        [DataMember(Name="localNumber", EmitDefaultValue=false)]
        public string LocalNumber { get; set; }

        /// <summary>
        /// Kod pocztowy
        /// </summary>
        /// <value>Kod pocztowy</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Informacje dodatkowe
        /// </summary>
        /// <value>Informacje dodatkowe</value>
        [DataMember(Name="additionalInfo", EmitDefaultValue=false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest {\n");
            sb.Append("  ReceivedFromDismantleStation: ").Append(ReceivedFromDismantleStation).Append("\n");
            sb.Append("  KepwId: ").Append(KepwId).Append("\n");
            sb.Append("  ReceiveDate: ").Append(ReceiveDate).Append("\n");
            sb.Append("  VehiclesMass: ").Append(VehiclesMass).Append("\n");
            sb.Append("  VehiclesCount: ").Append(VehiclesCount).Append("\n");
            sb.Append("  KpoId: ").Append(KpoId).Append("\n");
            sb.Append("  ReceivedWithKpo: ").Append(ReceivedWithKpo).Append("\n");
            sb.Append("  ReceivedFromAbroad: ").Append(ReceivedFromAbroad).Append("\n");
            sb.Append("  OwnerNotRegistered: ").Append(OwnerNotRegistered).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
            sb.Append("  LocalNumber: ").Append(LocalNumber).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ReceivedFromDismantleStation == input.ReceivedFromDismantleStation ||
                    (this.ReceivedFromDismantleStation != null &&
                    this.ReceivedFromDismantleStation.Equals(input.ReceivedFromDismantleStation))
                ) && 
                (
                    this.KepwId == input.KepwId ||
                    (this.KepwId != null &&
                    this.KepwId.Equals(input.KepwId))
                ) && 
                (
                    this.ReceiveDate == input.ReceiveDate ||
                    (this.ReceiveDate != null &&
                    this.ReceiveDate.Equals(input.ReceiveDate))
                ) && 
                (
                    this.VehiclesMass == input.VehiclesMass ||
                    (this.VehiclesMass != null &&
                    this.VehiclesMass.Equals(input.VehiclesMass))
                ) && 
                (
                    this.VehiclesCount == input.VehiclesCount ||
                    (this.VehiclesCount != null &&
                    this.VehiclesCount.Equals(input.VehiclesCount))
                ) && 
                (
                    this.KpoId == input.KpoId ||
                    (this.KpoId != null &&
                    this.KpoId.Equals(input.KpoId))
                ) && 
                (
                    this.ReceivedWithKpo == input.ReceivedWithKpo ||
                    (this.ReceivedWithKpo != null &&
                    this.ReceivedWithKpo.Equals(input.ReceivedWithKpo))
                ) && 
                (
                    this.ReceivedFromAbroad == input.ReceivedFromAbroad ||
                    (this.ReceivedFromAbroad != null &&
                    this.ReceivedFromAbroad.Equals(input.ReceivedFromAbroad))
                ) && 
                (
                    this.OwnerNotRegistered == input.OwnerNotRegistered ||
                    (this.OwnerNotRegistered != null &&
                    this.OwnerNotRegistered.Equals(input.OwnerNotRegistered))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.BuildingNumber == input.BuildingNumber ||
                    (this.BuildingNumber != null &&
                    this.BuildingNumber.Equals(input.BuildingNumber))
                ) && 
                (
                    this.LocalNumber == input.LocalNumber ||
                    (this.LocalNumber != null &&
                    this.LocalNumber.Equals(input.LocalNumber))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReceivedFromDismantleStation != null)
                    hashCode = hashCode * 59 + this.ReceivedFromDismantleStation.GetHashCode();
                if (this.KepwId != null)
                    hashCode = hashCode * 59 + this.KepwId.GetHashCode();
                if (this.ReceiveDate != null)
                    hashCode = hashCode * 59 + this.ReceiveDate.GetHashCode();
                if (this.VehiclesMass != null)
                    hashCode = hashCode * 59 + this.VehiclesMass.GetHashCode();
                if (this.VehiclesCount != null)
                    hashCode = hashCode * 59 + this.VehiclesCount.GetHashCode();
                if (this.KpoId != null)
                    hashCode = hashCode * 59 + this.KpoId.GetHashCode();
                if (this.ReceivedWithKpo != null)
                    hashCode = hashCode * 59 + this.ReceivedWithKpo.GetHashCode();
                if (this.ReceivedFromAbroad != null)
                    hashCode = hashCode * 59 + this.ReceivedFromAbroad.GetHashCode();
                if (this.OwnerNotRegistered != null)
                    hashCode = hashCode * 59 + this.OwnerNotRegistered.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.BuildingNumber != null)
                    hashCode = hashCode * 59 + this.BuildingNumber.GetHashCode();
                if (this.LocalNumber != null)
                    hashCode = hashCode * 59 + this.LocalNumber.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.AdditionalInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
