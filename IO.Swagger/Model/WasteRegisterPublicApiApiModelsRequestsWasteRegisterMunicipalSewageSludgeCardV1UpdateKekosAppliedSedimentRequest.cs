/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest :  IEquatable<WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest" /> class.
        /// </summary>
        /// <param name="kekosAppliedSedimentId">Id wpisu Zastosowane osady.</param>
        /// <param name="kekosResearchCardId">Id karty badań.</param>
        /// <param name="kpoId">Id karty przekazania odpadów.</param>
        /// <param name="appliedSludgeMass">Masa zastosowanych komunalnych osadów ściekowych.</param>
        /// <param name="appliedSludgeDryMatterMass">Sucha masa zastosowanych komunalnych osadów ściekowych.</param>
        /// <param name="sludgeApplicationDate">Data zastosowania komunalnych osadów ściekowych.</param>
        /// <param name="sludgeApplicationPlaceTerytPk">Miejsce stosowania komunalnych osadów ściekowych.</param>
        /// <param name="sludgeApplicationSurface">Powierzchnia zastosowania komunalnych osadów ściekowych [ha].</param>
        /// <param name="kekosBatchOfGeneratedSedimentId">Id wpisu Wytworzone osady.</param>
        /// <param name="isApplicationPurposeCrops">Cel: w rolnictwie.</param>
        /// <param name="isApplicationPurposePlants">Cel: do uprawy roślin przeznaczonych do produkcji kompostu.</param>
        /// <param name="isApplicationPurposeInediblePlants">Cel: do uprawy roślin nieprzeznaczonych do spożycia i produkcji pasz.</param>
        /// <param name="isApplicationPurposeReclamation">Cel: do rekultywacji terenów w tym gruntów na cele rolne.</param>
        /// <param name="isApplicationPurposeLandAdjustment">Cel: przy dostosowywaniu gruntów do określonych potrzeb wynikających z planów gospodarki odpadami(..).</param>
        /// <param name="isSoilGroupLight">Grupa glepy: lekka.</param>
        /// <param name="isSoilGroupMedium">Grupa glepy: średnia.</param>
        /// <param name="isSoilGroupHeavy">Grupa glepy: ciężka.</param>
        /// <param name="landSurfaceRulers">Informacje o miejscu stosowania osadów.</param>
        /// <param name="lotPrecincts">Lista numerów działek i obrębów geodezyjnych.</param>
        public WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest(Guid? kekosAppliedSedimentId = default(Guid?), Guid? kekosResearchCardId = default(Guid?), Guid? kpoId = default(Guid?), double? appliedSludgeMass = default(double?), double? appliedSludgeDryMatterMass = default(double?), DateTime? sludgeApplicationDate = default(DateTime?), string sludgeApplicationPlaceTerytPk = default(string), double? sludgeApplicationSurface = default(double?), Guid? kekosBatchOfGeneratedSedimentId = default(Guid?), bool? isApplicationPurposeCrops = default(bool?), bool? isApplicationPurposePlants = default(bool?), bool? isApplicationPurposeInediblePlants = default(bool?), bool? isApplicationPurposeReclamation = default(bool?), bool? isApplicationPurposeLandAdjustment = default(bool?), bool? isSoilGroupLight = default(bool?), bool? isSoilGroupMedium = default(bool?), bool? isSoilGroupHeavy = default(bool?), List<WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosLandSurfaceRulerDto> landSurfaceRulers = default(List<WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosLandSurfaceRulerDto>), List<WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateLotPrecinctDto> lotPrecincts = default(List<WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateLotPrecinctDto>))
        {
            this.KekosAppliedSedimentId = kekosAppliedSedimentId;
            this.KekosResearchCardId = kekosResearchCardId;
            this.KpoId = kpoId;
            this.AppliedSludgeMass = appliedSludgeMass;
            this.AppliedSludgeDryMatterMass = appliedSludgeDryMatterMass;
            this.SludgeApplicationDate = sludgeApplicationDate;
            this.SludgeApplicationPlaceTerytPk = sludgeApplicationPlaceTerytPk;
            this.SludgeApplicationSurface = sludgeApplicationSurface;
            this.KekosBatchOfGeneratedSedimentId = kekosBatchOfGeneratedSedimentId;
            this.IsApplicationPurposeCrops = isApplicationPurposeCrops;
            this.IsApplicationPurposePlants = isApplicationPurposePlants;
            this.IsApplicationPurposeInediblePlants = isApplicationPurposeInediblePlants;
            this.IsApplicationPurposeReclamation = isApplicationPurposeReclamation;
            this.IsApplicationPurposeLandAdjustment = isApplicationPurposeLandAdjustment;
            this.IsSoilGroupLight = isSoilGroupLight;
            this.IsSoilGroupMedium = isSoilGroupMedium;
            this.IsSoilGroupHeavy = isSoilGroupHeavy;
            this.LandSurfaceRulers = landSurfaceRulers;
            this.LotPrecincts = lotPrecincts;
        }
        
        /// <summary>
        /// Id wpisu Zastosowane osady
        /// </summary>
        /// <value>Id wpisu Zastosowane osady</value>
        [DataMember(Name="kekosAppliedSedimentId", EmitDefaultValue=false)]
        public Guid? KekosAppliedSedimentId { get; set; }

        /// <summary>
        /// Id karty badań
        /// </summary>
        /// <value>Id karty badań</value>
        [DataMember(Name="kekosResearchCardId", EmitDefaultValue=false)]
        public Guid? KekosResearchCardId { get; set; }

        /// <summary>
        /// Id karty przekazania odpadów
        /// </summary>
        /// <value>Id karty przekazania odpadów</value>
        [DataMember(Name="kpoId", EmitDefaultValue=false)]
        public Guid? KpoId { get; set; }

        /// <summary>
        /// Masa zastosowanych komunalnych osadów ściekowych
        /// </summary>
        /// <value>Masa zastosowanych komunalnych osadów ściekowych</value>
        [DataMember(Name="appliedSludgeMass", EmitDefaultValue=false)]
        public double? AppliedSludgeMass { get; set; }

        /// <summary>
        /// Sucha masa zastosowanych komunalnych osadów ściekowych
        /// </summary>
        /// <value>Sucha masa zastosowanych komunalnych osadów ściekowych</value>
        [DataMember(Name="appliedSludgeDryMatterMass", EmitDefaultValue=false)]
        public double? AppliedSludgeDryMatterMass { get; set; }

        /// <summary>
        /// Data zastosowania komunalnych osadów ściekowych
        /// </summary>
        /// <value>Data zastosowania komunalnych osadów ściekowych</value>
        [DataMember(Name="sludgeApplicationDate", EmitDefaultValue=false)]
        public DateTime? SludgeApplicationDate { get; set; }

        /// <summary>
        /// Miejsce stosowania komunalnych osadów ściekowych
        /// </summary>
        /// <value>Miejsce stosowania komunalnych osadów ściekowych</value>
        [DataMember(Name="sludgeApplicationPlaceTerytPk", EmitDefaultValue=false)]
        public string SludgeApplicationPlaceTerytPk { get; set; }

        /// <summary>
        /// Powierzchnia zastosowania komunalnych osadów ściekowych [ha]
        /// </summary>
        /// <value>Powierzchnia zastosowania komunalnych osadów ściekowych [ha]</value>
        [DataMember(Name="sludgeApplicationSurface", EmitDefaultValue=false)]
        public double? SludgeApplicationSurface { get; set; }

        /// <summary>
        /// Id wpisu Wytworzone osady
        /// </summary>
        /// <value>Id wpisu Wytworzone osady</value>
        [DataMember(Name="kekosBatchOfGeneratedSedimentId", EmitDefaultValue=false)]
        public Guid? KekosBatchOfGeneratedSedimentId { get; set; }

        /// <summary>
        /// Cel: w rolnictwie
        /// </summary>
        /// <value>Cel: w rolnictwie</value>
        [DataMember(Name="isApplicationPurposeCrops", EmitDefaultValue=false)]
        public bool? IsApplicationPurposeCrops { get; set; }

        /// <summary>
        /// Cel: do uprawy roślin przeznaczonych do produkcji kompostu
        /// </summary>
        /// <value>Cel: do uprawy roślin przeznaczonych do produkcji kompostu</value>
        [DataMember(Name="isApplicationPurposePlants", EmitDefaultValue=false)]
        public bool? IsApplicationPurposePlants { get; set; }

        /// <summary>
        /// Cel: do uprawy roślin nieprzeznaczonych do spożycia i produkcji pasz
        /// </summary>
        /// <value>Cel: do uprawy roślin nieprzeznaczonych do spożycia i produkcji pasz</value>
        [DataMember(Name="isApplicationPurposeInediblePlants", EmitDefaultValue=false)]
        public bool? IsApplicationPurposeInediblePlants { get; set; }

        /// <summary>
        /// Cel: do rekultywacji terenów w tym gruntów na cele rolne
        /// </summary>
        /// <value>Cel: do rekultywacji terenów w tym gruntów na cele rolne</value>
        [DataMember(Name="isApplicationPurposeReclamation", EmitDefaultValue=false)]
        public bool? IsApplicationPurposeReclamation { get; set; }

        /// <summary>
        /// Cel: przy dostosowywaniu gruntów do określonych potrzeb wynikających z planów gospodarki odpadami(..)
        /// </summary>
        /// <value>Cel: przy dostosowywaniu gruntów do określonych potrzeb wynikających z planów gospodarki odpadami(..)</value>
        [DataMember(Name="isApplicationPurposeLandAdjustment", EmitDefaultValue=false)]
        public bool? IsApplicationPurposeLandAdjustment { get; set; }

        /// <summary>
        /// Grupa glepy: lekka
        /// </summary>
        /// <value>Grupa glepy: lekka</value>
        [DataMember(Name="isSoilGroupLight", EmitDefaultValue=false)]
        public bool? IsSoilGroupLight { get; set; }

        /// <summary>
        /// Grupa glepy: średnia
        /// </summary>
        /// <value>Grupa glepy: średnia</value>
        [DataMember(Name="isSoilGroupMedium", EmitDefaultValue=false)]
        public bool? IsSoilGroupMedium { get; set; }

        /// <summary>
        /// Grupa glepy: ciężka
        /// </summary>
        /// <value>Grupa glepy: ciężka</value>
        [DataMember(Name="isSoilGroupHeavy", EmitDefaultValue=false)]
        public bool? IsSoilGroupHeavy { get; set; }

        /// <summary>
        /// Informacje o miejscu stosowania osadów
        /// </summary>
        /// <value>Informacje o miejscu stosowania osadów</value>
        [DataMember(Name="landSurfaceRulers", EmitDefaultValue=false)]
        public List<WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosLandSurfaceRulerDto> LandSurfaceRulers { get; set; }

        /// <summary>
        /// Lista numerów działek i obrębów geodezyjnych
        /// </summary>
        /// <value>Lista numerów działek i obrębów geodezyjnych</value>
        [DataMember(Name="lotPrecincts", EmitDefaultValue=false)]
        public List<WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateLotPrecinctDto> LotPrecincts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest {\n");
            sb.Append("  KekosAppliedSedimentId: ").Append(KekosAppliedSedimentId).Append("\n");
            sb.Append("  KekosResearchCardId: ").Append(KekosResearchCardId).Append("\n");
            sb.Append("  KpoId: ").Append(KpoId).Append("\n");
            sb.Append("  AppliedSludgeMass: ").Append(AppliedSludgeMass).Append("\n");
            sb.Append("  AppliedSludgeDryMatterMass: ").Append(AppliedSludgeDryMatterMass).Append("\n");
            sb.Append("  SludgeApplicationDate: ").Append(SludgeApplicationDate).Append("\n");
            sb.Append("  SludgeApplicationPlaceTerytPk: ").Append(SludgeApplicationPlaceTerytPk).Append("\n");
            sb.Append("  SludgeApplicationSurface: ").Append(SludgeApplicationSurface).Append("\n");
            sb.Append("  KekosBatchOfGeneratedSedimentId: ").Append(KekosBatchOfGeneratedSedimentId).Append("\n");
            sb.Append("  IsApplicationPurposeCrops: ").Append(IsApplicationPurposeCrops).Append("\n");
            sb.Append("  IsApplicationPurposePlants: ").Append(IsApplicationPurposePlants).Append("\n");
            sb.Append("  IsApplicationPurposeInediblePlants: ").Append(IsApplicationPurposeInediblePlants).Append("\n");
            sb.Append("  IsApplicationPurposeReclamation: ").Append(IsApplicationPurposeReclamation).Append("\n");
            sb.Append("  IsApplicationPurposeLandAdjustment: ").Append(IsApplicationPurposeLandAdjustment).Append("\n");
            sb.Append("  IsSoilGroupLight: ").Append(IsSoilGroupLight).Append("\n");
            sb.Append("  IsSoilGroupMedium: ").Append(IsSoilGroupMedium).Append("\n");
            sb.Append("  IsSoilGroupHeavy: ").Append(IsSoilGroupHeavy).Append("\n");
            sb.Append("  LandSurfaceRulers: ").Append(LandSurfaceRulers).Append("\n");
            sb.Append("  LotPrecincts: ").Append(LotPrecincts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KekosAppliedSedimentId == input.KekosAppliedSedimentId ||
                    (this.KekosAppliedSedimentId != null &&
                    this.KekosAppliedSedimentId.Equals(input.KekosAppliedSedimentId))
                ) && 
                (
                    this.KekosResearchCardId == input.KekosResearchCardId ||
                    (this.KekosResearchCardId != null &&
                    this.KekosResearchCardId.Equals(input.KekosResearchCardId))
                ) && 
                (
                    this.KpoId == input.KpoId ||
                    (this.KpoId != null &&
                    this.KpoId.Equals(input.KpoId))
                ) && 
                (
                    this.AppliedSludgeMass == input.AppliedSludgeMass ||
                    (this.AppliedSludgeMass != null &&
                    this.AppliedSludgeMass.Equals(input.AppliedSludgeMass))
                ) && 
                (
                    this.AppliedSludgeDryMatterMass == input.AppliedSludgeDryMatterMass ||
                    (this.AppliedSludgeDryMatterMass != null &&
                    this.AppliedSludgeDryMatterMass.Equals(input.AppliedSludgeDryMatterMass))
                ) && 
                (
                    this.SludgeApplicationDate == input.SludgeApplicationDate ||
                    (this.SludgeApplicationDate != null &&
                    this.SludgeApplicationDate.Equals(input.SludgeApplicationDate))
                ) && 
                (
                    this.SludgeApplicationPlaceTerytPk == input.SludgeApplicationPlaceTerytPk ||
                    (this.SludgeApplicationPlaceTerytPk != null &&
                    this.SludgeApplicationPlaceTerytPk.Equals(input.SludgeApplicationPlaceTerytPk))
                ) && 
                (
                    this.SludgeApplicationSurface == input.SludgeApplicationSurface ||
                    (this.SludgeApplicationSurface != null &&
                    this.SludgeApplicationSurface.Equals(input.SludgeApplicationSurface))
                ) && 
                (
                    this.KekosBatchOfGeneratedSedimentId == input.KekosBatchOfGeneratedSedimentId ||
                    (this.KekosBatchOfGeneratedSedimentId != null &&
                    this.KekosBatchOfGeneratedSedimentId.Equals(input.KekosBatchOfGeneratedSedimentId))
                ) && 
                (
                    this.IsApplicationPurposeCrops == input.IsApplicationPurposeCrops ||
                    (this.IsApplicationPurposeCrops != null &&
                    this.IsApplicationPurposeCrops.Equals(input.IsApplicationPurposeCrops))
                ) && 
                (
                    this.IsApplicationPurposePlants == input.IsApplicationPurposePlants ||
                    (this.IsApplicationPurposePlants != null &&
                    this.IsApplicationPurposePlants.Equals(input.IsApplicationPurposePlants))
                ) && 
                (
                    this.IsApplicationPurposeInediblePlants == input.IsApplicationPurposeInediblePlants ||
                    (this.IsApplicationPurposeInediblePlants != null &&
                    this.IsApplicationPurposeInediblePlants.Equals(input.IsApplicationPurposeInediblePlants))
                ) && 
                (
                    this.IsApplicationPurposeReclamation == input.IsApplicationPurposeReclamation ||
                    (this.IsApplicationPurposeReclamation != null &&
                    this.IsApplicationPurposeReclamation.Equals(input.IsApplicationPurposeReclamation))
                ) && 
                (
                    this.IsApplicationPurposeLandAdjustment == input.IsApplicationPurposeLandAdjustment ||
                    (this.IsApplicationPurposeLandAdjustment != null &&
                    this.IsApplicationPurposeLandAdjustment.Equals(input.IsApplicationPurposeLandAdjustment))
                ) && 
                (
                    this.IsSoilGroupLight == input.IsSoilGroupLight ||
                    (this.IsSoilGroupLight != null &&
                    this.IsSoilGroupLight.Equals(input.IsSoilGroupLight))
                ) && 
                (
                    this.IsSoilGroupMedium == input.IsSoilGroupMedium ||
                    (this.IsSoilGroupMedium != null &&
                    this.IsSoilGroupMedium.Equals(input.IsSoilGroupMedium))
                ) && 
                (
                    this.IsSoilGroupHeavy == input.IsSoilGroupHeavy ||
                    (this.IsSoilGroupHeavy != null &&
                    this.IsSoilGroupHeavy.Equals(input.IsSoilGroupHeavy))
                ) && 
                (
                    this.LandSurfaceRulers == input.LandSurfaceRulers ||
                    this.LandSurfaceRulers != null &&
                    this.LandSurfaceRulers.SequenceEqual(input.LandSurfaceRulers)
                ) && 
                (
                    this.LotPrecincts == input.LotPrecincts ||
                    this.LotPrecincts != null &&
                    this.LotPrecincts.SequenceEqual(input.LotPrecincts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KekosAppliedSedimentId != null)
                    hashCode = hashCode * 59 + this.KekosAppliedSedimentId.GetHashCode();
                if (this.KekosResearchCardId != null)
                    hashCode = hashCode * 59 + this.KekosResearchCardId.GetHashCode();
                if (this.KpoId != null)
                    hashCode = hashCode * 59 + this.KpoId.GetHashCode();
                if (this.AppliedSludgeMass != null)
                    hashCode = hashCode * 59 + this.AppliedSludgeMass.GetHashCode();
                if (this.AppliedSludgeDryMatterMass != null)
                    hashCode = hashCode * 59 + this.AppliedSludgeDryMatterMass.GetHashCode();
                if (this.SludgeApplicationDate != null)
                    hashCode = hashCode * 59 + this.SludgeApplicationDate.GetHashCode();
                if (this.SludgeApplicationPlaceTerytPk != null)
                    hashCode = hashCode * 59 + this.SludgeApplicationPlaceTerytPk.GetHashCode();
                if (this.SludgeApplicationSurface != null)
                    hashCode = hashCode * 59 + this.SludgeApplicationSurface.GetHashCode();
                if (this.KekosBatchOfGeneratedSedimentId != null)
                    hashCode = hashCode * 59 + this.KekosBatchOfGeneratedSedimentId.GetHashCode();
                if (this.IsApplicationPurposeCrops != null)
                    hashCode = hashCode * 59 + this.IsApplicationPurposeCrops.GetHashCode();
                if (this.IsApplicationPurposePlants != null)
                    hashCode = hashCode * 59 + this.IsApplicationPurposePlants.GetHashCode();
                if (this.IsApplicationPurposeInediblePlants != null)
                    hashCode = hashCode * 59 + this.IsApplicationPurposeInediblePlants.GetHashCode();
                if (this.IsApplicationPurposeReclamation != null)
                    hashCode = hashCode * 59 + this.IsApplicationPurposeReclamation.GetHashCode();
                if (this.IsApplicationPurposeLandAdjustment != null)
                    hashCode = hashCode * 59 + this.IsApplicationPurposeLandAdjustment.GetHashCode();
                if (this.IsSoilGroupLight != null)
                    hashCode = hashCode * 59 + this.IsSoilGroupLight.GetHashCode();
                if (this.IsSoilGroupMedium != null)
                    hashCode = hashCode * 59 + this.IsSoilGroupMedium.GetHashCode();
                if (this.IsSoilGroupHeavy != null)
                    hashCode = hashCode * 59 + this.IsSoilGroupHeavy.GetHashCode();
                if (this.LandSurfaceRulers != null)
                    hashCode = hashCode * 59 + this.LandSurfaceRulers.GetHashCode();
                if (this.LotPrecincts != null)
                    hashCode = hashCode * 59 + this.LotPrecincts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
