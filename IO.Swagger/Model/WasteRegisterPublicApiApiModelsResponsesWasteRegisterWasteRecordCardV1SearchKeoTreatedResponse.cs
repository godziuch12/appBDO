/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse" /> class.
        /// </summary>
        /// <param name="recycleSum">Łączna masa przetwarzanych odpadów - recykling [Mg].</param>
        /// <param name="preparationForReUseSum">Łączna masa masa przetwarzanych odpadów - przygotowanie do ponownego użycia [Mg].</param>
        /// <param name="fillingUpDisadvantagedAreasSum">Łączna masa masa przetwarzanych odpadów - wypełnianie terenów niekorzystnie przekształconych [Mg].</param>
        /// <param name="anotherRecoveryProcessSum">Łączna masa masa przetwarzanych odpadów - inny proces odzysku [Mg].</param>
        /// <param name="neutralizationSum">Łączna masa masa przetwarzanych odpadów - unieszkodliwienie [Mg].</param>
        /// <param name="keoDto">Karta keo.</param>
        /// <param name="treatedKeos">treatedKeos.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse(double? recycleSum = default(double?), double? preparationForReUseSum = default(double?), double? fillingUpDisadvantagedAreasSum = default(double?), double? anotherRecoveryProcessSum = default(double?), double? neutralizationSum = default(double?), WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoDto keoDto = default(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoDto), WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1PaginatedPageKeoTreatedListItem treatedKeos = default(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1PaginatedPageKeoTreatedListItem))
        {
            this.RecycleSum = recycleSum;
            this.PreparationForReUseSum = preparationForReUseSum;
            this.FillingUpDisadvantagedAreasSum = fillingUpDisadvantagedAreasSum;
            this.AnotherRecoveryProcessSum = anotherRecoveryProcessSum;
            this.NeutralizationSum = neutralizationSum;
            this.KeoDto = keoDto;
            this.TreatedKeos = treatedKeos;
        }
        
        /// <summary>
        /// Łączna masa przetwarzanych odpadów - recykling [Mg]
        /// </summary>
        /// <value>Łączna masa przetwarzanych odpadów - recykling [Mg]</value>
        [DataMember(Name="recycleSum", EmitDefaultValue=false)]
        public double? RecycleSum { get; set; }

        /// <summary>
        /// Łączna masa masa przetwarzanych odpadów - przygotowanie do ponownego użycia [Mg]
        /// </summary>
        /// <value>Łączna masa masa przetwarzanych odpadów - przygotowanie do ponownego użycia [Mg]</value>
        [DataMember(Name="preparationForReUseSum", EmitDefaultValue=false)]
        public double? PreparationForReUseSum { get; set; }

        /// <summary>
        /// Łączna masa masa przetwarzanych odpadów - wypełnianie terenów niekorzystnie przekształconych [Mg]
        /// </summary>
        /// <value>Łączna masa masa przetwarzanych odpadów - wypełnianie terenów niekorzystnie przekształconych [Mg]</value>
        [DataMember(Name="fillingUpDisadvantagedAreasSum", EmitDefaultValue=false)]
        public double? FillingUpDisadvantagedAreasSum { get; set; }

        /// <summary>
        /// Łączna masa masa przetwarzanych odpadów - inny proces odzysku [Mg]
        /// </summary>
        /// <value>Łączna masa masa przetwarzanych odpadów - inny proces odzysku [Mg]</value>
        [DataMember(Name="anotherRecoveryProcessSum", EmitDefaultValue=false)]
        public double? AnotherRecoveryProcessSum { get; set; }

        /// <summary>
        /// Łączna masa masa przetwarzanych odpadów - unieszkodliwienie [Mg]
        /// </summary>
        /// <value>Łączna masa masa przetwarzanych odpadów - unieszkodliwienie [Mg]</value>
        [DataMember(Name="neutralizationSum", EmitDefaultValue=false)]
        public double? NeutralizationSum { get; set; }

        /// <summary>
        /// Karta keo
        /// </summary>
        /// <value>Karta keo</value>
        [DataMember(Name="keoDto", EmitDefaultValue=false)]
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoDto KeoDto { get; set; }

        /// <summary>
        /// Gets or Sets TreatedKeos
        /// </summary>
        [DataMember(Name="treatedKeos", EmitDefaultValue=false)]
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1PaginatedPageKeoTreatedListItem TreatedKeos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse {\n");
            sb.Append("  RecycleSum: ").Append(RecycleSum).Append("\n");
            sb.Append("  PreparationForReUseSum: ").Append(PreparationForReUseSum).Append("\n");
            sb.Append("  FillingUpDisadvantagedAreasSum: ").Append(FillingUpDisadvantagedAreasSum).Append("\n");
            sb.Append("  AnotherRecoveryProcessSum: ").Append(AnotherRecoveryProcessSum).Append("\n");
            sb.Append("  NeutralizationSum: ").Append(NeutralizationSum).Append("\n");
            sb.Append("  KeoDto: ").Append(KeoDto).Append("\n");
            sb.Append("  TreatedKeos: ").Append(TreatedKeos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1SearchKeoTreatedResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecycleSum == input.RecycleSum ||
                    (this.RecycleSum != null &&
                    this.RecycleSum.Equals(input.RecycleSum))
                ) && 
                (
                    this.PreparationForReUseSum == input.PreparationForReUseSum ||
                    (this.PreparationForReUseSum != null &&
                    this.PreparationForReUseSum.Equals(input.PreparationForReUseSum))
                ) && 
                (
                    this.FillingUpDisadvantagedAreasSum == input.FillingUpDisadvantagedAreasSum ||
                    (this.FillingUpDisadvantagedAreasSum != null &&
                    this.FillingUpDisadvantagedAreasSum.Equals(input.FillingUpDisadvantagedAreasSum))
                ) && 
                (
                    this.AnotherRecoveryProcessSum == input.AnotherRecoveryProcessSum ||
                    (this.AnotherRecoveryProcessSum != null &&
                    this.AnotherRecoveryProcessSum.Equals(input.AnotherRecoveryProcessSum))
                ) && 
                (
                    this.NeutralizationSum == input.NeutralizationSum ||
                    (this.NeutralizationSum != null &&
                    this.NeutralizationSum.Equals(input.NeutralizationSum))
                ) && 
                (
                    this.KeoDto == input.KeoDto ||
                    (this.KeoDto != null &&
                    this.KeoDto.Equals(input.KeoDto))
                ) && 
                (
                    this.TreatedKeos == input.TreatedKeos ||
                    (this.TreatedKeos != null &&
                    this.TreatedKeos.Equals(input.TreatedKeos))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecycleSum != null)
                    hashCode = hashCode * 59 + this.RecycleSum.GetHashCode();
                if (this.PreparationForReUseSum != null)
                    hashCode = hashCode * 59 + this.PreparationForReUseSum.GetHashCode();
                if (this.FillingUpDisadvantagedAreasSum != null)
                    hashCode = hashCode * 59 + this.FillingUpDisadvantagedAreasSum.GetHashCode();
                if (this.AnotherRecoveryProcessSum != null)
                    hashCode = hashCode * 59 + this.AnotherRecoveryProcessSum.GetHashCode();
                if (this.NeutralizationSum != null)
                    hashCode = hashCode * 59 + this.NeutralizationSum.GetHashCode();
                if (this.KeoDto != null)
                    hashCode = hashCode * 59 + this.KeoDto.GetHashCode();
                if (this.TreatedKeos != null)
                    hashCode = hashCode * 59 + this.TreatedKeos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
