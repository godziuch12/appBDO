/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest :  IEquatable<WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest" /> class.
        /// </summary>
        /// <param name="kezsEquipmentGroupCardId">Id grupy zebranego sprzętu.</param>
        /// <param name="wasteCodeId">Id kodu odpadu.</param>
        /// <param name="kpoId">Id karty przekazania odpadów.</param>
        /// <param name="kpokId">Id Karty Przekazania Odpadów Komunalnych.</param>
        /// <param name="kpoHandoverDate">Data przekazania do innego zakładu przetwarzania.</param>
        /// <param name="wasteProcessId">Id procesu przetwarzania odpadów.</param>
        /// <param name="wasteMass">Masa odpadów.</param>
        /// <param name="countryId">Id kraju.</param>
        /// <param name="locality">Miejscowość.</param>
        /// <param name="street">Ulica.</param>
        /// <param name="postalCode">Kod pocztowy.</param>
        /// <param name="buildingNumber">Numer budynku.</param>
        /// <param name="localNumber">Numer lokalu.</param>
        /// <param name="wasteTransportStartDate">Data rozpoczęcia transportu.</param>
        /// <param name="isSalvageWasteProcess">Proces - odzysk.</param>
        /// <param name="isRecycling">Recykling.</param>
        /// <param name="isEntryBasedOnKpo">Wpis dokonywany na podstawie karty przekazania odpadów.</param>
        /// <param name="isEntryBasedOnKpok">Wpis dokonywany na podstawie karty przekazania odpadów komunalnych.</param>
        /// <param name="isExportFromRp">Wywóz poza RP.</param>
        /// <param name="isEquipmentOwnerExemptFromRecord">Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów.</param>
        /// <param name="isHandedOver">Przekazane do innego zakładu przetwarzania.</param>
        /// <param name="additionalInformation">Informacje dodatkowe.</param>
        /// <param name="transportType">Rodzaj środka transportu.</param>
        /// <param name="wasteCodeExtended">Kod ex.</param>
        /// <param name="wasteCodeExtendedDescription">Rodzaj odpadu ex.</param>
        /// <param name="hazardousWasteReclassification">Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne.</param>
        /// <param name="hazardousWasteReclassificationDescription">Rodzaj odpadu.</param>
        public WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest(Guid? kezsEquipmentGroupCardId = default(Guid?), int? wasteCodeId = default(int?), Guid? kpoId = default(Guid?), Guid? kpokId = default(Guid?), DateTime? kpoHandoverDate = default(DateTime?), int? wasteProcessId = default(int?), double? wasteMass = default(double?), int? countryId = default(int?), string locality = default(string), string street = default(string), string postalCode = default(string), string buildingNumber = default(string), string localNumber = default(string), DateTime? wasteTransportStartDate = default(DateTime?), bool? isSalvageWasteProcess = default(bool?), bool? isRecycling = default(bool?), bool? isEntryBasedOnKpo = default(bool?), bool? isEntryBasedOnKpok = default(bool?), bool? isExportFromRp = default(bool?), bool? isEquipmentOwnerExemptFromRecord = default(bool?), bool? isHandedOver = default(bool?), string additionalInformation = default(string), int? transportType = default(int?), bool? wasteCodeExtended = default(bool?), string wasteCodeExtendedDescription = default(string), bool? hazardousWasteReclassification = default(bool?), string hazardousWasteReclassificationDescription = default(string))
        {
            this.KezsEquipmentGroupCardId = kezsEquipmentGroupCardId;
            this.WasteCodeId = wasteCodeId;
            this.KpoId = kpoId;
            this.KpokId = kpokId;
            this.KpoHandoverDate = kpoHandoverDate;
            this.WasteProcessId = wasteProcessId;
            this.WasteMass = wasteMass;
            this.CountryId = countryId;
            this.Locality = locality;
            this.Street = street;
            this.PostalCode = postalCode;
            this.BuildingNumber = buildingNumber;
            this.LocalNumber = localNumber;
            this.WasteTransportStartDate = wasteTransportStartDate;
            this.IsSalvageWasteProcess = isSalvageWasteProcess;
            this.IsRecycling = isRecycling;
            this.IsEntryBasedOnKpo = isEntryBasedOnKpo;
            this.IsEntryBasedOnKpok = isEntryBasedOnKpok;
            this.IsExportFromRp = isExportFromRp;
            this.IsEquipmentOwnerExemptFromRecord = isEquipmentOwnerExemptFromRecord;
            this.IsHandedOver = isHandedOver;
            this.AdditionalInformation = additionalInformation;
            this.TransportType = transportType;
            this.WasteCodeExtended = wasteCodeExtended;
            this.WasteCodeExtendedDescription = wasteCodeExtendedDescription;
            this.HazardousWasteReclassification = hazardousWasteReclassification;
            this.HazardousWasteReclassificationDescription = hazardousWasteReclassificationDescription;
        }
        
        /// <summary>
        /// Id grupy zebranego sprzętu
        /// </summary>
        /// <value>Id grupy zebranego sprzętu</value>
        [DataMember(Name="kezsEquipmentGroupCardId", EmitDefaultValue=false)]
        public Guid? KezsEquipmentGroupCardId { get; set; }

        /// <summary>
        /// Id kodu odpadu
        /// </summary>
        /// <value>Id kodu odpadu</value>
        [DataMember(Name="wasteCodeId", EmitDefaultValue=false)]
        public int? WasteCodeId { get; set; }

        /// <summary>
        /// Id karty przekazania odpadów
        /// </summary>
        /// <value>Id karty przekazania odpadów</value>
        [DataMember(Name="kpoId", EmitDefaultValue=false)]
        public Guid? KpoId { get; set; }

        /// <summary>
        /// Id Karty Przekazania Odpadów Komunalnych
        /// </summary>
        /// <value>Id Karty Przekazania Odpadów Komunalnych</value>
        [DataMember(Name="kpokId", EmitDefaultValue=false)]
        public Guid? KpokId { get; set; }

        /// <summary>
        /// Data przekazania do innego zakładu przetwarzania
        /// </summary>
        /// <value>Data przekazania do innego zakładu przetwarzania</value>
        [DataMember(Name="kpoHandoverDate", EmitDefaultValue=false)]
        public DateTime? KpoHandoverDate { get; set; }

        /// <summary>
        /// Id procesu przetwarzania odpadów
        /// </summary>
        /// <value>Id procesu przetwarzania odpadów</value>
        [DataMember(Name="wasteProcessId", EmitDefaultValue=false)]
        public int? WasteProcessId { get; set; }

        /// <summary>
        /// Masa odpadów
        /// </summary>
        /// <value>Masa odpadów</value>
        [DataMember(Name="wasteMass", EmitDefaultValue=false)]
        public double? WasteMass { get; set; }

        /// <summary>
        /// Id kraju
        /// </summary>
        /// <value>Id kraju</value>
        [DataMember(Name="countryId", EmitDefaultValue=false)]
        public int? CountryId { get; set; }

        /// <summary>
        /// Miejscowość
        /// </summary>
        /// <value>Miejscowość</value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// Ulica
        /// </summary>
        /// <value>Ulica</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Kod pocztowy
        /// </summary>
        /// <value>Kod pocztowy</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Numer budynku
        /// </summary>
        /// <value>Numer budynku</value>
        [DataMember(Name="buildingNumber", EmitDefaultValue=false)]
        public string BuildingNumber { get; set; }

        /// <summary>
        /// Numer lokalu
        /// </summary>
        /// <value>Numer lokalu</value>
        [DataMember(Name="localNumber", EmitDefaultValue=false)]
        public string LocalNumber { get; set; }

        /// <summary>
        /// Data rozpoczęcia transportu
        /// </summary>
        /// <value>Data rozpoczęcia transportu</value>
        [DataMember(Name="wasteTransportStartDate", EmitDefaultValue=false)]
        public DateTime? WasteTransportStartDate { get; set; }

        /// <summary>
        /// Proces - odzysk
        /// </summary>
        /// <value>Proces - odzysk</value>
        [DataMember(Name="isSalvageWasteProcess", EmitDefaultValue=false)]
        public bool? IsSalvageWasteProcess { get; set; }

        /// <summary>
        /// Recykling
        /// </summary>
        /// <value>Recykling</value>
        [DataMember(Name="isRecycling", EmitDefaultValue=false)]
        public bool? IsRecycling { get; set; }

        /// <summary>
        /// Wpis dokonywany na podstawie karty przekazania odpadów
        /// </summary>
        /// <value>Wpis dokonywany na podstawie karty przekazania odpadów</value>
        [DataMember(Name="isEntryBasedOnKpo", EmitDefaultValue=false)]
        public bool? IsEntryBasedOnKpo { get; set; }

        /// <summary>
        /// Wpis dokonywany na podstawie karty przekazania odpadów komunalnych
        /// </summary>
        /// <value>Wpis dokonywany na podstawie karty przekazania odpadów komunalnych</value>
        [DataMember(Name="isEntryBasedOnKpok", EmitDefaultValue=false)]
        public bool? IsEntryBasedOnKpok { get; set; }

        /// <summary>
        /// Wywóz poza RP
        /// </summary>
        /// <value>Wywóz poza RP</value>
        [DataMember(Name="isExportFromRp", EmitDefaultValue=false)]
        public bool? IsExportFromRp { get; set; }

        /// <summary>
        /// Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów
        /// </summary>
        /// <value>Posiadacz odpadów zwolniony z obowiązku prowadzenia ewidencji odpadów</value>
        [DataMember(Name="isEquipmentOwnerExemptFromRecord", EmitDefaultValue=false)]
        public bool? IsEquipmentOwnerExemptFromRecord { get; set; }

        /// <summary>
        /// Przekazane do innego zakładu przetwarzania
        /// </summary>
        /// <value>Przekazane do innego zakładu przetwarzania</value>
        [DataMember(Name="isHandedOver", EmitDefaultValue=false)]
        public bool? IsHandedOver { get; set; }

        /// <summary>
        /// Informacje dodatkowe
        /// </summary>
        /// <value>Informacje dodatkowe</value>
        [DataMember(Name="additionalInformation", EmitDefaultValue=false)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// Rodzaj środka transportu
        /// </summary>
        /// <value>Rodzaj środka transportu</value>
        [DataMember(Name="transportType", EmitDefaultValue=false)]
        public int? TransportType { get; set; }

        /// <summary>
        /// Kod ex
        /// </summary>
        /// <value>Kod ex</value>
        [DataMember(Name="wasteCodeExtended", EmitDefaultValue=false)]
        public bool? WasteCodeExtended { get; set; }

        /// <summary>
        /// Rodzaj odpadu ex
        /// </summary>
        /// <value>Rodzaj odpadu ex</value>
        [DataMember(Name="wasteCodeExtendedDescription", EmitDefaultValue=false)]
        public string WasteCodeExtendedDescription { get; set; }

        /// <summary>
        /// Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne
        /// </summary>
        /// <value>Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne</value>
        [DataMember(Name="hazardousWasteReclassification", EmitDefaultValue=false)]
        public bool? HazardousWasteReclassification { get; set; }

        /// <summary>
        /// Rodzaj odpadu
        /// </summary>
        /// <value>Rodzaj odpadu</value>
        [DataMember(Name="hazardousWasteReclassificationDescription", EmitDefaultValue=false)]
        public string HazardousWasteReclassificationDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest {\n");
            sb.Append("  KezsEquipmentGroupCardId: ").Append(KezsEquipmentGroupCardId).Append("\n");
            sb.Append("  WasteCodeId: ").Append(WasteCodeId).Append("\n");
            sb.Append("  KpoId: ").Append(KpoId).Append("\n");
            sb.Append("  KpokId: ").Append(KpokId).Append("\n");
            sb.Append("  KpoHandoverDate: ").Append(KpoHandoverDate).Append("\n");
            sb.Append("  WasteProcessId: ").Append(WasteProcessId).Append("\n");
            sb.Append("  WasteMass: ").Append(WasteMass).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
            sb.Append("  LocalNumber: ").Append(LocalNumber).Append("\n");
            sb.Append("  WasteTransportStartDate: ").Append(WasteTransportStartDate).Append("\n");
            sb.Append("  IsSalvageWasteProcess: ").Append(IsSalvageWasteProcess).Append("\n");
            sb.Append("  IsRecycling: ").Append(IsRecycling).Append("\n");
            sb.Append("  IsEntryBasedOnKpo: ").Append(IsEntryBasedOnKpo).Append("\n");
            sb.Append("  IsEntryBasedOnKpok: ").Append(IsEntryBasedOnKpok).Append("\n");
            sb.Append("  IsExportFromRp: ").Append(IsExportFromRp).Append("\n");
            sb.Append("  IsEquipmentOwnerExemptFromRecord: ").Append(IsEquipmentOwnerExemptFromRecord).Append("\n");
            sb.Append("  IsHandedOver: ").Append(IsHandedOver).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  TransportType: ").Append(TransportType).Append("\n");
            sb.Append("  WasteCodeExtended: ").Append(WasteCodeExtended).Append("\n");
            sb.Append("  WasteCodeExtendedDescription: ").Append(WasteCodeExtendedDescription).Append("\n");
            sb.Append("  HazardousWasteReclassification: ").Append(HazardousWasteReclassification).Append("\n");
            sb.Append("  HazardousWasteReclassificationDescription: ").Append(HazardousWasteReclassificationDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KezsEquipmentGroupCardId == input.KezsEquipmentGroupCardId ||
                    (this.KezsEquipmentGroupCardId != null &&
                    this.KezsEquipmentGroupCardId.Equals(input.KezsEquipmentGroupCardId))
                ) && 
                (
                    this.WasteCodeId == input.WasteCodeId ||
                    (this.WasteCodeId != null &&
                    this.WasteCodeId.Equals(input.WasteCodeId))
                ) && 
                (
                    this.KpoId == input.KpoId ||
                    (this.KpoId != null &&
                    this.KpoId.Equals(input.KpoId))
                ) && 
                (
                    this.KpokId == input.KpokId ||
                    (this.KpokId != null &&
                    this.KpokId.Equals(input.KpokId))
                ) && 
                (
                    this.KpoHandoverDate == input.KpoHandoverDate ||
                    (this.KpoHandoverDate != null &&
                    this.KpoHandoverDate.Equals(input.KpoHandoverDate))
                ) && 
                (
                    this.WasteProcessId == input.WasteProcessId ||
                    (this.WasteProcessId != null &&
                    this.WasteProcessId.Equals(input.WasteProcessId))
                ) && 
                (
                    this.WasteMass == input.WasteMass ||
                    (this.WasteMass != null &&
                    this.WasteMass.Equals(input.WasteMass))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.BuildingNumber == input.BuildingNumber ||
                    (this.BuildingNumber != null &&
                    this.BuildingNumber.Equals(input.BuildingNumber))
                ) && 
                (
                    this.LocalNumber == input.LocalNumber ||
                    (this.LocalNumber != null &&
                    this.LocalNumber.Equals(input.LocalNumber))
                ) && 
                (
                    this.WasteTransportStartDate == input.WasteTransportStartDate ||
                    (this.WasteTransportStartDate != null &&
                    this.WasteTransportStartDate.Equals(input.WasteTransportStartDate))
                ) && 
                (
                    this.IsSalvageWasteProcess == input.IsSalvageWasteProcess ||
                    (this.IsSalvageWasteProcess != null &&
                    this.IsSalvageWasteProcess.Equals(input.IsSalvageWasteProcess))
                ) && 
                (
                    this.IsRecycling == input.IsRecycling ||
                    (this.IsRecycling != null &&
                    this.IsRecycling.Equals(input.IsRecycling))
                ) && 
                (
                    this.IsEntryBasedOnKpo == input.IsEntryBasedOnKpo ||
                    (this.IsEntryBasedOnKpo != null &&
                    this.IsEntryBasedOnKpo.Equals(input.IsEntryBasedOnKpo))
                ) && 
                (
                    this.IsEntryBasedOnKpok == input.IsEntryBasedOnKpok ||
                    (this.IsEntryBasedOnKpok != null &&
                    this.IsEntryBasedOnKpok.Equals(input.IsEntryBasedOnKpok))
                ) && 
                (
                    this.IsExportFromRp == input.IsExportFromRp ||
                    (this.IsExportFromRp != null &&
                    this.IsExportFromRp.Equals(input.IsExportFromRp))
                ) && 
                (
                    this.IsEquipmentOwnerExemptFromRecord == input.IsEquipmentOwnerExemptFromRecord ||
                    (this.IsEquipmentOwnerExemptFromRecord != null &&
                    this.IsEquipmentOwnerExemptFromRecord.Equals(input.IsEquipmentOwnerExemptFromRecord))
                ) && 
                (
                    this.IsHandedOver == input.IsHandedOver ||
                    (this.IsHandedOver != null &&
                    this.IsHandedOver.Equals(input.IsHandedOver))
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                ) && 
                (
                    this.TransportType == input.TransportType ||
                    (this.TransportType != null &&
                    this.TransportType.Equals(input.TransportType))
                ) && 
                (
                    this.WasteCodeExtended == input.WasteCodeExtended ||
                    (this.WasteCodeExtended != null &&
                    this.WasteCodeExtended.Equals(input.WasteCodeExtended))
                ) && 
                (
                    this.WasteCodeExtendedDescription == input.WasteCodeExtendedDescription ||
                    (this.WasteCodeExtendedDescription != null &&
                    this.WasteCodeExtendedDescription.Equals(input.WasteCodeExtendedDescription))
                ) && 
                (
                    this.HazardousWasteReclassification == input.HazardousWasteReclassification ||
                    (this.HazardousWasteReclassification != null &&
                    this.HazardousWasteReclassification.Equals(input.HazardousWasteReclassification))
                ) && 
                (
                    this.HazardousWasteReclassificationDescription == input.HazardousWasteReclassificationDescription ||
                    (this.HazardousWasteReclassificationDescription != null &&
                    this.HazardousWasteReclassificationDescription.Equals(input.HazardousWasteReclassificationDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KezsEquipmentGroupCardId != null)
                    hashCode = hashCode * 59 + this.KezsEquipmentGroupCardId.GetHashCode();
                if (this.WasteCodeId != null)
                    hashCode = hashCode * 59 + this.WasteCodeId.GetHashCode();
                if (this.KpoId != null)
                    hashCode = hashCode * 59 + this.KpoId.GetHashCode();
                if (this.KpokId != null)
                    hashCode = hashCode * 59 + this.KpokId.GetHashCode();
                if (this.KpoHandoverDate != null)
                    hashCode = hashCode * 59 + this.KpoHandoverDate.GetHashCode();
                if (this.WasteProcessId != null)
                    hashCode = hashCode * 59 + this.WasteProcessId.GetHashCode();
                if (this.WasteMass != null)
                    hashCode = hashCode * 59 + this.WasteMass.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.BuildingNumber != null)
                    hashCode = hashCode * 59 + this.BuildingNumber.GetHashCode();
                if (this.LocalNumber != null)
                    hashCode = hashCode * 59 + this.LocalNumber.GetHashCode();
                if (this.WasteTransportStartDate != null)
                    hashCode = hashCode * 59 + this.WasteTransportStartDate.GetHashCode();
                if (this.IsSalvageWasteProcess != null)
                    hashCode = hashCode * 59 + this.IsSalvageWasteProcess.GetHashCode();
                if (this.IsRecycling != null)
                    hashCode = hashCode * 59 + this.IsRecycling.GetHashCode();
                if (this.IsEntryBasedOnKpo != null)
                    hashCode = hashCode * 59 + this.IsEntryBasedOnKpo.GetHashCode();
                if (this.IsEntryBasedOnKpok != null)
                    hashCode = hashCode * 59 + this.IsEntryBasedOnKpok.GetHashCode();
                if (this.IsExportFromRp != null)
                    hashCode = hashCode * 59 + this.IsExportFromRp.GetHashCode();
                if (this.IsEquipmentOwnerExemptFromRecord != null)
                    hashCode = hashCode * 59 + this.IsEquipmentOwnerExemptFromRecord.GetHashCode();
                if (this.IsHandedOver != null)
                    hashCode = hashCode * 59 + this.IsHandedOver.GetHashCode();
                if (this.AdditionalInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalInformation.GetHashCode();
                if (this.TransportType != null)
                    hashCode = hashCode * 59 + this.TransportType.GetHashCode();
                if (this.WasteCodeExtended != null)
                    hashCode = hashCode * 59 + this.WasteCodeExtended.GetHashCode();
                if (this.WasteCodeExtendedDescription != null)
                    hashCode = hashCode * 59 + this.WasteCodeExtendedDescription.GetHashCode();
                if (this.HazardousWasteReclassification != null)
                    hashCode = hashCode * 59 + this.HazardousWasteReclassification.GetHashCode();
                if (this.HazardousWasteReclassificationDescription != null)
                    hashCode = hashCode * 59 + this.HazardousWasteReclassificationDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
