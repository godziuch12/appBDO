/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPage
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPage :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPage>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPage" /> class.
        /// </summary>
        /// <param name="cardNumber">Numer karty.</param>
        /// <param name="calendarYear">Rok kalendarzowy.</param>
        /// <param name="wasteCodeAndDescription">Kod i opis odpadu.</param>
        /// <param name="isWasteGenerating">W - wytwarzanie odpadów.</param>
        /// <param name="isWasteCollecting">Zb - zbieranie odpadów.</param>
        /// <param name="isSalvage">Od - odzysk.</param>
        /// <param name="isNeutralization">Un - unieszkodliwianie.</param>
        /// <param name="wasteCodeExtended">Kod ex.</param>
        /// <param name="wasteCodeExtendedDescription">Rodzaj odpadu ex.</param>
        /// <param name="hazardousWasteReclassification">Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne.</param>
        /// <param name="hazardousWasteReclassificationDescription">Rodzaj odpadu.</param>
        /// <param name="companyName">Nazwa lub imię i nazwisko.</param>
        /// <param name="companyAdress">Adres.</param>
        /// <param name="companyIdentificationNumber">Numer rejestrowy.</param>
        /// <param name="companyNip">NIP.</param>
        /// <param name="companyNipEu">NIP europejski.</param>
        /// <param name="eupName">Nazwa miejsca prowadzenia działalności.</param>
        /// <param name="eupIdentificationNumber">Numer miejsca prowadzenia działalności.</param>
        /// <param name="eupAdress">Adres miejsca prowadzenia działalności.</param>
        /// <param name="itemsList">Lista wpisów.</param>
        /// <param name="generatedWasteMassInstallationSum">Łączna masa wytworzonych odpadów w związku z eksploatacją instalacj.</param>
        /// <param name="generatedWasteMassExcludingInstallationSum">Łączna masa wytworzonych odpadów poza instalacją.</param>
        /// <param name="generatedWasteMassInstallationFromServicesSum">Łączna maasa wytworzonych odpadów w wyniku świadczenia usług i/lub działalności w zakresie obiektów liniowych.</param>
        /// <param name="generatedWasteMassExcludingInstallationFromServicesSum">Łączna maasa wytworzonych odpadów w wyniku świadczenia usług i/lub działalności w zakresie obiektów liniowych.</param>
        /// <param name="excavatedWasteMassSum">Łączna maasa odpadów wydobytych ze składowiska.</param>
        /// <param name="collectedWasteMassSum">Łączna masa odpadów przyjętych przez posiadacza odpadów.</param>
        /// <param name="treatedWasteMassSum">Łączna masa przetwarzanych odpadów.</param>
        /// <param name="treatedPcbContentSum">Łączna zawartość PCB w odpadzie [%].</param>
        /// <param name="forwardedCountryWasteMassSum">Łączna masa przekazanych odpadów w kraju.</param>
        /// <param name="forwardedAbroadWasteMassSum">Łączna masa odpadów przekazanych za granicę [Mg].</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPage(string cardNumber = default(string), string calendarYear = default(string), string wasteCodeAndDescription = default(string), bool? isWasteGenerating = default(bool?), bool? isWasteCollecting = default(bool?), bool? isSalvage = default(bool?), bool? isNeutralization = default(bool?), bool? wasteCodeExtended = default(bool?), string wasteCodeExtendedDescription = default(string), bool? hazardousWasteReclassification = default(bool?), string hazardousWasteReclassificationDescription = default(string), string companyName = default(string), string companyAdress = default(string), string companyIdentificationNumber = default(string), string companyNip = default(string), string companyNipEu = default(string), string eupName = default(string), string eupIdentificationNumber = default(string), string eupAdress = default(string), List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPageList> itemsList = default(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPageList>), double? generatedWasteMassInstallationSum = default(double?), double? generatedWasteMassExcludingInstallationSum = default(double?), double? generatedWasteMassInstallationFromServicesSum = default(double?), double? generatedWasteMassExcludingInstallationFromServicesSum = default(double?), double? excavatedWasteMassSum = default(double?), double? collectedWasteMassSum = default(double?), double? treatedWasteMassSum = default(double?), double? treatedPcbContentSum = default(double?), double? forwardedCountryWasteMassSum = default(double?), double? forwardedAbroadWasteMassSum = default(double?))
        {
            this.CardNumber = cardNumber;
            this.CalendarYear = calendarYear;
            this.WasteCodeAndDescription = wasteCodeAndDescription;
            this.IsWasteGenerating = isWasteGenerating;
            this.IsWasteCollecting = isWasteCollecting;
            this.IsSalvage = isSalvage;
            this.IsNeutralization = isNeutralization;
            this.WasteCodeExtended = wasteCodeExtended;
            this.WasteCodeExtendedDescription = wasteCodeExtendedDescription;
            this.HazardousWasteReclassification = hazardousWasteReclassification;
            this.HazardousWasteReclassificationDescription = hazardousWasteReclassificationDescription;
            this.CompanyName = companyName;
            this.CompanyAdress = companyAdress;
            this.CompanyIdentificationNumber = companyIdentificationNumber;
            this.CompanyNip = companyNip;
            this.CompanyNipEu = companyNipEu;
            this.EupName = eupName;
            this.EupIdentificationNumber = eupIdentificationNumber;
            this.EupAdress = eupAdress;
            this.ItemsList = itemsList;
            this.GeneratedWasteMassInstallationSum = generatedWasteMassInstallationSum;
            this.GeneratedWasteMassExcludingInstallationSum = generatedWasteMassExcludingInstallationSum;
            this.GeneratedWasteMassInstallationFromServicesSum = generatedWasteMassInstallationFromServicesSum;
            this.GeneratedWasteMassExcludingInstallationFromServicesSum = generatedWasteMassExcludingInstallationFromServicesSum;
            this.ExcavatedWasteMassSum = excavatedWasteMassSum;
            this.CollectedWasteMassSum = collectedWasteMassSum;
            this.TreatedWasteMassSum = treatedWasteMassSum;
            this.TreatedPcbContentSum = treatedPcbContentSum;
            this.ForwardedCountryWasteMassSum = forwardedCountryWasteMassSum;
            this.ForwardedAbroadWasteMassSum = forwardedAbroadWasteMassSum;
        }
        
        /// <summary>
        /// Numer karty
        /// </summary>
        /// <value>Numer karty</value>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Rok kalendarzowy
        /// </summary>
        /// <value>Rok kalendarzowy</value>
        [DataMember(Name="calendarYear", EmitDefaultValue=false)]
        public string CalendarYear { get; set; }

        /// <summary>
        /// Kod i opis odpadu
        /// </summary>
        /// <value>Kod i opis odpadu</value>
        [DataMember(Name="wasteCodeAndDescription", EmitDefaultValue=false)]
        public string WasteCodeAndDescription { get; set; }

        /// <summary>
        /// W - wytwarzanie odpadów
        /// </summary>
        /// <value>W - wytwarzanie odpadów</value>
        [DataMember(Name="isWasteGenerating", EmitDefaultValue=false)]
        public bool? IsWasteGenerating { get; set; }

        /// <summary>
        /// Zb - zbieranie odpadów
        /// </summary>
        /// <value>Zb - zbieranie odpadów</value>
        [DataMember(Name="isWasteCollecting", EmitDefaultValue=false)]
        public bool? IsWasteCollecting { get; set; }

        /// <summary>
        /// Od - odzysk
        /// </summary>
        /// <value>Od - odzysk</value>
        [DataMember(Name="isSalvage", EmitDefaultValue=false)]
        public bool? IsSalvage { get; set; }

        /// <summary>
        /// Un - unieszkodliwianie
        /// </summary>
        /// <value>Un - unieszkodliwianie</value>
        [DataMember(Name="isNeutralization", EmitDefaultValue=false)]
        public bool? IsNeutralization { get; set; }

        /// <summary>
        /// Kod ex
        /// </summary>
        /// <value>Kod ex</value>
        [DataMember(Name="wasteCodeExtended", EmitDefaultValue=false)]
        public bool? WasteCodeExtended { get; set; }

        /// <summary>
        /// Rodzaj odpadu ex
        /// </summary>
        /// <value>Rodzaj odpadu ex</value>
        [DataMember(Name="wasteCodeExtendedDescription", EmitDefaultValue=false)]
        public string WasteCodeExtendedDescription { get; set; }

        /// <summary>
        /// Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne
        /// </summary>
        /// <value>Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne</value>
        [DataMember(Name="hazardousWasteReclassification", EmitDefaultValue=false)]
        public bool? HazardousWasteReclassification { get; set; }

        /// <summary>
        /// Rodzaj odpadu
        /// </summary>
        /// <value>Rodzaj odpadu</value>
        [DataMember(Name="hazardousWasteReclassificationDescription", EmitDefaultValue=false)]
        public string HazardousWasteReclassificationDescription { get; set; }

        /// <summary>
        /// Nazwa lub imię i nazwisko
        /// </summary>
        /// <value>Nazwa lub imię i nazwisko</value>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Adres
        /// </summary>
        /// <value>Adres</value>
        [DataMember(Name="companyAdress", EmitDefaultValue=false)]
        public string CompanyAdress { get; set; }

        /// <summary>
        /// Numer rejestrowy
        /// </summary>
        /// <value>Numer rejestrowy</value>
        [DataMember(Name="companyIdentificationNumber", EmitDefaultValue=false)]
        public string CompanyIdentificationNumber { get; set; }

        /// <summary>
        /// NIP
        /// </summary>
        /// <value>NIP</value>
        [DataMember(Name="companyNip", EmitDefaultValue=false)]
        public string CompanyNip { get; set; }

        /// <summary>
        /// NIP europejski
        /// </summary>
        /// <value>NIP europejski</value>
        [DataMember(Name="companyNipEu", EmitDefaultValue=false)]
        public string CompanyNipEu { get; set; }

        /// <summary>
        /// Nazwa miejsca prowadzenia działalności
        /// </summary>
        /// <value>Nazwa miejsca prowadzenia działalności</value>
        [DataMember(Name="eupName", EmitDefaultValue=false)]
        public string EupName { get; set; }

        /// <summary>
        /// Numer miejsca prowadzenia działalności
        /// </summary>
        /// <value>Numer miejsca prowadzenia działalności</value>
        [DataMember(Name="eupIdentificationNumber", EmitDefaultValue=false)]
        public string EupIdentificationNumber { get; set; }

        /// <summary>
        /// Adres miejsca prowadzenia działalności
        /// </summary>
        /// <value>Adres miejsca prowadzenia działalności</value>
        [DataMember(Name="eupAdress", EmitDefaultValue=false)]
        public string EupAdress { get; set; }

        /// <summary>
        /// Lista wpisów
        /// </summary>
        /// <value>Lista wpisów</value>
        [DataMember(Name="itemsList", EmitDefaultValue=false)]
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPageList> ItemsList { get; set; }

        /// <summary>
        /// Łączna masa wytworzonych odpadów w związku z eksploatacją instalacj
        /// </summary>
        /// <value>Łączna masa wytworzonych odpadów w związku z eksploatacją instalacj</value>
        [DataMember(Name="generatedWasteMassInstallationSum", EmitDefaultValue=false)]
        public double? GeneratedWasteMassInstallationSum { get; set; }

        /// <summary>
        /// Łączna masa wytworzonych odpadów poza instalacją
        /// </summary>
        /// <value>Łączna masa wytworzonych odpadów poza instalacją</value>
        [DataMember(Name="generatedWasteMassExcludingInstallationSum", EmitDefaultValue=false)]
        public double? GeneratedWasteMassExcludingInstallationSum { get; set; }

        /// <summary>
        /// Łączna maasa wytworzonych odpadów w wyniku świadczenia usług i/lub działalności w zakresie obiektów liniowych
        /// </summary>
        /// <value>Łączna maasa wytworzonych odpadów w wyniku świadczenia usług i/lub działalności w zakresie obiektów liniowych</value>
        [DataMember(Name="generatedWasteMassInstallationFromServicesSum", EmitDefaultValue=false)]
        public double? GeneratedWasteMassInstallationFromServicesSum { get; set; }

        /// <summary>
        /// Łączna maasa wytworzonych odpadów w wyniku świadczenia usług i/lub działalności w zakresie obiektów liniowych
        /// </summary>
        /// <value>Łączna maasa wytworzonych odpadów w wyniku świadczenia usług i/lub działalności w zakresie obiektów liniowych</value>
        [DataMember(Name="generatedWasteMassExcludingInstallationFromServicesSum", EmitDefaultValue=false)]
        public double? GeneratedWasteMassExcludingInstallationFromServicesSum { get; set; }

        /// <summary>
        /// Łączna maasa odpadów wydobytych ze składowiska
        /// </summary>
        /// <value>Łączna maasa odpadów wydobytych ze składowiska</value>
        [DataMember(Name="excavatedWasteMassSum", EmitDefaultValue=false)]
        public double? ExcavatedWasteMassSum { get; set; }

        /// <summary>
        /// Łączna masa odpadów przyjętych przez posiadacza odpadów
        /// </summary>
        /// <value>Łączna masa odpadów przyjętych przez posiadacza odpadów</value>
        [DataMember(Name="collectedWasteMassSum", EmitDefaultValue=false)]
        public double? CollectedWasteMassSum { get; set; }

        /// <summary>
        /// Łączna masa przetwarzanych odpadów
        /// </summary>
        /// <value>Łączna masa przetwarzanych odpadów</value>
        [DataMember(Name="treatedWasteMassSum", EmitDefaultValue=false)]
        public double? TreatedWasteMassSum { get; set; }

        /// <summary>
        /// Łączna zawartość PCB w odpadzie [%]
        /// </summary>
        /// <value>Łączna zawartość PCB w odpadzie [%]</value>
        [DataMember(Name="treatedPcbContentSum", EmitDefaultValue=false)]
        public double? TreatedPcbContentSum { get; set; }

        /// <summary>
        /// Łączna masa przekazanych odpadów w kraju
        /// </summary>
        /// <value>Łączna masa przekazanych odpadów w kraju</value>
        [DataMember(Name="forwardedCountryWasteMassSum", EmitDefaultValue=false)]
        public double? ForwardedCountryWasteMassSum { get; set; }

        /// <summary>
        /// Łączna masa odpadów przekazanych za granicę [Mg]
        /// </summary>
        /// <value>Łączna masa odpadów przekazanych za granicę [Mg]</value>
        [DataMember(Name="forwardedAbroadWasteMassSum", EmitDefaultValue=false)]
        public double? ForwardedAbroadWasteMassSum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPage {\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CalendarYear: ").Append(CalendarYear).Append("\n");
            sb.Append("  WasteCodeAndDescription: ").Append(WasteCodeAndDescription).Append("\n");
            sb.Append("  IsWasteGenerating: ").Append(IsWasteGenerating).Append("\n");
            sb.Append("  IsWasteCollecting: ").Append(IsWasteCollecting).Append("\n");
            sb.Append("  IsSalvage: ").Append(IsSalvage).Append("\n");
            sb.Append("  IsNeutralization: ").Append(IsNeutralization).Append("\n");
            sb.Append("  WasteCodeExtended: ").Append(WasteCodeExtended).Append("\n");
            sb.Append("  WasteCodeExtendedDescription: ").Append(WasteCodeExtendedDescription).Append("\n");
            sb.Append("  HazardousWasteReclassification: ").Append(HazardousWasteReclassification).Append("\n");
            sb.Append("  HazardousWasteReclassificationDescription: ").Append(HazardousWasteReclassificationDescription).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyAdress: ").Append(CompanyAdress).Append("\n");
            sb.Append("  CompanyIdentificationNumber: ").Append(CompanyIdentificationNumber).Append("\n");
            sb.Append("  CompanyNip: ").Append(CompanyNip).Append("\n");
            sb.Append("  CompanyNipEu: ").Append(CompanyNipEu).Append("\n");
            sb.Append("  EupName: ").Append(EupName).Append("\n");
            sb.Append("  EupIdentificationNumber: ").Append(EupIdentificationNumber).Append("\n");
            sb.Append("  EupAdress: ").Append(EupAdress).Append("\n");
            sb.Append("  ItemsList: ").Append(ItemsList).Append("\n");
            sb.Append("  GeneratedWasteMassInstallationSum: ").Append(GeneratedWasteMassInstallationSum).Append("\n");
            sb.Append("  GeneratedWasteMassExcludingInstallationSum: ").Append(GeneratedWasteMassExcludingInstallationSum).Append("\n");
            sb.Append("  GeneratedWasteMassInstallationFromServicesSum: ").Append(GeneratedWasteMassInstallationFromServicesSum).Append("\n");
            sb.Append("  GeneratedWasteMassExcludingInstallationFromServicesSum: ").Append(GeneratedWasteMassExcludingInstallationFromServicesSum).Append("\n");
            sb.Append("  ExcavatedWasteMassSum: ").Append(ExcavatedWasteMassSum).Append("\n");
            sb.Append("  CollectedWasteMassSum: ").Append(CollectedWasteMassSum).Append("\n");
            sb.Append("  TreatedWasteMassSum: ").Append(TreatedWasteMassSum).Append("\n");
            sb.Append("  TreatedPcbContentSum: ").Append(TreatedPcbContentSum).Append("\n");
            sb.Append("  ForwardedCountryWasteMassSum: ").Append(ForwardedCountryWasteMassSum).Append("\n");
            sb.Append("  ForwardedAbroadWasteMassSum: ").Append(ForwardedAbroadWasteMassSum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPage);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPage instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteRecordCardV1KeoPrintingPage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.CalendarYear == input.CalendarYear ||
                    (this.CalendarYear != null &&
                    this.CalendarYear.Equals(input.CalendarYear))
                ) && 
                (
                    this.WasteCodeAndDescription == input.WasteCodeAndDescription ||
                    (this.WasteCodeAndDescription != null &&
                    this.WasteCodeAndDescription.Equals(input.WasteCodeAndDescription))
                ) && 
                (
                    this.IsWasteGenerating == input.IsWasteGenerating ||
                    (this.IsWasteGenerating != null &&
                    this.IsWasteGenerating.Equals(input.IsWasteGenerating))
                ) && 
                (
                    this.IsWasteCollecting == input.IsWasteCollecting ||
                    (this.IsWasteCollecting != null &&
                    this.IsWasteCollecting.Equals(input.IsWasteCollecting))
                ) && 
                (
                    this.IsSalvage == input.IsSalvage ||
                    (this.IsSalvage != null &&
                    this.IsSalvage.Equals(input.IsSalvage))
                ) && 
                (
                    this.IsNeutralization == input.IsNeutralization ||
                    (this.IsNeutralization != null &&
                    this.IsNeutralization.Equals(input.IsNeutralization))
                ) && 
                (
                    this.WasteCodeExtended == input.WasteCodeExtended ||
                    (this.WasteCodeExtended != null &&
                    this.WasteCodeExtended.Equals(input.WasteCodeExtended))
                ) && 
                (
                    this.WasteCodeExtendedDescription == input.WasteCodeExtendedDescription ||
                    (this.WasteCodeExtendedDescription != null &&
                    this.WasteCodeExtendedDescription.Equals(input.WasteCodeExtendedDescription))
                ) && 
                (
                    this.HazardousWasteReclassification == input.HazardousWasteReclassification ||
                    (this.HazardousWasteReclassification != null &&
                    this.HazardousWasteReclassification.Equals(input.HazardousWasteReclassification))
                ) && 
                (
                    this.HazardousWasteReclassificationDescription == input.HazardousWasteReclassificationDescription ||
                    (this.HazardousWasteReclassificationDescription != null &&
                    this.HazardousWasteReclassificationDescription.Equals(input.HazardousWasteReclassificationDescription))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.CompanyAdress == input.CompanyAdress ||
                    (this.CompanyAdress != null &&
                    this.CompanyAdress.Equals(input.CompanyAdress))
                ) && 
                (
                    this.CompanyIdentificationNumber == input.CompanyIdentificationNumber ||
                    (this.CompanyIdentificationNumber != null &&
                    this.CompanyIdentificationNumber.Equals(input.CompanyIdentificationNumber))
                ) && 
                (
                    this.CompanyNip == input.CompanyNip ||
                    (this.CompanyNip != null &&
                    this.CompanyNip.Equals(input.CompanyNip))
                ) && 
                (
                    this.CompanyNipEu == input.CompanyNipEu ||
                    (this.CompanyNipEu != null &&
                    this.CompanyNipEu.Equals(input.CompanyNipEu))
                ) && 
                (
                    this.EupName == input.EupName ||
                    (this.EupName != null &&
                    this.EupName.Equals(input.EupName))
                ) && 
                (
                    this.EupIdentificationNumber == input.EupIdentificationNumber ||
                    (this.EupIdentificationNumber != null &&
                    this.EupIdentificationNumber.Equals(input.EupIdentificationNumber))
                ) && 
                (
                    this.EupAdress == input.EupAdress ||
                    (this.EupAdress != null &&
                    this.EupAdress.Equals(input.EupAdress))
                ) && 
                (
                    this.ItemsList == input.ItemsList ||
                    this.ItemsList != null &&
                    this.ItemsList.SequenceEqual(input.ItemsList)
                ) && 
                (
                    this.GeneratedWasteMassInstallationSum == input.GeneratedWasteMassInstallationSum ||
                    (this.GeneratedWasteMassInstallationSum != null &&
                    this.GeneratedWasteMassInstallationSum.Equals(input.GeneratedWasteMassInstallationSum))
                ) && 
                (
                    this.GeneratedWasteMassExcludingInstallationSum == input.GeneratedWasteMassExcludingInstallationSum ||
                    (this.GeneratedWasteMassExcludingInstallationSum != null &&
                    this.GeneratedWasteMassExcludingInstallationSum.Equals(input.GeneratedWasteMassExcludingInstallationSum))
                ) && 
                (
                    this.GeneratedWasteMassInstallationFromServicesSum == input.GeneratedWasteMassInstallationFromServicesSum ||
                    (this.GeneratedWasteMassInstallationFromServicesSum != null &&
                    this.GeneratedWasteMassInstallationFromServicesSum.Equals(input.GeneratedWasteMassInstallationFromServicesSum))
                ) && 
                (
                    this.GeneratedWasteMassExcludingInstallationFromServicesSum == input.GeneratedWasteMassExcludingInstallationFromServicesSum ||
                    (this.GeneratedWasteMassExcludingInstallationFromServicesSum != null &&
                    this.GeneratedWasteMassExcludingInstallationFromServicesSum.Equals(input.GeneratedWasteMassExcludingInstallationFromServicesSum))
                ) && 
                (
                    this.ExcavatedWasteMassSum == input.ExcavatedWasteMassSum ||
                    (this.ExcavatedWasteMassSum != null &&
                    this.ExcavatedWasteMassSum.Equals(input.ExcavatedWasteMassSum))
                ) && 
                (
                    this.CollectedWasteMassSum == input.CollectedWasteMassSum ||
                    (this.CollectedWasteMassSum != null &&
                    this.CollectedWasteMassSum.Equals(input.CollectedWasteMassSum))
                ) && 
                (
                    this.TreatedWasteMassSum == input.TreatedWasteMassSum ||
                    (this.TreatedWasteMassSum != null &&
                    this.TreatedWasteMassSum.Equals(input.TreatedWasteMassSum))
                ) && 
                (
                    this.TreatedPcbContentSum == input.TreatedPcbContentSum ||
                    (this.TreatedPcbContentSum != null &&
                    this.TreatedPcbContentSum.Equals(input.TreatedPcbContentSum))
                ) && 
                (
                    this.ForwardedCountryWasteMassSum == input.ForwardedCountryWasteMassSum ||
                    (this.ForwardedCountryWasteMassSum != null &&
                    this.ForwardedCountryWasteMassSum.Equals(input.ForwardedCountryWasteMassSum))
                ) && 
                (
                    this.ForwardedAbroadWasteMassSum == input.ForwardedAbroadWasteMassSum ||
                    (this.ForwardedAbroadWasteMassSum != null &&
                    this.ForwardedAbroadWasteMassSum.Equals(input.ForwardedAbroadWasteMassSum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                if (this.CalendarYear != null)
                    hashCode = hashCode * 59 + this.CalendarYear.GetHashCode();
                if (this.WasteCodeAndDescription != null)
                    hashCode = hashCode * 59 + this.WasteCodeAndDescription.GetHashCode();
                if (this.IsWasteGenerating != null)
                    hashCode = hashCode * 59 + this.IsWasteGenerating.GetHashCode();
                if (this.IsWasteCollecting != null)
                    hashCode = hashCode * 59 + this.IsWasteCollecting.GetHashCode();
                if (this.IsSalvage != null)
                    hashCode = hashCode * 59 + this.IsSalvage.GetHashCode();
                if (this.IsNeutralization != null)
                    hashCode = hashCode * 59 + this.IsNeutralization.GetHashCode();
                if (this.WasteCodeExtended != null)
                    hashCode = hashCode * 59 + this.WasteCodeExtended.GetHashCode();
                if (this.WasteCodeExtendedDescription != null)
                    hashCode = hashCode * 59 + this.WasteCodeExtendedDescription.GetHashCode();
                if (this.HazardousWasteReclassification != null)
                    hashCode = hashCode * 59 + this.HazardousWasteReclassification.GetHashCode();
                if (this.HazardousWasteReclassificationDescription != null)
                    hashCode = hashCode * 59 + this.HazardousWasteReclassificationDescription.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyAdress != null)
                    hashCode = hashCode * 59 + this.CompanyAdress.GetHashCode();
                if (this.CompanyIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.CompanyIdentificationNumber.GetHashCode();
                if (this.CompanyNip != null)
                    hashCode = hashCode * 59 + this.CompanyNip.GetHashCode();
                if (this.CompanyNipEu != null)
                    hashCode = hashCode * 59 + this.CompanyNipEu.GetHashCode();
                if (this.EupName != null)
                    hashCode = hashCode * 59 + this.EupName.GetHashCode();
                if (this.EupIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.EupIdentificationNumber.GetHashCode();
                if (this.EupAdress != null)
                    hashCode = hashCode * 59 + this.EupAdress.GetHashCode();
                if (this.ItemsList != null)
                    hashCode = hashCode * 59 + this.ItemsList.GetHashCode();
                if (this.GeneratedWasteMassInstallationSum != null)
                    hashCode = hashCode * 59 + this.GeneratedWasteMassInstallationSum.GetHashCode();
                if (this.GeneratedWasteMassExcludingInstallationSum != null)
                    hashCode = hashCode * 59 + this.GeneratedWasteMassExcludingInstallationSum.GetHashCode();
                if (this.GeneratedWasteMassInstallationFromServicesSum != null)
                    hashCode = hashCode * 59 + this.GeneratedWasteMassInstallationFromServicesSum.GetHashCode();
                if (this.GeneratedWasteMassExcludingInstallationFromServicesSum != null)
                    hashCode = hashCode * 59 + this.GeneratedWasteMassExcludingInstallationFromServicesSum.GetHashCode();
                if (this.ExcavatedWasteMassSum != null)
                    hashCode = hashCode * 59 + this.ExcavatedWasteMassSum.GetHashCode();
                if (this.CollectedWasteMassSum != null)
                    hashCode = hashCode * 59 + this.CollectedWasteMassSum.GetHashCode();
                if (this.TreatedWasteMassSum != null)
                    hashCode = hashCode * 59 + this.TreatedWasteMassSum.GetHashCode();
                if (this.TreatedPcbContentSum != null)
                    hashCode = hashCode * 59 + this.TreatedPcbContentSum.GetHashCode();
                if (this.ForwardedCountryWasteMassSum != null)
                    hashCode = hashCode * 59 + this.ForwardedCountryWasteMassSum.GetHashCode();
                if (this.ForwardedAbroadWasteMassSum != null)
                    hashCode = hashCode * 59 + this.ForwardedAbroadWasteMassSum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
