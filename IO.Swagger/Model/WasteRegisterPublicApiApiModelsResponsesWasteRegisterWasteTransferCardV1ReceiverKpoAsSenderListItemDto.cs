/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto" /> class.
        /// </summary>
        /// <param name="kpoId">Id karty przekazania odpadów.</param>
        /// <param name="receiverIdentificationNumber">Numer rejestrowy przejmującego.</param>
        /// <param name="receiverCompanyName">Nazwa podmiotu przejmującego.</param>
        /// <param name="receiverNip">NIP przejmującego.</param>
        /// <param name="cardNumber">Numer Karty Przekazania Odpadów.</param>
        /// <param name="receiveConfirmationTime">Data otrzymania potwierdzenia.</param>
        /// <param name="addressHtml">Adres.</param>
        /// <param name="terytPk">Numer TERYT.</param>
        /// <param name="buildingNumber">Numer budynku.</param>
        /// <param name="localNumber">Numer lokalu.</param>
        /// <param name="postalCode">Kod pocztowy.</param>
        /// <param name="hasNoBuildingNumber">Nie podano numeru budynku.</param>
        /// <param name="foreignCompany">Podmiot zagraniczny.</param>
        /// <param name="countryId">Id kraju.</param>
        /// <param name="countryName">Kraj.</param>
        /// <param name="locality">Miejscowość.</param>
        /// <param name="street">Ulica.</param>
        /// <param name="wasteMass">Masa odpadów.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto(Guid? kpoId = default(Guid?), string receiverIdentificationNumber = default(string), string receiverCompanyName = default(string), string receiverNip = default(string), string cardNumber = default(string), DateTime? receiveConfirmationTime = default(DateTime?), string addressHtml = default(string), string terytPk = default(string), string buildingNumber = default(string), string localNumber = default(string), string postalCode = default(string), bool? hasNoBuildingNumber = default(bool?), bool? foreignCompany = default(bool?), int? countryId = default(int?), string countryName = default(string), string locality = default(string), string street = default(string), double? wasteMass = default(double?))
        {
            this.KpoId = kpoId;
            this.ReceiverIdentificationNumber = receiverIdentificationNumber;
            this.ReceiverCompanyName = receiverCompanyName;
            this.ReceiverNip = receiverNip;
            this.CardNumber = cardNumber;
            this.ReceiveConfirmationTime = receiveConfirmationTime;
            this.AddressHtml = addressHtml;
            this.TerytPk = terytPk;
            this.BuildingNumber = buildingNumber;
            this.LocalNumber = localNumber;
            this.PostalCode = postalCode;
            this.HasNoBuildingNumber = hasNoBuildingNumber;
            this.ForeignCompany = foreignCompany;
            this.CountryId = countryId;
            this.CountryName = countryName;
            this.Locality = locality;
            this.Street = street;
            this.WasteMass = wasteMass;
        }
        
        /// <summary>
        /// Id karty przekazania odpadów
        /// </summary>
        /// <value>Id karty przekazania odpadów</value>
        [DataMember(Name="kpoId", EmitDefaultValue=false)]
        public Guid? KpoId { get; set; }

        /// <summary>
        /// Numer rejestrowy przejmującego
        /// </summary>
        /// <value>Numer rejestrowy przejmującego</value>
        [DataMember(Name="receiverIdentificationNumber", EmitDefaultValue=false)]
        public string ReceiverIdentificationNumber { get; set; }

        /// <summary>
        /// Nazwa podmiotu przejmującego
        /// </summary>
        /// <value>Nazwa podmiotu przejmującego</value>
        [DataMember(Name="receiverCompanyName", EmitDefaultValue=false)]
        public string ReceiverCompanyName { get; set; }

        /// <summary>
        /// NIP przejmującego
        /// </summary>
        /// <value>NIP przejmującego</value>
        [DataMember(Name="receiverNip", EmitDefaultValue=false)]
        public string ReceiverNip { get; set; }

        /// <summary>
        /// Numer Karty Przekazania Odpadów
        /// </summary>
        /// <value>Numer Karty Przekazania Odpadów</value>
        [DataMember(Name="cardNumber", EmitDefaultValue=false)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Data otrzymania potwierdzenia
        /// </summary>
        /// <value>Data otrzymania potwierdzenia</value>
        [DataMember(Name="receiveConfirmationTime", EmitDefaultValue=false)]
        public DateTime? ReceiveConfirmationTime { get; set; }

        /// <summary>
        /// Adres
        /// </summary>
        /// <value>Adres</value>
        [DataMember(Name="addressHtml", EmitDefaultValue=false)]
        public string AddressHtml { get; set; }

        /// <summary>
        /// Numer TERYT
        /// </summary>
        /// <value>Numer TERYT</value>
        [DataMember(Name="terytPk", EmitDefaultValue=false)]
        public string TerytPk { get; set; }

        /// <summary>
        /// Numer budynku
        /// </summary>
        /// <value>Numer budynku</value>
        [DataMember(Name="buildingNumber", EmitDefaultValue=false)]
        public string BuildingNumber { get; set; }

        /// <summary>
        /// Numer lokalu
        /// </summary>
        /// <value>Numer lokalu</value>
        [DataMember(Name="localNumber", EmitDefaultValue=false)]
        public string LocalNumber { get; set; }

        /// <summary>
        /// Kod pocztowy
        /// </summary>
        /// <value>Kod pocztowy</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Nie podano numeru budynku
        /// </summary>
        /// <value>Nie podano numeru budynku</value>
        [DataMember(Name="hasNoBuildingNumber", EmitDefaultValue=false)]
        public bool? HasNoBuildingNumber { get; set; }

        /// <summary>
        /// Podmiot zagraniczny
        /// </summary>
        /// <value>Podmiot zagraniczny</value>
        [DataMember(Name="foreignCompany", EmitDefaultValue=false)]
        public bool? ForeignCompany { get; set; }

        /// <summary>
        /// Id kraju
        /// </summary>
        /// <value>Id kraju</value>
        [DataMember(Name="countryId", EmitDefaultValue=false)]
        public int? CountryId { get; set; }

        /// <summary>
        /// Kraj
        /// </summary>
        /// <value>Kraj</value>
        [DataMember(Name="countryName", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Miejscowość
        /// </summary>
        /// <value>Miejscowość</value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// Ulica
        /// </summary>
        /// <value>Ulica</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Masa odpadów
        /// </summary>
        /// <value>Masa odpadów</value>
        [DataMember(Name="wasteMass", EmitDefaultValue=false)]
        public double? WasteMass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto {\n");
            sb.Append("  KpoId: ").Append(KpoId).Append("\n");
            sb.Append("  ReceiverIdentificationNumber: ").Append(ReceiverIdentificationNumber).Append("\n");
            sb.Append("  ReceiverCompanyName: ").Append(ReceiverCompanyName).Append("\n");
            sb.Append("  ReceiverNip: ").Append(ReceiverNip).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  ReceiveConfirmationTime: ").Append(ReceiveConfirmationTime).Append("\n");
            sb.Append("  AddressHtml: ").Append(AddressHtml).Append("\n");
            sb.Append("  TerytPk: ").Append(TerytPk).Append("\n");
            sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
            sb.Append("  LocalNumber: ").Append(LocalNumber).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  HasNoBuildingNumber: ").Append(HasNoBuildingNumber).Append("\n");
            sb.Append("  ForeignCompany: ").Append(ForeignCompany).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  WasteMass: ").Append(WasteMass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KpoId == input.KpoId ||
                    (this.KpoId != null &&
                    this.KpoId.Equals(input.KpoId))
                ) && 
                (
                    this.ReceiverIdentificationNumber == input.ReceiverIdentificationNumber ||
                    (this.ReceiverIdentificationNumber != null &&
                    this.ReceiverIdentificationNumber.Equals(input.ReceiverIdentificationNumber))
                ) && 
                (
                    this.ReceiverCompanyName == input.ReceiverCompanyName ||
                    (this.ReceiverCompanyName != null &&
                    this.ReceiverCompanyName.Equals(input.ReceiverCompanyName))
                ) && 
                (
                    this.ReceiverNip == input.ReceiverNip ||
                    (this.ReceiverNip != null &&
                    this.ReceiverNip.Equals(input.ReceiverNip))
                ) && 
                (
                    this.CardNumber == input.CardNumber ||
                    (this.CardNumber != null &&
                    this.CardNumber.Equals(input.CardNumber))
                ) && 
                (
                    this.ReceiveConfirmationTime == input.ReceiveConfirmationTime ||
                    (this.ReceiveConfirmationTime != null &&
                    this.ReceiveConfirmationTime.Equals(input.ReceiveConfirmationTime))
                ) && 
                (
                    this.AddressHtml == input.AddressHtml ||
                    (this.AddressHtml != null &&
                    this.AddressHtml.Equals(input.AddressHtml))
                ) && 
                (
                    this.TerytPk == input.TerytPk ||
                    (this.TerytPk != null &&
                    this.TerytPk.Equals(input.TerytPk))
                ) && 
                (
                    this.BuildingNumber == input.BuildingNumber ||
                    (this.BuildingNumber != null &&
                    this.BuildingNumber.Equals(input.BuildingNumber))
                ) && 
                (
                    this.LocalNumber == input.LocalNumber ||
                    (this.LocalNumber != null &&
                    this.LocalNumber.Equals(input.LocalNumber))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.HasNoBuildingNumber == input.HasNoBuildingNumber ||
                    (this.HasNoBuildingNumber != null &&
                    this.HasNoBuildingNumber.Equals(input.HasNoBuildingNumber))
                ) && 
                (
                    this.ForeignCompany == input.ForeignCompany ||
                    (this.ForeignCompany != null &&
                    this.ForeignCompany.Equals(input.ForeignCompany))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.WasteMass == input.WasteMass ||
                    (this.WasteMass != null &&
                    this.WasteMass.Equals(input.WasteMass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KpoId != null)
                    hashCode = hashCode * 59 + this.KpoId.GetHashCode();
                if (this.ReceiverIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.ReceiverIdentificationNumber.GetHashCode();
                if (this.ReceiverCompanyName != null)
                    hashCode = hashCode * 59 + this.ReceiverCompanyName.GetHashCode();
                if (this.ReceiverNip != null)
                    hashCode = hashCode * 59 + this.ReceiverNip.GetHashCode();
                if (this.CardNumber != null)
                    hashCode = hashCode * 59 + this.CardNumber.GetHashCode();
                if (this.ReceiveConfirmationTime != null)
                    hashCode = hashCode * 59 + this.ReceiveConfirmationTime.GetHashCode();
                if (this.AddressHtml != null)
                    hashCode = hashCode * 59 + this.AddressHtml.GetHashCode();
                if (this.TerytPk != null)
                    hashCode = hashCode * 59 + this.TerytPk.GetHashCode();
                if (this.BuildingNumber != null)
                    hashCode = hashCode * 59 + this.BuildingNumber.GetHashCode();
                if (this.LocalNumber != null)
                    hashCode = hashCode * 59 + this.LocalNumber.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.HasNoBuildingNumber != null)
                    hashCode = hashCode * 59 + this.HasNoBuildingNumber.GetHashCode();
                if (this.ForeignCompany != null)
                    hashCode = hashCode * 59 + this.ForeignCompany.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.WasteMass != null)
                    hashCode = hashCode * 59 + this.WasteMass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
