/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse" /> class.
        /// </summary>
        /// <param name="batchOfGeneratedSedimentId">Id wpisu wytworzone osady.</param>
        /// <param name="researchNumber">Numer badania.</param>
        /// <param name="wasteCodeWithDescription">wasteCodeWithDescription.</param>
        /// <param name="companyName">Nazwa lub imię i nazwisko.</param>
        /// <param name="companyAdress">Adres.</param>
        /// <param name="companyIdentificationNumber">Numer rejestrowy.</param>
        /// <param name="companyNip">NIP.</param>
        /// <param name="companyNipEu">NIP europejski.</param>
        /// <param name="eupName">Nazwa miejsca prowadzenia działalności.</param>
        /// <param name="eupIdentificationNumber">Numer miejsca prowadzenia działalności.</param>
        /// <param name="eupAdress">Adres miejsca prowadzenia działalności.</param>
        /// <param name="phReaction">phReaction.</param>
        /// <param name="dryMatterContent">Zawartość suchej masy [% s.m.].</param>
        /// <param name="contentOfOrganicSubstances">Zawartość substancji organicznych [% s.m.].</param>
        /// <param name="contentOfAmmoniumNitrogen">Zawartość azotu ogólnego [% s.m.].</param>
        /// <param name="contentOfTotalNitrogen">w tym azotu amonowego[% s.m.].</param>
        /// <param name="contentOfTotalPhosphorus">Zawartość fosforu ogólnego [% s.m.].</param>
        /// <param name="calciumContent">Zawartość wapnia [% s.m.].</param>
        /// <param name="magnesiumContent">Zawartość magnezu [% s.m.].</param>
        /// <param name="numberOfParasiticEggs">Łączna liczba żywych jaj pasożytów [liczba/kg s.m osadu].</param>
        /// <param name="salmonellaBacteria">Bakterie z rodzaju Salmonella w 100g osadów przeznaczonych do badań.</param>
        /// <param name="cadmiumContent">Kadm [mg/kg s.m.].</param>
        /// <param name="copperContent">Miedź [mg/kg s.m.].</param>
        /// <param name="leadContent">Ołów [mg/kg s.m.].</param>
        /// <param name="mercuryContent">Rtęć [mg/kg s.m.].</param>
        /// <param name="nickelContent">Nikiel [mg/kg s.m.].</param>
        /// <param name="chromeContent">Chrom [mg/kg s.m.].</param>
        /// <param name="zincContent">Cynk [mg/kg s.m.].</param>
        /// <param name="isSewageSludgeFormLiquid">Postać komunalnych osadów ściekowych: płynna.</param>
        /// <param name="isSewageSludgeFormMazist">Postać komunalnych osadów ściekowych: mazista.</param>
        /// <param name="isSewageSludgeFormEarthy">Postać komunalnych osadów ściekowych: ziemista.</param>
        /// <param name="dateOfResearch">dateOfResearch.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse(string batchOfGeneratedSedimentId = default(string), string researchNumber = default(string), string wasteCodeWithDescription = default(string), string companyName = default(string), string companyAdress = default(string), string companyIdentificationNumber = default(string), string companyNip = default(string), string companyNipEu = default(string), string eupName = default(string), string eupIdentificationNumber = default(string), string eupAdress = default(string), double? phReaction = default(double?), double? dryMatterContent = default(double?), double? contentOfOrganicSubstances = default(double?), double? contentOfAmmoniumNitrogen = default(double?), double? contentOfTotalNitrogen = default(double?), double? contentOfTotalPhosphorus = default(double?), double? calciumContent = default(double?), double? magnesiumContent = default(double?), double? numberOfParasiticEggs = default(double?), bool? salmonellaBacteria = default(bool?), double? cadmiumContent = default(double?), double? copperContent = default(double?), double? leadContent = default(double?), double? mercuryContent = default(double?), double? nickelContent = default(double?), double? chromeContent = default(double?), double? zincContent = default(double?), bool? isSewageSludgeFormLiquid = default(bool?), bool? isSewageSludgeFormMazist = default(bool?), bool? isSewageSludgeFormEarthy = default(bool?), DateTime? dateOfResearch = default(DateTime?))
        {
            this.BatchOfGeneratedSedimentId = batchOfGeneratedSedimentId;
            this.ResearchNumber = researchNumber;
            this.WasteCodeWithDescription = wasteCodeWithDescription;
            this.CompanyName = companyName;
            this.CompanyAdress = companyAdress;
            this.CompanyIdentificationNumber = companyIdentificationNumber;
            this.CompanyNip = companyNip;
            this.CompanyNipEu = companyNipEu;
            this.EupName = eupName;
            this.EupIdentificationNumber = eupIdentificationNumber;
            this.EupAdress = eupAdress;
            this.PhReaction = phReaction;
            this.DryMatterContent = dryMatterContent;
            this.ContentOfOrganicSubstances = contentOfOrganicSubstances;
            this.ContentOfAmmoniumNitrogen = contentOfAmmoniumNitrogen;
            this.ContentOfTotalNitrogen = contentOfTotalNitrogen;
            this.ContentOfTotalPhosphorus = contentOfTotalPhosphorus;
            this.CalciumContent = calciumContent;
            this.MagnesiumContent = magnesiumContent;
            this.NumberOfParasiticEggs = numberOfParasiticEggs;
            this.SalmonellaBacteria = salmonellaBacteria;
            this.CadmiumContent = cadmiumContent;
            this.CopperContent = copperContent;
            this.LeadContent = leadContent;
            this.MercuryContent = mercuryContent;
            this.NickelContent = nickelContent;
            this.ChromeContent = chromeContent;
            this.ZincContent = zincContent;
            this.IsSewageSludgeFormLiquid = isSewageSludgeFormLiquid;
            this.IsSewageSludgeFormMazist = isSewageSludgeFormMazist;
            this.IsSewageSludgeFormEarthy = isSewageSludgeFormEarthy;
            this.DateOfResearch = dateOfResearch;
        }
        
        /// <summary>
        /// Id wpisu wytworzone osady
        /// </summary>
        /// <value>Id wpisu wytworzone osady</value>
        [DataMember(Name="batchOfGeneratedSedimentId", EmitDefaultValue=false)]
        public string BatchOfGeneratedSedimentId { get; set; }

        /// <summary>
        /// Numer badania
        /// </summary>
        /// <value>Numer badania</value>
        [DataMember(Name="researchNumber", EmitDefaultValue=false)]
        public string ResearchNumber { get; set; }

        /// <summary>
        /// Gets or Sets WasteCodeWithDescription
        /// </summary>
        [DataMember(Name="wasteCodeWithDescription", EmitDefaultValue=false)]
        public string WasteCodeWithDescription { get; set; }

        /// <summary>
        /// Nazwa lub imię i nazwisko
        /// </summary>
        /// <value>Nazwa lub imię i nazwisko</value>
        [DataMember(Name="companyName", EmitDefaultValue=false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Adres
        /// </summary>
        /// <value>Adres</value>
        [DataMember(Name="companyAdress", EmitDefaultValue=false)]
        public string CompanyAdress { get; set; }

        /// <summary>
        /// Numer rejestrowy
        /// </summary>
        /// <value>Numer rejestrowy</value>
        [DataMember(Name="companyIdentificationNumber", EmitDefaultValue=false)]
        public string CompanyIdentificationNumber { get; set; }

        /// <summary>
        /// NIP
        /// </summary>
        /// <value>NIP</value>
        [DataMember(Name="companyNip", EmitDefaultValue=false)]
        public string CompanyNip { get; set; }

        /// <summary>
        /// NIP europejski
        /// </summary>
        /// <value>NIP europejski</value>
        [DataMember(Name="companyNipEu", EmitDefaultValue=false)]
        public string CompanyNipEu { get; set; }

        /// <summary>
        /// Nazwa miejsca prowadzenia działalności
        /// </summary>
        /// <value>Nazwa miejsca prowadzenia działalności</value>
        [DataMember(Name="eupName", EmitDefaultValue=false)]
        public string EupName { get; set; }

        /// <summary>
        /// Numer miejsca prowadzenia działalności
        /// </summary>
        /// <value>Numer miejsca prowadzenia działalności</value>
        [DataMember(Name="eupIdentificationNumber", EmitDefaultValue=false)]
        public string EupIdentificationNumber { get; set; }

        /// <summary>
        /// Adres miejsca prowadzenia działalności
        /// </summary>
        /// <value>Adres miejsca prowadzenia działalności</value>
        [DataMember(Name="eupAdress", EmitDefaultValue=false)]
        public string EupAdress { get; set; }

        /// <summary>
        /// Gets or Sets PhReaction
        /// </summary>
        [DataMember(Name="phReaction", EmitDefaultValue=false)]
        public double? PhReaction { get; set; }

        /// <summary>
        /// Zawartość suchej masy [% s.m.]
        /// </summary>
        /// <value>Zawartość suchej masy [% s.m.]</value>
        [DataMember(Name="dryMatterContent", EmitDefaultValue=false)]
        public double? DryMatterContent { get; set; }

        /// <summary>
        /// Zawartość substancji organicznych [% s.m.]
        /// </summary>
        /// <value>Zawartość substancji organicznych [% s.m.]</value>
        [DataMember(Name="contentOfOrganicSubstances", EmitDefaultValue=false)]
        public double? ContentOfOrganicSubstances { get; set; }

        /// <summary>
        /// Zawartość azotu ogólnego [% s.m.]
        /// </summary>
        /// <value>Zawartość azotu ogólnego [% s.m.]</value>
        [DataMember(Name="contentOfAmmoniumNitrogen", EmitDefaultValue=false)]
        public double? ContentOfAmmoniumNitrogen { get; set; }

        /// <summary>
        /// w tym azotu amonowego[% s.m.]
        /// </summary>
        /// <value>w tym azotu amonowego[% s.m.]</value>
        [DataMember(Name="contentOfTotalNitrogen", EmitDefaultValue=false)]
        public double? ContentOfTotalNitrogen { get; set; }

        /// <summary>
        /// Zawartość fosforu ogólnego [% s.m.]
        /// </summary>
        /// <value>Zawartość fosforu ogólnego [% s.m.]</value>
        [DataMember(Name="contentOfTotalPhosphorus", EmitDefaultValue=false)]
        public double? ContentOfTotalPhosphorus { get; set; }

        /// <summary>
        /// Zawartość wapnia [% s.m.]
        /// </summary>
        /// <value>Zawartość wapnia [% s.m.]</value>
        [DataMember(Name="calciumContent", EmitDefaultValue=false)]
        public double? CalciumContent { get; set; }

        /// <summary>
        /// Zawartość magnezu [% s.m.]
        /// </summary>
        /// <value>Zawartość magnezu [% s.m.]</value>
        [DataMember(Name="magnesiumContent", EmitDefaultValue=false)]
        public double? MagnesiumContent { get; set; }

        /// <summary>
        /// Łączna liczba żywych jaj pasożytów [liczba/kg s.m osadu]
        /// </summary>
        /// <value>Łączna liczba żywych jaj pasożytów [liczba/kg s.m osadu]</value>
        [DataMember(Name="numberOfParasiticEggs", EmitDefaultValue=false)]
        public double? NumberOfParasiticEggs { get; set; }

        /// <summary>
        /// Bakterie z rodzaju Salmonella w 100g osadów przeznaczonych do badań
        /// </summary>
        /// <value>Bakterie z rodzaju Salmonella w 100g osadów przeznaczonych do badań</value>
        [DataMember(Name="salmonellaBacteria", EmitDefaultValue=false)]
        public bool? SalmonellaBacteria { get; set; }

        /// <summary>
        /// Kadm [mg/kg s.m.]
        /// </summary>
        /// <value>Kadm [mg/kg s.m.]</value>
        [DataMember(Name="cadmiumContent", EmitDefaultValue=false)]
        public double? CadmiumContent { get; set; }

        /// <summary>
        /// Miedź [mg/kg s.m.]
        /// </summary>
        /// <value>Miedź [mg/kg s.m.]</value>
        [DataMember(Name="copperContent", EmitDefaultValue=false)]
        public double? CopperContent { get; set; }

        /// <summary>
        /// Ołów [mg/kg s.m.]
        /// </summary>
        /// <value>Ołów [mg/kg s.m.]</value>
        [DataMember(Name="leadContent", EmitDefaultValue=false)]
        public double? LeadContent { get; set; }

        /// <summary>
        /// Rtęć [mg/kg s.m.]
        /// </summary>
        /// <value>Rtęć [mg/kg s.m.]</value>
        [DataMember(Name="mercuryContent", EmitDefaultValue=false)]
        public double? MercuryContent { get; set; }

        /// <summary>
        /// Nikiel [mg/kg s.m.]
        /// </summary>
        /// <value>Nikiel [mg/kg s.m.]</value>
        [DataMember(Name="nickelContent", EmitDefaultValue=false)]
        public double? NickelContent { get; set; }

        /// <summary>
        /// Chrom [mg/kg s.m.]
        /// </summary>
        /// <value>Chrom [mg/kg s.m.]</value>
        [DataMember(Name="chromeContent", EmitDefaultValue=false)]
        public double? ChromeContent { get; set; }

        /// <summary>
        /// Cynk [mg/kg s.m.]
        /// </summary>
        /// <value>Cynk [mg/kg s.m.]</value>
        [DataMember(Name="zincContent", EmitDefaultValue=false)]
        public double? ZincContent { get; set; }

        /// <summary>
        /// Postać komunalnych osadów ściekowych: płynna
        /// </summary>
        /// <value>Postać komunalnych osadów ściekowych: płynna</value>
        [DataMember(Name="isSewageSludgeFormLiquid", EmitDefaultValue=false)]
        public bool? IsSewageSludgeFormLiquid { get; set; }

        /// <summary>
        /// Postać komunalnych osadów ściekowych: mazista
        /// </summary>
        /// <value>Postać komunalnych osadów ściekowych: mazista</value>
        [DataMember(Name="isSewageSludgeFormMazist", EmitDefaultValue=false)]
        public bool? IsSewageSludgeFormMazist { get; set; }

        /// <summary>
        /// Postać komunalnych osadów ściekowych: ziemista
        /// </summary>
        /// <value>Postać komunalnych osadów ściekowych: ziemista</value>
        [DataMember(Name="isSewageSludgeFormEarthy", EmitDefaultValue=false)]
        public bool? IsSewageSludgeFormEarthy { get; set; }

        /// <summary>
        /// Gets or Sets DateOfResearch
        /// </summary>
        [DataMember(Name="dateOfResearch", EmitDefaultValue=false)]
        public DateTime? DateOfResearch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse {\n");
            sb.Append("  BatchOfGeneratedSedimentId: ").Append(BatchOfGeneratedSedimentId).Append("\n");
            sb.Append("  ResearchNumber: ").Append(ResearchNumber).Append("\n");
            sb.Append("  WasteCodeWithDescription: ").Append(WasteCodeWithDescription).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyAdress: ").Append(CompanyAdress).Append("\n");
            sb.Append("  CompanyIdentificationNumber: ").Append(CompanyIdentificationNumber).Append("\n");
            sb.Append("  CompanyNip: ").Append(CompanyNip).Append("\n");
            sb.Append("  CompanyNipEu: ").Append(CompanyNipEu).Append("\n");
            sb.Append("  EupName: ").Append(EupName).Append("\n");
            sb.Append("  EupIdentificationNumber: ").Append(EupIdentificationNumber).Append("\n");
            sb.Append("  EupAdress: ").Append(EupAdress).Append("\n");
            sb.Append("  PhReaction: ").Append(PhReaction).Append("\n");
            sb.Append("  DryMatterContent: ").Append(DryMatterContent).Append("\n");
            sb.Append("  ContentOfOrganicSubstances: ").Append(ContentOfOrganicSubstances).Append("\n");
            sb.Append("  ContentOfAmmoniumNitrogen: ").Append(ContentOfAmmoniumNitrogen).Append("\n");
            sb.Append("  ContentOfTotalNitrogen: ").Append(ContentOfTotalNitrogen).Append("\n");
            sb.Append("  ContentOfTotalPhosphorus: ").Append(ContentOfTotalPhosphorus).Append("\n");
            sb.Append("  CalciumContent: ").Append(CalciumContent).Append("\n");
            sb.Append("  MagnesiumContent: ").Append(MagnesiumContent).Append("\n");
            sb.Append("  NumberOfParasiticEggs: ").Append(NumberOfParasiticEggs).Append("\n");
            sb.Append("  SalmonellaBacteria: ").Append(SalmonellaBacteria).Append("\n");
            sb.Append("  CadmiumContent: ").Append(CadmiumContent).Append("\n");
            sb.Append("  CopperContent: ").Append(CopperContent).Append("\n");
            sb.Append("  LeadContent: ").Append(LeadContent).Append("\n");
            sb.Append("  MercuryContent: ").Append(MercuryContent).Append("\n");
            sb.Append("  NickelContent: ").Append(NickelContent).Append("\n");
            sb.Append("  ChromeContent: ").Append(ChromeContent).Append("\n");
            sb.Append("  ZincContent: ").Append(ZincContent).Append("\n");
            sb.Append("  IsSewageSludgeFormLiquid: ").Append(IsSewageSludgeFormLiquid).Append("\n");
            sb.Append("  IsSewageSludgeFormMazist: ").Append(IsSewageSludgeFormMazist).Append("\n");
            sb.Append("  IsSewageSludgeFormEarthy: ").Append(IsSewageSludgeFormEarthy).Append("\n");
            sb.Append("  DateOfResearch: ").Append(DateOfResearch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BatchOfGeneratedSedimentId == input.BatchOfGeneratedSedimentId ||
                    (this.BatchOfGeneratedSedimentId != null &&
                    this.BatchOfGeneratedSedimentId.Equals(input.BatchOfGeneratedSedimentId))
                ) && 
                (
                    this.ResearchNumber == input.ResearchNumber ||
                    (this.ResearchNumber != null &&
                    this.ResearchNumber.Equals(input.ResearchNumber))
                ) && 
                (
                    this.WasteCodeWithDescription == input.WasteCodeWithDescription ||
                    (this.WasteCodeWithDescription != null &&
                    this.WasteCodeWithDescription.Equals(input.WasteCodeWithDescription))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.CompanyAdress == input.CompanyAdress ||
                    (this.CompanyAdress != null &&
                    this.CompanyAdress.Equals(input.CompanyAdress))
                ) && 
                (
                    this.CompanyIdentificationNumber == input.CompanyIdentificationNumber ||
                    (this.CompanyIdentificationNumber != null &&
                    this.CompanyIdentificationNumber.Equals(input.CompanyIdentificationNumber))
                ) && 
                (
                    this.CompanyNip == input.CompanyNip ||
                    (this.CompanyNip != null &&
                    this.CompanyNip.Equals(input.CompanyNip))
                ) && 
                (
                    this.CompanyNipEu == input.CompanyNipEu ||
                    (this.CompanyNipEu != null &&
                    this.CompanyNipEu.Equals(input.CompanyNipEu))
                ) && 
                (
                    this.EupName == input.EupName ||
                    (this.EupName != null &&
                    this.EupName.Equals(input.EupName))
                ) && 
                (
                    this.EupIdentificationNumber == input.EupIdentificationNumber ||
                    (this.EupIdentificationNumber != null &&
                    this.EupIdentificationNumber.Equals(input.EupIdentificationNumber))
                ) && 
                (
                    this.EupAdress == input.EupAdress ||
                    (this.EupAdress != null &&
                    this.EupAdress.Equals(input.EupAdress))
                ) && 
                (
                    this.PhReaction == input.PhReaction ||
                    (this.PhReaction != null &&
                    this.PhReaction.Equals(input.PhReaction))
                ) && 
                (
                    this.DryMatterContent == input.DryMatterContent ||
                    (this.DryMatterContent != null &&
                    this.DryMatterContent.Equals(input.DryMatterContent))
                ) && 
                (
                    this.ContentOfOrganicSubstances == input.ContentOfOrganicSubstances ||
                    (this.ContentOfOrganicSubstances != null &&
                    this.ContentOfOrganicSubstances.Equals(input.ContentOfOrganicSubstances))
                ) && 
                (
                    this.ContentOfAmmoniumNitrogen == input.ContentOfAmmoniumNitrogen ||
                    (this.ContentOfAmmoniumNitrogen != null &&
                    this.ContentOfAmmoniumNitrogen.Equals(input.ContentOfAmmoniumNitrogen))
                ) && 
                (
                    this.ContentOfTotalNitrogen == input.ContentOfTotalNitrogen ||
                    (this.ContentOfTotalNitrogen != null &&
                    this.ContentOfTotalNitrogen.Equals(input.ContentOfTotalNitrogen))
                ) && 
                (
                    this.ContentOfTotalPhosphorus == input.ContentOfTotalPhosphorus ||
                    (this.ContentOfTotalPhosphorus != null &&
                    this.ContentOfTotalPhosphorus.Equals(input.ContentOfTotalPhosphorus))
                ) && 
                (
                    this.CalciumContent == input.CalciumContent ||
                    (this.CalciumContent != null &&
                    this.CalciumContent.Equals(input.CalciumContent))
                ) && 
                (
                    this.MagnesiumContent == input.MagnesiumContent ||
                    (this.MagnesiumContent != null &&
                    this.MagnesiumContent.Equals(input.MagnesiumContent))
                ) && 
                (
                    this.NumberOfParasiticEggs == input.NumberOfParasiticEggs ||
                    (this.NumberOfParasiticEggs != null &&
                    this.NumberOfParasiticEggs.Equals(input.NumberOfParasiticEggs))
                ) && 
                (
                    this.SalmonellaBacteria == input.SalmonellaBacteria ||
                    (this.SalmonellaBacteria != null &&
                    this.SalmonellaBacteria.Equals(input.SalmonellaBacteria))
                ) && 
                (
                    this.CadmiumContent == input.CadmiumContent ||
                    (this.CadmiumContent != null &&
                    this.CadmiumContent.Equals(input.CadmiumContent))
                ) && 
                (
                    this.CopperContent == input.CopperContent ||
                    (this.CopperContent != null &&
                    this.CopperContent.Equals(input.CopperContent))
                ) && 
                (
                    this.LeadContent == input.LeadContent ||
                    (this.LeadContent != null &&
                    this.LeadContent.Equals(input.LeadContent))
                ) && 
                (
                    this.MercuryContent == input.MercuryContent ||
                    (this.MercuryContent != null &&
                    this.MercuryContent.Equals(input.MercuryContent))
                ) && 
                (
                    this.NickelContent == input.NickelContent ||
                    (this.NickelContent != null &&
                    this.NickelContent.Equals(input.NickelContent))
                ) && 
                (
                    this.ChromeContent == input.ChromeContent ||
                    (this.ChromeContent != null &&
                    this.ChromeContent.Equals(input.ChromeContent))
                ) && 
                (
                    this.ZincContent == input.ZincContent ||
                    (this.ZincContent != null &&
                    this.ZincContent.Equals(input.ZincContent))
                ) && 
                (
                    this.IsSewageSludgeFormLiquid == input.IsSewageSludgeFormLiquid ||
                    (this.IsSewageSludgeFormLiquid != null &&
                    this.IsSewageSludgeFormLiquid.Equals(input.IsSewageSludgeFormLiquid))
                ) && 
                (
                    this.IsSewageSludgeFormMazist == input.IsSewageSludgeFormMazist ||
                    (this.IsSewageSludgeFormMazist != null &&
                    this.IsSewageSludgeFormMazist.Equals(input.IsSewageSludgeFormMazist))
                ) && 
                (
                    this.IsSewageSludgeFormEarthy == input.IsSewageSludgeFormEarthy ||
                    (this.IsSewageSludgeFormEarthy != null &&
                    this.IsSewageSludgeFormEarthy.Equals(input.IsSewageSludgeFormEarthy))
                ) && 
                (
                    this.DateOfResearch == input.DateOfResearch ||
                    (this.DateOfResearch != null &&
                    this.DateOfResearch.Equals(input.DateOfResearch))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BatchOfGeneratedSedimentId != null)
                    hashCode = hashCode * 59 + this.BatchOfGeneratedSedimentId.GetHashCode();
                if (this.ResearchNumber != null)
                    hashCode = hashCode * 59 + this.ResearchNumber.GetHashCode();
                if (this.WasteCodeWithDescription != null)
                    hashCode = hashCode * 59 + this.WasteCodeWithDescription.GetHashCode();
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyAdress != null)
                    hashCode = hashCode * 59 + this.CompanyAdress.GetHashCode();
                if (this.CompanyIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.CompanyIdentificationNumber.GetHashCode();
                if (this.CompanyNip != null)
                    hashCode = hashCode * 59 + this.CompanyNip.GetHashCode();
                if (this.CompanyNipEu != null)
                    hashCode = hashCode * 59 + this.CompanyNipEu.GetHashCode();
                if (this.EupName != null)
                    hashCode = hashCode * 59 + this.EupName.GetHashCode();
                if (this.EupIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.EupIdentificationNumber.GetHashCode();
                if (this.EupAdress != null)
                    hashCode = hashCode * 59 + this.EupAdress.GetHashCode();
                if (this.PhReaction != null)
                    hashCode = hashCode * 59 + this.PhReaction.GetHashCode();
                if (this.DryMatterContent != null)
                    hashCode = hashCode * 59 + this.DryMatterContent.GetHashCode();
                if (this.ContentOfOrganicSubstances != null)
                    hashCode = hashCode * 59 + this.ContentOfOrganicSubstances.GetHashCode();
                if (this.ContentOfAmmoniumNitrogen != null)
                    hashCode = hashCode * 59 + this.ContentOfAmmoniumNitrogen.GetHashCode();
                if (this.ContentOfTotalNitrogen != null)
                    hashCode = hashCode * 59 + this.ContentOfTotalNitrogen.GetHashCode();
                if (this.ContentOfTotalPhosphorus != null)
                    hashCode = hashCode * 59 + this.ContentOfTotalPhosphorus.GetHashCode();
                if (this.CalciumContent != null)
                    hashCode = hashCode * 59 + this.CalciumContent.GetHashCode();
                if (this.MagnesiumContent != null)
                    hashCode = hashCode * 59 + this.MagnesiumContent.GetHashCode();
                if (this.NumberOfParasiticEggs != null)
                    hashCode = hashCode * 59 + this.NumberOfParasiticEggs.GetHashCode();
                if (this.SalmonellaBacteria != null)
                    hashCode = hashCode * 59 + this.SalmonellaBacteria.GetHashCode();
                if (this.CadmiumContent != null)
                    hashCode = hashCode * 59 + this.CadmiumContent.GetHashCode();
                if (this.CopperContent != null)
                    hashCode = hashCode * 59 + this.CopperContent.GetHashCode();
                if (this.LeadContent != null)
                    hashCode = hashCode * 59 + this.LeadContent.GetHashCode();
                if (this.MercuryContent != null)
                    hashCode = hashCode * 59 + this.MercuryContent.GetHashCode();
                if (this.NickelContent != null)
                    hashCode = hashCode * 59 + this.NickelContent.GetHashCode();
                if (this.ChromeContent != null)
                    hashCode = hashCode * 59 + this.ChromeContent.GetHashCode();
                if (this.ZincContent != null)
                    hashCode = hashCode * 59 + this.ZincContent.GetHashCode();
                if (this.IsSewageSludgeFormLiquid != null)
                    hashCode = hashCode * 59 + this.IsSewageSludgeFormLiquid.GetHashCode();
                if (this.IsSewageSludgeFormMazist != null)
                    hashCode = hashCode * 59 + this.IsSewageSludgeFormMazist.GetHashCode();
                if (this.IsSewageSludgeFormEarthy != null)
                    hashCode = hashCode * 59 + this.IsSewageSludgeFormEarthy.GetHashCode();
                if (this.DateOfResearch != null)
                    hashCode = hashCode * 59 + this.DateOfResearch.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
