/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1NewKekosLandSurfaceRulerDto
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1NewKekosLandSurfaceRulerDto :  IEquatable<WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1NewKekosLandSurfaceRulerDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1NewKekosLandSurfaceRulerDto" /> class.
        /// </summary>
        /// <param name="isForeigner">Podmiot zagraniczny władający powierzchnią ziemi.</param>
        /// <param name="name">Imię i nazwisko lub nazwa władającego powierzchnią ziemi.</param>
        /// <param name="terytPk">Numer TERYT.</param>
        /// <param name="locality">Miejscowość.</param>
        /// <param name="street">Ulica.</param>
        /// <param name="buildingNumber">Numer budynku.</param>
        /// <param name="hasNoBuildingNumber">Nie podano numeru budynku.</param>
        /// <param name="localNumber">Numer lokalu.</param>
        /// <param name="postalCode">Kod pocztowy.</param>
        /// <param name="countryId">Id kraju.</param>
        public WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1NewKekosLandSurfaceRulerDto(bool? isForeigner = default(bool?), string name = default(string), string terytPk = default(string), string locality = default(string), string street = default(string), string buildingNumber = default(string), bool? hasNoBuildingNumber = default(bool?), string localNumber = default(string), string postalCode = default(string), int? countryId = default(int?))
        {
            this.IsForeigner = isForeigner;
            this.Name = name;
            this.TerytPk = terytPk;
            this.Locality = locality;
            this.Street = street;
            this.BuildingNumber = buildingNumber;
            this.HasNoBuildingNumber = hasNoBuildingNumber;
            this.LocalNumber = localNumber;
            this.PostalCode = postalCode;
            this.CountryId = countryId;
        }
        
        /// <summary>
        /// Podmiot zagraniczny władający powierzchnią ziemi
        /// </summary>
        /// <value>Podmiot zagraniczny władający powierzchnią ziemi</value>
        [DataMember(Name="isForeigner", EmitDefaultValue=false)]
        public bool? IsForeigner { get; set; }

        /// <summary>
        /// Imię i nazwisko lub nazwa władającego powierzchnią ziemi
        /// </summary>
        /// <value>Imię i nazwisko lub nazwa władającego powierzchnią ziemi</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Numer TERYT
        /// </summary>
        /// <value>Numer TERYT</value>
        [DataMember(Name="terytPk", EmitDefaultValue=false)]
        public string TerytPk { get; set; }

        /// <summary>
        /// Miejscowość
        /// </summary>
        /// <value>Miejscowość</value>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// Ulica
        /// </summary>
        /// <value>Ulica</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Numer budynku
        /// </summary>
        /// <value>Numer budynku</value>
        [DataMember(Name="buildingNumber", EmitDefaultValue=false)]
        public string BuildingNumber { get; set; }

        /// <summary>
        /// Nie podano numeru budynku
        /// </summary>
        /// <value>Nie podano numeru budynku</value>
        [DataMember(Name="hasNoBuildingNumber", EmitDefaultValue=false)]
        public bool? HasNoBuildingNumber { get; set; }

        /// <summary>
        /// Numer lokalu
        /// </summary>
        /// <value>Numer lokalu</value>
        [DataMember(Name="localNumber", EmitDefaultValue=false)]
        public string LocalNumber { get; set; }

        /// <summary>
        /// Kod pocztowy
        /// </summary>
        /// <value>Kod pocztowy</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Id kraju
        /// </summary>
        /// <value>Id kraju</value>
        [DataMember(Name="countryId", EmitDefaultValue=false)]
        public int? CountryId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1NewKekosLandSurfaceRulerDto {\n");
            sb.Append("  IsForeigner: ").Append(IsForeigner).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TerytPk: ").Append(TerytPk).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
            sb.Append("  HasNoBuildingNumber: ").Append(HasNoBuildingNumber).Append("\n");
            sb.Append("  LocalNumber: ").Append(LocalNumber).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1NewKekosLandSurfaceRulerDto);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1NewKekosLandSurfaceRulerDto instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1NewKekosLandSurfaceRulerDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1NewKekosLandSurfaceRulerDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsForeigner == input.IsForeigner ||
                    (this.IsForeigner != null &&
                    this.IsForeigner.Equals(input.IsForeigner))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.TerytPk == input.TerytPk ||
                    (this.TerytPk != null &&
                    this.TerytPk.Equals(input.TerytPk))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.BuildingNumber == input.BuildingNumber ||
                    (this.BuildingNumber != null &&
                    this.BuildingNumber.Equals(input.BuildingNumber))
                ) && 
                (
                    this.HasNoBuildingNumber == input.HasNoBuildingNumber ||
                    (this.HasNoBuildingNumber != null &&
                    this.HasNoBuildingNumber.Equals(input.HasNoBuildingNumber))
                ) && 
                (
                    this.LocalNumber == input.LocalNumber ||
                    (this.LocalNumber != null &&
                    this.LocalNumber.Equals(input.LocalNumber))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsForeigner != null)
                    hashCode = hashCode * 59 + this.IsForeigner.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.TerytPk != null)
                    hashCode = hashCode * 59 + this.TerytPk.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.BuildingNumber != null)
                    hashCode = hashCode * 59 + this.BuildingNumber.GetHashCode();
                if (this.HasNoBuildingNumber != null)
                    hashCode = hashCode * 59 + this.HasNoBuildingNumber.GetHashCode();
                if (this.LocalNumber != null)
                    hashCode = hashCode * 59 + this.LocalNumber.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
