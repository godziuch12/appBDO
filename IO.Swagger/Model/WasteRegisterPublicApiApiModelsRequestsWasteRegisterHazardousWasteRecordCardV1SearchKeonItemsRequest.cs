/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsRequestsWasteRegisterHazardousWasteRecordCardV1SearchKeonItemsRequest
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsRequestsWasteRegisterHazardousWasteRecordCardV1SearchKeonItemsRequest :  IEquatable<WasteRegisterPublicApiApiModelsRequestsWasteRegisterHazardousWasteRecordCardV1SearchKeonItemsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsRequestsWasteRegisterHazardousWasteRecordCardV1SearchKeonItemsRequest" /> class.
        /// </summary>
        /// <param name="keonId">Id karty ewidencji odpadów niebezpiecznych.</param>
        /// <param name="receiveConfirmationTime">Data otrzymania potwierdzenia.</param>
        /// <param name="documentNumber">Numer dokumentu.</param>
        /// <param name="createdByUserFirstNameAndLastName">Imię i nazwisko użytkownika tworzącego kartę.</param>
        /// <param name="senderCompanyName">Nazwa podmiotu przekazującego.</param>
        /// <param name="senderIdentificationNumber">Numer rejestrowy przekazującego.</param>
        /// <param name="receiverCompanyName">Nazwa podmiotu przejmującego.</param>
        /// <param name="receiverIdentificationNumber">Numer rejestrowy przejmującego.</param>
        /// <param name="isDealer">Działalność jako sprzedawca odpadów.</param>
        /// <param name="isBroker">Działalność jako pośrednik w obrocie odpadami.</param>
        /// <param name="paginationParameters">Parametry stronicowania.</param>
        public WasteRegisterPublicApiApiModelsRequestsWasteRegisterHazardousWasteRecordCardV1SearchKeonItemsRequest(Guid? keonId = default(Guid?), DateTime? receiveConfirmationTime = default(DateTime?), string documentNumber = default(string), string createdByUserFirstNameAndLastName = default(string), string senderCompanyName = default(string), string senderIdentificationNumber = default(string), string receiverCompanyName = default(string), string receiverIdentificationNumber = default(string), bool? isDealer = default(bool?), bool? isBroker = default(bool?), WasteRegisterPublicApiApiModelsCollectionsPaginationParameters paginationParameters = default(WasteRegisterPublicApiApiModelsCollectionsPaginationParameters))
        {
            this.KeonId = keonId;
            this.ReceiveConfirmationTime = receiveConfirmationTime;
            this.DocumentNumber = documentNumber;
            this.CreatedByUserFirstNameAndLastName = createdByUserFirstNameAndLastName;
            this.SenderCompanyName = senderCompanyName;
            this.SenderIdentificationNumber = senderIdentificationNumber;
            this.ReceiverCompanyName = receiverCompanyName;
            this.ReceiverIdentificationNumber = receiverIdentificationNumber;
            this.IsDealer = isDealer;
            this.IsBroker = isBroker;
            this.PaginationParameters = paginationParameters;
        }
        
        /// <summary>
        /// Id karty ewidencji odpadów niebezpiecznych
        /// </summary>
        /// <value>Id karty ewidencji odpadów niebezpiecznych</value>
        [DataMember(Name="keonId", EmitDefaultValue=false)]
        public Guid? KeonId { get; set; }

        /// <summary>
        /// Data otrzymania potwierdzenia
        /// </summary>
        /// <value>Data otrzymania potwierdzenia</value>
        [DataMember(Name="receiveConfirmationTime", EmitDefaultValue=false)]
        public DateTime? ReceiveConfirmationTime { get; set; }

        /// <summary>
        /// Numer dokumentu
        /// </summary>
        /// <value>Numer dokumentu</value>
        [DataMember(Name="documentNumber", EmitDefaultValue=false)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Imię i nazwisko użytkownika tworzącego kartę
        /// </summary>
        /// <value>Imię i nazwisko użytkownika tworzącego kartę</value>
        [DataMember(Name="createdByUserFirstNameAndLastName", EmitDefaultValue=false)]
        public string CreatedByUserFirstNameAndLastName { get; set; }

        /// <summary>
        /// Nazwa podmiotu przekazującego
        /// </summary>
        /// <value>Nazwa podmiotu przekazującego</value>
        [DataMember(Name="senderCompanyName", EmitDefaultValue=false)]
        public string SenderCompanyName { get; set; }

        /// <summary>
        /// Numer rejestrowy przekazującego
        /// </summary>
        /// <value>Numer rejestrowy przekazującego</value>
        [DataMember(Name="senderIdentificationNumber", EmitDefaultValue=false)]
        public string SenderIdentificationNumber { get; set; }

        /// <summary>
        /// Nazwa podmiotu przejmującego
        /// </summary>
        /// <value>Nazwa podmiotu przejmującego</value>
        [DataMember(Name="receiverCompanyName", EmitDefaultValue=false)]
        public string ReceiverCompanyName { get; set; }

        /// <summary>
        /// Numer rejestrowy przejmującego
        /// </summary>
        /// <value>Numer rejestrowy przejmującego</value>
        [DataMember(Name="receiverIdentificationNumber", EmitDefaultValue=false)]
        public string ReceiverIdentificationNumber { get; set; }

        /// <summary>
        /// Działalność jako sprzedawca odpadów
        /// </summary>
        /// <value>Działalność jako sprzedawca odpadów</value>
        [DataMember(Name="isDealer", EmitDefaultValue=false)]
        public bool? IsDealer { get; set; }

        /// <summary>
        /// Działalność jako pośrednik w obrocie odpadami
        /// </summary>
        /// <value>Działalność jako pośrednik w obrocie odpadami</value>
        [DataMember(Name="isBroker", EmitDefaultValue=false)]
        public bool? IsBroker { get; set; }

        /// <summary>
        /// Parametry stronicowania
        /// </summary>
        /// <value>Parametry stronicowania</value>
        [DataMember(Name="paginationParameters", EmitDefaultValue=false)]
        public WasteRegisterPublicApiApiModelsCollectionsPaginationParameters PaginationParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsRequestsWasteRegisterHazardousWasteRecordCardV1SearchKeonItemsRequest {\n");
            sb.Append("  KeonId: ").Append(KeonId).Append("\n");
            sb.Append("  ReceiveConfirmationTime: ").Append(ReceiveConfirmationTime).Append("\n");
            sb.Append("  DocumentNumber: ").Append(DocumentNumber).Append("\n");
            sb.Append("  CreatedByUserFirstNameAndLastName: ").Append(CreatedByUserFirstNameAndLastName).Append("\n");
            sb.Append("  SenderCompanyName: ").Append(SenderCompanyName).Append("\n");
            sb.Append("  SenderIdentificationNumber: ").Append(SenderIdentificationNumber).Append("\n");
            sb.Append("  ReceiverCompanyName: ").Append(ReceiverCompanyName).Append("\n");
            sb.Append("  ReceiverIdentificationNumber: ").Append(ReceiverIdentificationNumber).Append("\n");
            sb.Append("  IsDealer: ").Append(IsDealer).Append("\n");
            sb.Append("  IsBroker: ").Append(IsBroker).Append("\n");
            sb.Append("  PaginationParameters: ").Append(PaginationParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsRequestsWasteRegisterHazardousWasteRecordCardV1SearchKeonItemsRequest);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsRequestsWasteRegisterHazardousWasteRecordCardV1SearchKeonItemsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsRequestsWasteRegisterHazardousWasteRecordCardV1SearchKeonItemsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsRequestsWasteRegisterHazardousWasteRecordCardV1SearchKeonItemsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KeonId == input.KeonId ||
                    (this.KeonId != null &&
                    this.KeonId.Equals(input.KeonId))
                ) && 
                (
                    this.ReceiveConfirmationTime == input.ReceiveConfirmationTime ||
                    (this.ReceiveConfirmationTime != null &&
                    this.ReceiveConfirmationTime.Equals(input.ReceiveConfirmationTime))
                ) && 
                (
                    this.DocumentNumber == input.DocumentNumber ||
                    (this.DocumentNumber != null &&
                    this.DocumentNumber.Equals(input.DocumentNumber))
                ) && 
                (
                    this.CreatedByUserFirstNameAndLastName == input.CreatedByUserFirstNameAndLastName ||
                    (this.CreatedByUserFirstNameAndLastName != null &&
                    this.CreatedByUserFirstNameAndLastName.Equals(input.CreatedByUserFirstNameAndLastName))
                ) && 
                (
                    this.SenderCompanyName == input.SenderCompanyName ||
                    (this.SenderCompanyName != null &&
                    this.SenderCompanyName.Equals(input.SenderCompanyName))
                ) && 
                (
                    this.SenderIdentificationNumber == input.SenderIdentificationNumber ||
                    (this.SenderIdentificationNumber != null &&
                    this.SenderIdentificationNumber.Equals(input.SenderIdentificationNumber))
                ) && 
                (
                    this.ReceiverCompanyName == input.ReceiverCompanyName ||
                    (this.ReceiverCompanyName != null &&
                    this.ReceiverCompanyName.Equals(input.ReceiverCompanyName))
                ) && 
                (
                    this.ReceiverIdentificationNumber == input.ReceiverIdentificationNumber ||
                    (this.ReceiverIdentificationNumber != null &&
                    this.ReceiverIdentificationNumber.Equals(input.ReceiverIdentificationNumber))
                ) && 
                (
                    this.IsDealer == input.IsDealer ||
                    (this.IsDealer != null &&
                    this.IsDealer.Equals(input.IsDealer))
                ) && 
                (
                    this.IsBroker == input.IsBroker ||
                    (this.IsBroker != null &&
                    this.IsBroker.Equals(input.IsBroker))
                ) && 
                (
                    this.PaginationParameters == input.PaginationParameters ||
                    (this.PaginationParameters != null &&
                    this.PaginationParameters.Equals(input.PaginationParameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KeonId != null)
                    hashCode = hashCode * 59 + this.KeonId.GetHashCode();
                if (this.ReceiveConfirmationTime != null)
                    hashCode = hashCode * 59 + this.ReceiveConfirmationTime.GetHashCode();
                if (this.DocumentNumber != null)
                    hashCode = hashCode * 59 + this.DocumentNumber.GetHashCode();
                if (this.CreatedByUserFirstNameAndLastName != null)
                    hashCode = hashCode * 59 + this.CreatedByUserFirstNameAndLastName.GetHashCode();
                if (this.SenderCompanyName != null)
                    hashCode = hashCode * 59 + this.SenderCompanyName.GetHashCode();
                if (this.SenderIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.SenderIdentificationNumber.GetHashCode();
                if (this.ReceiverCompanyName != null)
                    hashCode = hashCode * 59 + this.ReceiverCompanyName.GetHashCode();
                if (this.ReceiverIdentificationNumber != null)
                    hashCode = hashCode * 59 + this.ReceiverIdentificationNumber.GetHashCode();
                if (this.IsDealer != null)
                    hashCode = hashCode * 59 + this.IsDealer.GetHashCode();
                if (this.IsBroker != null)
                    hashCode = hashCode * 59 + this.IsBroker.GetHashCode();
                if (this.PaginationParameters != null)
                    hashCode = hashCode * 59 + this.PaginationParameters.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
