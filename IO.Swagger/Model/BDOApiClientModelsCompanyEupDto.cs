/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// BDOApiClientModelsCompanyEupDto
    /// </summary>
    [DataContract]
    public partial class BDOApiClientModelsCompanyEupDto :  IEquatable<BDOApiClientModelsCompanyEupDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BDOApiClientModelsCompanyEupDto" /> class.
        /// </summary>
        /// <param name="eupId">eupId.</param>
        /// <param name="companyId">companyId.</param>
        /// <param name="name">name.</param>
        /// <param name="identificationNumber">identificationNumber.</param>
        /// <param name="province">province.</param>
        /// <param name="district">district.</param>
        /// <param name="commune">commune.</param>
        /// <param name="locality">locality.</param>
        /// <param name="street">street.</param>
        /// <param name="buildingNumber">buildingNumber.</param>
        /// <param name="localNumber">localNumber.</param>
        /// <param name="addressHtml">addressHtml.</param>
        public BDOApiClientModelsCompanyEupDto(Guid? eupId = default(Guid?), Guid? companyId = default(Guid?), string name = default(string), string identificationNumber = default(string), string province = default(string), string district = default(string), string commune = default(string), string locality = default(string), string street = default(string), string buildingNumber = default(string), string localNumber = default(string), string addressHtml = default(string))
        {
            this.EupId = eupId;
            this.CompanyId = companyId;
            this.Name = name;
            this.IdentificationNumber = identificationNumber;
            this.Province = province;
            this.District = district;
            this.Commune = commune;
            this.Locality = locality;
            this.Street = street;
            this.BuildingNumber = buildingNumber;
            this.LocalNumber = localNumber;
            this.AddressHtml = addressHtml;
        }
        
        /// <summary>
        /// Gets or Sets EupId
        /// </summary>
        [DataMember(Name="eupId", EmitDefaultValue=false)]
        public Guid? EupId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name="companyId", EmitDefaultValue=false)]
        public Guid? CompanyId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IdentificationNumber
        /// </summary>
        [DataMember(Name="identificationNumber", EmitDefaultValue=false)]
        public string IdentificationNumber { get; set; }

        /// <summary>
        /// Gets or Sets Province
        /// </summary>
        [DataMember(Name="province", EmitDefaultValue=false)]
        public string Province { get; set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>
        [DataMember(Name="district", EmitDefaultValue=false)]
        public string District { get; set; }

        /// <summary>
        /// Gets or Sets Commune
        /// </summary>
        [DataMember(Name="commune", EmitDefaultValue=false)]
        public string Commune { get; set; }

        /// <summary>
        /// Gets or Sets Locality
        /// </summary>
        [DataMember(Name="locality", EmitDefaultValue=false)]
        public string Locality { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets BuildingNumber
        /// </summary>
        [DataMember(Name="buildingNumber", EmitDefaultValue=false)]
        public string BuildingNumber { get; set; }

        /// <summary>
        /// Gets or Sets LocalNumber
        /// </summary>
        [DataMember(Name="localNumber", EmitDefaultValue=false)]
        public string LocalNumber { get; set; }

        /// <summary>
        /// Gets or Sets AddressHtml
        /// </summary>
        [DataMember(Name="addressHtml", EmitDefaultValue=false)]
        public string AddressHtml { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BDOApiClientModelsCompanyEupDto {\n");
            sb.Append("  EupId: ").Append(EupId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IdentificationNumber: ").Append(IdentificationNumber).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Commune: ").Append(Commune).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  BuildingNumber: ").Append(BuildingNumber).Append("\n");
            sb.Append("  LocalNumber: ").Append(LocalNumber).Append("\n");
            sb.Append("  AddressHtml: ").Append(AddressHtml).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BDOApiClientModelsCompanyEupDto);
        }

        /// <summary>
        /// Returns true if BDOApiClientModelsCompanyEupDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BDOApiClientModelsCompanyEupDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BDOApiClientModelsCompanyEupDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EupId == input.EupId ||
                    (this.EupId != null &&
                    this.EupId.Equals(input.EupId))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IdentificationNumber == input.IdentificationNumber ||
                    (this.IdentificationNumber != null &&
                    this.IdentificationNumber.Equals(input.IdentificationNumber))
                ) && 
                (
                    this.Province == input.Province ||
                    (this.Province != null &&
                    this.Province.Equals(input.Province))
                ) && 
                (
                    this.District == input.District ||
                    (this.District != null &&
                    this.District.Equals(input.District))
                ) && 
                (
                    this.Commune == input.Commune ||
                    (this.Commune != null &&
                    this.Commune.Equals(input.Commune))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.BuildingNumber == input.BuildingNumber ||
                    (this.BuildingNumber != null &&
                    this.BuildingNumber.Equals(input.BuildingNumber))
                ) && 
                (
                    this.LocalNumber == input.LocalNumber ||
                    (this.LocalNumber != null &&
                    this.LocalNumber.Equals(input.LocalNumber))
                ) && 
                (
                    this.AddressHtml == input.AddressHtml ||
                    (this.AddressHtml != null &&
                    this.AddressHtml.Equals(input.AddressHtml))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EupId != null)
                    hashCode = hashCode * 59 + this.EupId.GetHashCode();
                if (this.CompanyId != null)
                    hashCode = hashCode * 59 + this.CompanyId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.IdentificationNumber != null)
                    hashCode = hashCode * 59 + this.IdentificationNumber.GetHashCode();
                if (this.Province != null)
                    hashCode = hashCode * 59 + this.Province.GetHashCode();
                if (this.District != null)
                    hashCode = hashCode * 59 + this.District.GetHashCode();
                if (this.Commune != null)
                    hashCode = hashCode * 59 + this.Commune.GetHashCode();
                if (this.Locality != null)
                    hashCode = hashCode * 59 + this.Locality.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.BuildingNumber != null)
                    hashCode = hashCode * 59 + this.BuildingNumber.GetHashCode();
                if (this.LocalNumber != null)
                    hashCode = hashCode * 59 + this.LocalNumber.GetHashCode();
                if (this.AddressHtml != null)
                    hashCode = hashCode * 59 + this.AddressHtml.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
