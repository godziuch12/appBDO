/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1DismantleTransferredWasteListItem
    /// </summary>
    [DataContract]
    public partial class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1DismantleTransferredWasteListItem :  IEquatable<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1DismantleTransferredWasteListItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1DismantleTransferredWasteListItem" /> class.
        /// </summary>
        /// <param name="dismantleTransferredWasteId">Prowadzący stację demontażu - Przekazane odpady.</param>
        /// <param name="createdAt">Data utworzenia.</param>
        /// <param name="wasteCode">Kod odpadu.</param>
        /// <param name="recycledWasteMass">Masa odpadów przekazanych w kraju do recyklingu [Mg].</param>
        /// <param name="energyRecoveryWasteMass">Masa odpadów przekazanych w kraju do odzysku energii [Mg].</param>
        /// <param name="otherThanRecycledWasteMass">Masa odpadów przekazanych w kraju innemu procesowi odzysku [Mg].</param>
        /// <param name="shreddedWasteMass">Masa odpadów przekazanych w kraju do rozdrobnienia w strzępiarce [Mg].</param>
        /// <param name="disposedWasteMass">Masa odpadów przekazanych w kraju do unieszkodliwienia [Mg].</param>
        /// <param name="transferredAbroadWasteMass">Masa odpadów przekazanych do innego kraju [Mg].</param>
        /// <param name="transferredAbroad">Odpady przekazane do innego kraju.</param>
        /// <param name="transferredAbroadTransferDate">Data rozpoczęcia transportu.</param>
        /// <param name="receiveConfirmationDate">Data otrzymania potwierdzenia.</param>
        /// <param name="createdByUser">Utworzone przez użytkownika.</param>
        /// <param name="wasteCodeExtended">Kod ex.</param>
        /// <param name="wasteCodeExtendedDescription">Rodzaj odpadu ex.</param>
        /// <param name="hazardousWasteReclassification">Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne.</param>
        /// <param name="hazardousWasteReclassificationDescription">Rodzaj odpadu.</param>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1DismantleTransferredWasteListItem(Guid? dismantleTransferredWasteId = default(Guid?), DateTime? createdAt = default(DateTime?), string wasteCode = default(string), double? recycledWasteMass = default(double?), double? energyRecoveryWasteMass = default(double?), double? otherThanRecycledWasteMass = default(double?), double? shreddedWasteMass = default(double?), double? disposedWasteMass = default(double?), double? transferredAbroadWasteMass = default(double?), bool? transferredAbroad = default(bool?), DateTime? transferredAbroadTransferDate = default(DateTime?), DateTime? receiveConfirmationDate = default(DateTime?), string createdByUser = default(string), bool? wasteCodeExtended = default(bool?), string wasteCodeExtendedDescription = default(string), bool? hazardousWasteReclassification = default(bool?), string hazardousWasteReclassificationDescription = default(string))
        {
            this.DismantleTransferredWasteId = dismantleTransferredWasteId;
            this.CreatedAt = createdAt;
            this.WasteCode = wasteCode;
            this.RecycledWasteMass = recycledWasteMass;
            this.EnergyRecoveryWasteMass = energyRecoveryWasteMass;
            this.OtherThanRecycledWasteMass = otherThanRecycledWasteMass;
            this.ShreddedWasteMass = shreddedWasteMass;
            this.DisposedWasteMass = disposedWasteMass;
            this.TransferredAbroadWasteMass = transferredAbroadWasteMass;
            this.TransferredAbroad = transferredAbroad;
            this.TransferredAbroadTransferDate = transferredAbroadTransferDate;
            this.ReceiveConfirmationDate = receiveConfirmationDate;
            this.CreatedByUser = createdByUser;
            this.WasteCodeExtended = wasteCodeExtended;
            this.WasteCodeExtendedDescription = wasteCodeExtendedDescription;
            this.HazardousWasteReclassification = hazardousWasteReclassification;
            this.HazardousWasteReclassificationDescription = hazardousWasteReclassificationDescription;
        }
        
        /// <summary>
        /// Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <value>Prowadzący stację demontażu - Przekazane odpady</value>
        [DataMember(Name="dismantleTransferredWasteId", EmitDefaultValue=false)]
        public Guid? DismantleTransferredWasteId { get; set; }

        /// <summary>
        /// Data utworzenia
        /// </summary>
        /// <value>Data utworzenia</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Kod odpadu
        /// </summary>
        /// <value>Kod odpadu</value>
        [DataMember(Name="wasteCode", EmitDefaultValue=false)]
        public string WasteCode { get; set; }

        /// <summary>
        /// Masa odpadów przekazanych w kraju do recyklingu [Mg]
        /// </summary>
        /// <value>Masa odpadów przekazanych w kraju do recyklingu [Mg]</value>
        [DataMember(Name="recycledWasteMass", EmitDefaultValue=false)]
        public double? RecycledWasteMass { get; set; }

        /// <summary>
        /// Masa odpadów przekazanych w kraju do odzysku energii [Mg]
        /// </summary>
        /// <value>Masa odpadów przekazanych w kraju do odzysku energii [Mg]</value>
        [DataMember(Name="energyRecoveryWasteMass", EmitDefaultValue=false)]
        public double? EnergyRecoveryWasteMass { get; set; }

        /// <summary>
        /// Masa odpadów przekazanych w kraju innemu procesowi odzysku [Mg]
        /// </summary>
        /// <value>Masa odpadów przekazanych w kraju innemu procesowi odzysku [Mg]</value>
        [DataMember(Name="otherThanRecycledWasteMass", EmitDefaultValue=false)]
        public double? OtherThanRecycledWasteMass { get; set; }

        /// <summary>
        /// Masa odpadów przekazanych w kraju do rozdrobnienia w strzępiarce [Mg]
        /// </summary>
        /// <value>Masa odpadów przekazanych w kraju do rozdrobnienia w strzępiarce [Mg]</value>
        [DataMember(Name="shreddedWasteMass", EmitDefaultValue=false)]
        public double? ShreddedWasteMass { get; set; }

        /// <summary>
        /// Masa odpadów przekazanych w kraju do unieszkodliwienia [Mg]
        /// </summary>
        /// <value>Masa odpadów przekazanych w kraju do unieszkodliwienia [Mg]</value>
        [DataMember(Name="disposedWasteMass", EmitDefaultValue=false)]
        public double? DisposedWasteMass { get; set; }

        /// <summary>
        /// Masa odpadów przekazanych do innego kraju [Mg]
        /// </summary>
        /// <value>Masa odpadów przekazanych do innego kraju [Mg]</value>
        [DataMember(Name="transferredAbroadWasteMass", EmitDefaultValue=false)]
        public double? TransferredAbroadWasteMass { get; set; }

        /// <summary>
        /// Odpady przekazane do innego kraju
        /// </summary>
        /// <value>Odpady przekazane do innego kraju</value>
        [DataMember(Name="transferredAbroad", EmitDefaultValue=false)]
        public bool? TransferredAbroad { get; set; }

        /// <summary>
        /// Data rozpoczęcia transportu
        /// </summary>
        /// <value>Data rozpoczęcia transportu</value>
        [DataMember(Name="transferredAbroadTransferDate", EmitDefaultValue=false)]
        public DateTime? TransferredAbroadTransferDate { get; set; }

        /// <summary>
        /// Data otrzymania potwierdzenia
        /// </summary>
        /// <value>Data otrzymania potwierdzenia</value>
        [DataMember(Name="receiveConfirmationDate", EmitDefaultValue=false)]
        public DateTime? ReceiveConfirmationDate { get; set; }

        /// <summary>
        /// Utworzone przez użytkownika
        /// </summary>
        /// <value>Utworzone przez użytkownika</value>
        [DataMember(Name="createdByUser", EmitDefaultValue=false)]
        public string CreatedByUser { get; set; }

        /// <summary>
        /// Kod ex
        /// </summary>
        /// <value>Kod ex</value>
        [DataMember(Name="wasteCodeExtended", EmitDefaultValue=false)]
        public bool? WasteCodeExtended { get; set; }

        /// <summary>
        /// Rodzaj odpadu ex
        /// </summary>
        /// <value>Rodzaj odpadu ex</value>
        [DataMember(Name="wasteCodeExtendedDescription", EmitDefaultValue=false)]
        public string WasteCodeExtendedDescription { get; set; }

        /// <summary>
        /// Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne
        /// </summary>
        /// <value>Zmiana statusu odpadów niebezpiecznych na odpady inne niż niebezpieczne</value>
        [DataMember(Name="hazardousWasteReclassification", EmitDefaultValue=false)]
        public bool? HazardousWasteReclassification { get; set; }

        /// <summary>
        /// Rodzaj odpadu
        /// </summary>
        /// <value>Rodzaj odpadu</value>
        [DataMember(Name="hazardousWasteReclassificationDescription", EmitDefaultValue=false)]
        public string HazardousWasteReclassificationDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1DismantleTransferredWasteListItem {\n");
            sb.Append("  DismantleTransferredWasteId: ").Append(DismantleTransferredWasteId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  WasteCode: ").Append(WasteCode).Append("\n");
            sb.Append("  RecycledWasteMass: ").Append(RecycledWasteMass).Append("\n");
            sb.Append("  EnergyRecoveryWasteMass: ").Append(EnergyRecoveryWasteMass).Append("\n");
            sb.Append("  OtherThanRecycledWasteMass: ").Append(OtherThanRecycledWasteMass).Append("\n");
            sb.Append("  ShreddedWasteMass: ").Append(ShreddedWasteMass).Append("\n");
            sb.Append("  DisposedWasteMass: ").Append(DisposedWasteMass).Append("\n");
            sb.Append("  TransferredAbroadWasteMass: ").Append(TransferredAbroadWasteMass).Append("\n");
            sb.Append("  TransferredAbroad: ").Append(TransferredAbroad).Append("\n");
            sb.Append("  TransferredAbroadTransferDate: ").Append(TransferredAbroadTransferDate).Append("\n");
            sb.Append("  ReceiveConfirmationDate: ").Append(ReceiveConfirmationDate).Append("\n");
            sb.Append("  CreatedByUser: ").Append(CreatedByUser).Append("\n");
            sb.Append("  WasteCodeExtended: ").Append(WasteCodeExtended).Append("\n");
            sb.Append("  WasteCodeExtendedDescription: ").Append(WasteCodeExtendedDescription).Append("\n");
            sb.Append("  HazardousWasteReclassification: ").Append(HazardousWasteReclassification).Append("\n");
            sb.Append("  HazardousWasteReclassificationDescription: ").Append(HazardousWasteReclassificationDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1DismantleTransferredWasteListItem);
        }

        /// <summary>
        /// Returns true if WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1DismantleTransferredWasteListItem instances are equal
        /// </summary>
        /// <param name="input">Instance of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1DismantleTransferredWasteListItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1DismantleTransferredWasteListItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DismantleTransferredWasteId == input.DismantleTransferredWasteId ||
                    (this.DismantleTransferredWasteId != null &&
                    this.DismantleTransferredWasteId.Equals(input.DismantleTransferredWasteId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.WasteCode == input.WasteCode ||
                    (this.WasteCode != null &&
                    this.WasteCode.Equals(input.WasteCode))
                ) && 
                (
                    this.RecycledWasteMass == input.RecycledWasteMass ||
                    (this.RecycledWasteMass != null &&
                    this.RecycledWasteMass.Equals(input.RecycledWasteMass))
                ) && 
                (
                    this.EnergyRecoveryWasteMass == input.EnergyRecoveryWasteMass ||
                    (this.EnergyRecoveryWasteMass != null &&
                    this.EnergyRecoveryWasteMass.Equals(input.EnergyRecoveryWasteMass))
                ) && 
                (
                    this.OtherThanRecycledWasteMass == input.OtherThanRecycledWasteMass ||
                    (this.OtherThanRecycledWasteMass != null &&
                    this.OtherThanRecycledWasteMass.Equals(input.OtherThanRecycledWasteMass))
                ) && 
                (
                    this.ShreddedWasteMass == input.ShreddedWasteMass ||
                    (this.ShreddedWasteMass != null &&
                    this.ShreddedWasteMass.Equals(input.ShreddedWasteMass))
                ) && 
                (
                    this.DisposedWasteMass == input.DisposedWasteMass ||
                    (this.DisposedWasteMass != null &&
                    this.DisposedWasteMass.Equals(input.DisposedWasteMass))
                ) && 
                (
                    this.TransferredAbroadWasteMass == input.TransferredAbroadWasteMass ||
                    (this.TransferredAbroadWasteMass != null &&
                    this.TransferredAbroadWasteMass.Equals(input.TransferredAbroadWasteMass))
                ) && 
                (
                    this.TransferredAbroad == input.TransferredAbroad ||
                    (this.TransferredAbroad != null &&
                    this.TransferredAbroad.Equals(input.TransferredAbroad))
                ) && 
                (
                    this.TransferredAbroadTransferDate == input.TransferredAbroadTransferDate ||
                    (this.TransferredAbroadTransferDate != null &&
                    this.TransferredAbroadTransferDate.Equals(input.TransferredAbroadTransferDate))
                ) && 
                (
                    this.ReceiveConfirmationDate == input.ReceiveConfirmationDate ||
                    (this.ReceiveConfirmationDate != null &&
                    this.ReceiveConfirmationDate.Equals(input.ReceiveConfirmationDate))
                ) && 
                (
                    this.CreatedByUser == input.CreatedByUser ||
                    (this.CreatedByUser != null &&
                    this.CreatedByUser.Equals(input.CreatedByUser))
                ) && 
                (
                    this.WasteCodeExtended == input.WasteCodeExtended ||
                    (this.WasteCodeExtended != null &&
                    this.WasteCodeExtended.Equals(input.WasteCodeExtended))
                ) && 
                (
                    this.WasteCodeExtendedDescription == input.WasteCodeExtendedDescription ||
                    (this.WasteCodeExtendedDescription != null &&
                    this.WasteCodeExtendedDescription.Equals(input.WasteCodeExtendedDescription))
                ) && 
                (
                    this.HazardousWasteReclassification == input.HazardousWasteReclassification ||
                    (this.HazardousWasteReclassification != null &&
                    this.HazardousWasteReclassification.Equals(input.HazardousWasteReclassification))
                ) && 
                (
                    this.HazardousWasteReclassificationDescription == input.HazardousWasteReclassificationDescription ||
                    (this.HazardousWasteReclassificationDescription != null &&
                    this.HazardousWasteReclassificationDescription.Equals(input.HazardousWasteReclassificationDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DismantleTransferredWasteId != null)
                    hashCode = hashCode * 59 + this.DismantleTransferredWasteId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.WasteCode != null)
                    hashCode = hashCode * 59 + this.WasteCode.GetHashCode();
                if (this.RecycledWasteMass != null)
                    hashCode = hashCode * 59 + this.RecycledWasteMass.GetHashCode();
                if (this.EnergyRecoveryWasteMass != null)
                    hashCode = hashCode * 59 + this.EnergyRecoveryWasteMass.GetHashCode();
                if (this.OtherThanRecycledWasteMass != null)
                    hashCode = hashCode * 59 + this.OtherThanRecycledWasteMass.GetHashCode();
                if (this.ShreddedWasteMass != null)
                    hashCode = hashCode * 59 + this.ShreddedWasteMass.GetHashCode();
                if (this.DisposedWasteMass != null)
                    hashCode = hashCode * 59 + this.DisposedWasteMass.GetHashCode();
                if (this.TransferredAbroadWasteMass != null)
                    hashCode = hashCode * 59 + this.TransferredAbroadWasteMass.GetHashCode();
                if (this.TransferredAbroad != null)
                    hashCode = hashCode * 59 + this.TransferredAbroad.GetHashCode();
                if (this.TransferredAbroadTransferDate != null)
                    hashCode = hashCode * 59 + this.TransferredAbroadTransferDate.GetHashCode();
                if (this.ReceiveConfirmationDate != null)
                    hashCode = hashCode * 59 + this.ReceiveConfirmationDate.GetHashCode();
                if (this.CreatedByUser != null)
                    hashCode = hashCode * 59 + this.CreatedByUser.GetHashCode();
                if (this.WasteCodeExtended != null)
                    hashCode = hashCode * 59 + this.WasteCodeExtended.GetHashCode();
                if (this.WasteCodeExtendedDescription != null)
                    hashCode = hashCode * 59 + this.WasteCodeExtendedDescription.GetHashCode();
                if (this.HazardousWasteReclassification != null)
                    hashCode = hashCode * 59 + this.HazardousWasteReclassification.GetHashCode();
                if (this.HazardousWasteReclassificationDescription != null)
                    hashCode = hashCode * 59 + this.HazardousWasteReclassificationDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
