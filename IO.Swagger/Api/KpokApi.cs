/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKpokApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse ApproveKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ApproveKpokRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse> ApproveKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ApproveKpokRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse AssignReceiveConfirmationToKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1AssignReceiveConfirmationToKpokRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse> AssignReceiveConfirmationToKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1AssignReceiveConfirmationToKpokRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse ChangeKpokStatusToTransportConfirmation (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse> ChangeKpokStatusToTransportConfirmationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationRequest request = null);
        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1DeleteKpokRequest request = null);

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1DeleteKpokRequest request = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto GetApprovedKpok (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto> GetApprovedKpokWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto GetConfirmationGeneratedKpok (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto> GetConfirmationGeneratedKpokWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Pobranie danych karty przekazania do wydruku, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage GetKpokReceivePrintingPage (Guid? kpokId = null);

        /// <summary>
        /// Pobranie danych karty przekazania do wydruku, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage> GetKpokReceivePrintingPageWithHttpInfo (Guid? kpokId = null);
        /// <summary>
        /// Pobranie danych karty do wydruku, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage GetKpokTransferPrintingPage (Guid? kpokId = null);

        /// <summary>
        /// Pobranie danych karty do wydruku, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage> GetKpokTransferPrintingPageWithHttpInfo (Guid? kpokId = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto GetPlannedKpok (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto> GetPlannedKpokWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto GetReceiveConfirmedKpok (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto> GetReceiveConfirmedKpokWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto GetRejectedKpok (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto> GetRejectedKpokWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto GetTransportConfirmationKpok (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto> GetTransportConfirmationKpokWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto GetWithdrawnKpok (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto> GetWithdrawnKpokWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto PlanReceiveKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanReceiveKpokRequest request = null);

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto> PlanReceiveKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanReceiveKpokRequest request = null);
        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto PlanTransferKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanTransferKpokRequest request = null);

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto> PlanTransferKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanTransferKpokRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse PromoteKpokToConfirmationGenerated (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse> PromoteKpokToConfirmationGeneratedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedRequest request = null);
        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse RejectKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1RejectKpokRequest request = null);

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse> RejectKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1RejectKpokRequest request = null);
        /// <summary>
        /// Korekta odrzuconej karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse ReviseKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ReviseKpokRequest request = null);

        /// <summary>
        /// Korekta odrzuconej karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse> ReviseKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ReviseKpokRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpokAsCarrier (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpokAsCarrierWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpokAsReceiver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsReceiverRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpokAsReceiverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsReceiverRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpokAsSender (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsSenderRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpokAsSenderWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsSenderRequest request = null);
        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem&gt;</returns>
        List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem> SearchReceiverKpokAsSender (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchReceiverKpokAsSenderRequest request = null);

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>> SearchReceiverKpokAsSenderWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchReceiverKpokAsSenderRequest request = null);
        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem&gt;</returns>
        List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem> SearchSenderKpokAsReceiver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchSenderKpokAsReceiverRequest request = null);

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>> SearchSenderKpokAsReceiverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchSenderKpokAsReceiverRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateApprovedReceiveKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedReceiveKpokRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateApprovedReceiveKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedReceiveKpokRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateApprovedTransferKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedTransferKpokRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateApprovedTransferKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedTransferKpokRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdatePlannedReceiveKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedReceiveKpokRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdatePlannedReceiveKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedReceiveKpokRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdatePlannedTransferKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedTransferKpokRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdatePlannedTransferKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedTransferKpokRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse WithdrawnKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1WithdrawnKpokRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse> WithdrawnKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1WithdrawnKpokRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse> ApproveKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ApproveKpokRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse>> ApproveKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ApproveKpokRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse> AssignReceiveConfirmationToKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1AssignReceiveConfirmationToKpokRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse>> AssignReceiveConfirmationToKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1AssignReceiveConfirmationToKpokRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse> ChangeKpokStatusToTransportConfirmationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse>> ChangeKpokStatusToTransportConfirmationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationRequest request = null);
        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1DeleteKpokRequest request = null);

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1DeleteKpokRequest request = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto> GetApprovedKpokAsync (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto>> GetApprovedKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto> GetConfirmationGeneratedKpokAsync (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto>> GetConfirmationGeneratedKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Pobranie danych karty przekazania do wydruku, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage> GetKpokReceivePrintingPageAsync (Guid? kpokId = null);

        /// <summary>
        /// Pobranie danych karty przekazania do wydruku, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage>> GetKpokReceivePrintingPageAsyncWithHttpInfo (Guid? kpokId = null);
        /// <summary>
        /// Pobranie danych karty do wydruku, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage> GetKpokTransferPrintingPageAsync (Guid? kpokId = null);

        /// <summary>
        /// Pobranie danych karty do wydruku, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage>> GetKpokTransferPrintingPageAsyncWithHttpInfo (Guid? kpokId = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto> GetPlannedKpokAsync (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto>> GetPlannedKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto> GetReceiveConfirmedKpokAsync (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto>> GetReceiveConfirmedKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto> GetRejectedKpokAsync (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto>> GetRejectedKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto> GetTransportConfirmationKpokAsync (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto>> GetTransportConfirmationKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto> GetWithdrawnKpokAsync (Guid? kpokId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto>> GetWithdrawnKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null);
        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto> PlanReceiveKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanReceiveKpokRequest request = null);

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto>> PlanReceiveKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanReceiveKpokRequest request = null);
        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto> PlanTransferKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanTransferKpokRequest request = null);

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto>> PlanTransferKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanTransferKpokRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse> PromoteKpokToConfirmationGeneratedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse>> PromoteKpokToConfirmationGeneratedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedRequest request = null);
        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse> RejectKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1RejectKpokRequest request = null);

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse>> RejectKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1RejectKpokRequest request = null);
        /// <summary>
        /// Korekta odrzuconej karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse> ReviseKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ReviseKpokRequest request = null);

        /// <summary>
        /// Korekta odrzuconej karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse>> ReviseKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ReviseKpokRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpokAsCarrierAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpokAsCarrierAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpokAsReceiverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsReceiverRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpokAsReceiverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsReceiverRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpokAsSenderAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsSenderRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpokAsSenderAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsSenderRequest request = null);
        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>> SearchReceiverKpokAsSenderAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchReceiverKpokAsSenderRequest request = null);

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>>> SearchReceiverKpokAsSenderAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchReceiverKpokAsSenderRequest request = null);
        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>> SearchSenderKpokAsReceiverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchSenderKpokAsReceiverRequest request = null);

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>>> SearchSenderKpokAsReceiverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchSenderKpokAsReceiverRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateApprovedReceiveKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedReceiveKpokRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApprovedReceiveKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedReceiveKpokRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateApprovedTransferKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedTransferKpokRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApprovedTransferKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedTransferKpokRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdatePlannedReceiveKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedReceiveKpokRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlannedReceiveKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedReceiveKpokRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdatePlannedTransferKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedTransferKpokRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Przekazanie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlannedTransferKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedTransferKpokRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse> WithdrawnKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1WithdrawnKpokRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse>> WithdrawnKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1WithdrawnKpokRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KpokApi : IKpokApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KpokApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KpokApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KpokApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KpokApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse ApproveKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ApproveKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse> localVarResponse = ApproveKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse > ApproveKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ApproveKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/approve/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse> ApproveKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ApproveKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse> localVarResponse = await ApproveKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse>> ApproveKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ApproveKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/approve/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApproveKpokResponse)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse AssignReceiveConfirmationToKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1AssignReceiveConfirmationToKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse> localVarResponse = AssignReceiveConfirmationToKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse > AssignReceiveConfirmationToKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1AssignReceiveConfirmationToKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/assign/receiveconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignReceiveConfirmationToKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse> AssignReceiveConfirmationToKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1AssignReceiveConfirmationToKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse> localVarResponse = await AssignReceiveConfirmationToKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse>> AssignReceiveConfirmationToKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1AssignReceiveConfirmationToKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/assign/receiveconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignReceiveConfirmationToKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1AssignReceiveConfirmationToKpokResponse)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse ChangeKpokStatusToTransportConfirmation (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse> localVarResponse = ChangeKpokStatusToTransportConfirmationWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse > ChangeKpokStatusToTransportConfirmationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/status/transportconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeKpokStatusToTransportConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse> ChangeKpokStatusToTransportConfirmationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse> localVarResponse = await ChangeKpokStatusToTransportConfirmationAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse>> ChangeKpokStatusToTransportConfirmationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/status/transportconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeKpokStatusToTransportConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ChangeKpokStatusToTransportConfirmationResponse)));
        }

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1DeleteKpokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1DeleteKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1DeleteKpokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1DeleteKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto GetApprovedKpok (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto> localVarResponse = GetApprovedKpokWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto > GetApprovedKpokWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/approved/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApprovedKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto> GetApprovedKpokAsync (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto> localVarResponse = await GetApprovedKpokAsyncWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto>> GetApprovedKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/approved/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApprovedKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ApprovedKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto GetConfirmationGeneratedKpok (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto> localVarResponse = GetConfirmationGeneratedKpokWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto > GetConfirmationGeneratedKpokWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/confirmationgenerated/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfirmationGeneratedKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto> GetConfirmationGeneratedKpokAsync (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto> localVarResponse = await GetConfirmationGeneratedKpokAsyncWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto>> GetConfirmationGeneratedKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/confirmationgenerated/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfirmationGeneratedKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ConfirmationGeneratedKpokDto)));
        }

        /// <summary>
        /// Pobranie danych karty przekazania do wydruku, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage GetKpokReceivePrintingPage (Guid? kpokId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage> localVarResponse = GetKpokReceivePrintingPageWithHttpInfo(kpokId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pobranie danych karty przekazania do wydruku, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage > GetKpokReceivePrintingPageWithHttpInfo (Guid? kpokId = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/printingpage/receive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKpokReceivePrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage)));
        }

        /// <summary>
        /// Pobranie danych karty przekazania do wydruku, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage> GetKpokReceivePrintingPageAsync (Guid? kpokId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage> localVarResponse = await GetKpokReceivePrintingPageAsyncWithHttpInfo(kpokId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pobranie danych karty przekazania do wydruku, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage>> GetKpokReceivePrintingPageAsyncWithHttpInfo (Guid? kpokId = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/printingpage/receive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKpokReceivePrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokReceivePrintingPage)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage GetKpokTransferPrintingPage (Guid? kpokId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage> localVarResponse = GetKpokTransferPrintingPageWithHttpInfo(kpokId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pobranie danych karty do wydruku, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage > GetKpokTransferPrintingPageWithHttpInfo (Guid? kpokId = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/printingpage/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKpokTransferPrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage> GetKpokTransferPrintingPageAsync (Guid? kpokId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage> localVarResponse = await GetKpokTransferPrintingPageAsyncWithHttpInfo(kpokId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pobranie danych karty do wydruku, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage>> GetKpokTransferPrintingPageAsyncWithHttpInfo (Guid? kpokId = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/printingpage/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKpokTransferPrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokTransferPrintingPage)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto GetPlannedKpok (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto> localVarResponse = GetPlannedKpokWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto > GetPlannedKpokWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/planned/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlannedKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto> GetPlannedKpokAsync (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto> localVarResponse = await GetPlannedKpokAsyncWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto>> GetPlannedKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/planned/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlannedKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto GetReceiveConfirmedKpok (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto> localVarResponse = GetReceiveConfirmedKpokWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto > GetReceiveConfirmedKpokWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/receiveconfirmed/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReceiveConfirmedKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto> GetReceiveConfirmedKpokAsync (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto> localVarResponse = await GetReceiveConfirmedKpokAsyncWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto>> GetReceiveConfirmedKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/receiveconfirmed/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReceiveConfirmedKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiveConfirmedKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto GetRejectedKpok (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto> localVarResponse = GetRejectedKpokWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto > GetRejectedKpokWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/rejected/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRejectedKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto> GetRejectedKpokAsync (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto> localVarResponse = await GetRejectedKpokAsyncWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto>> GetRejectedKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/rejected/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRejectedKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectedKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto GetTransportConfirmationKpok (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto> localVarResponse = GetTransportConfirmationKpokWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto > GetTransportConfirmationKpokWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/transportconfirmation/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransportConfirmationKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto> GetTransportConfirmationKpokAsync (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto> localVarResponse = await GetTransportConfirmationKpokAsyncWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto>> GetTransportConfirmationKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/transportconfirmation/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransportConfirmationKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1TransportConfirmationKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto GetWithdrawnKpok (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto> localVarResponse = GetWithdrawnKpokWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto > GetWithdrawnKpokWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/withdrawn/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWithdrawnKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto> GetWithdrawnKpokAsync (Guid? kpokId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto> localVarResponse = await GetWithdrawnKpokAsyncWithHttpInfo(kpokId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpokId">Id karty (optional)</param>
        /// <param name="companyType"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto>> GetWithdrawnKpokAsyncWithHttpInfo (Guid? kpokId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/withdrawn/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpokId", kpokId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWithdrawnKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokDto)));
        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto PlanReceiveKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanReceiveKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto> localVarResponse = PlanReceiveKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto > PlanReceiveKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanReceiveKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/create/plannedreceivecard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanReceiveKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto)));
        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto> PlanReceiveKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanReceiveKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto> localVarResponse = await PlanReceiveKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto>> PlanReceiveKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanReceiveKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/create/plannedreceivecard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanReceiveKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedReceiveKpokDto)));
        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto PlanTransferKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanTransferKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto> localVarResponse = PlanTransferKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto > PlanTransferKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanTransferKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/create/plannedtransfercard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanTransferKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto)));
        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto> PlanTransferKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanTransferKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto> localVarResponse = await PlanTransferKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto>> PlanTransferKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PlanTransferKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/create/plannedtransfercard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanTransferKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PlannedTransferKpokDto)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse PromoteKpokToConfirmationGenerated (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse> localVarResponse = PromoteKpokToConfirmationGeneratedWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse > PromoteKpokToConfirmationGeneratedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/promote/confirmationgenerated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PromoteKpokToConfirmationGenerated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse> PromoteKpokToConfirmationGeneratedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse> localVarResponse = await PromoteKpokToConfirmationGeneratedAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse>> PromoteKpokToConfirmationGeneratedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/promote/confirmationgenerated";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PromoteKpokToConfirmationGenerated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1PromoteKpokToConfirmationGeneratedResponse)));
        }

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse RejectKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1RejectKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse> localVarResponse = RejectKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse > RejectKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1RejectKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/reject/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RejectKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse)));
        }

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse> RejectKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1RejectKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse> localVarResponse = await RejectKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse>> RejectKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1RejectKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/reject/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RejectKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1RejectKpokResponse)));
        }

        /// <summary>
        /// Korekta odrzuconej karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse ReviseKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ReviseKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse> localVarResponse = ReviseKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Korekta odrzuconej karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse > ReviseKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ReviseKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/revise";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviseKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse)));
        }

        /// <summary>
        /// Korekta odrzuconej karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse> ReviseKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ReviseKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse> localVarResponse = await ReviseKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Korekta odrzuconej karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse>> ReviseKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1ReviseKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/revise";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviseKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReviseKpokResponse)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpokAsCarrier (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = SearchKpokAsCarrierWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull > SearchKpokAsCarrierWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/carrier/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpokAsCarrier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpokAsCarrierAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = await SearchKpokAsCarrierAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpokAsCarrierAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsCarrierRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/carrier/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpokAsCarrier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpokAsReceiver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsReceiverRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = SearchKpokAsReceiverWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull > SearchKpokAsReceiverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsReceiverRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/receiver/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpokAsReceiver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpokAsReceiverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsReceiverRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = await SearchKpokAsReceiverAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpokAsReceiverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsReceiverRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/receiver/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpokAsReceiver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpokAsSender (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsSenderRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = SearchKpokAsSenderWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull > SearchKpokAsSenderWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsSenderRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/sender/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpokAsSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpokAsSenderAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsSenderRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = await SearchKpokAsSenderAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpokAsSenderAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchKpokAsSenderRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/sender/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpokAsSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1KpokAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem> SearchReceiverKpokAsSender (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchReceiverKpokAsSenderRequest request = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>> localVarResponse = SearchReceiverKpokAsSenderWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem> > SearchReceiverKpokAsSenderWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchReceiverKpokAsSenderRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/receivercards/sender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchReceiverKpokAsSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>)));
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>> SearchReceiverKpokAsSenderAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchReceiverKpokAsSenderRequest request = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>> localVarResponse = await SearchReceiverKpokAsSenderAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>>> SearchReceiverKpokAsSenderAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchReceiverKpokAsSenderRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/receivercards/sender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchReceiverKpokAsSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1ReceiverKpokAsSenderListItem>)));
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem> SearchSenderKpokAsReceiver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchSenderKpokAsReceiverRequest request = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>> localVarResponse = SearchSenderKpokAsReceiverWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem> > SearchSenderKpokAsReceiverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchSenderKpokAsReceiverRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/sendercards/receiver";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchSenderKpokAsReceiver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>)));
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>> SearchSenderKpokAsReceiverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchSenderKpokAsReceiverRequest request = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>> localVarResponse = await SearchSenderKpokAsReceiverAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>>> SearchSenderKpokAsReceiverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardSearchCardsV1SearchSenderKpokAsReceiverRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/sendercards/receiver";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchSenderKpokAsReceiver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1SenderKpokAsReceiverListItem>)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateApprovedReceiveKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedReceiveKpokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateApprovedReceiveKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateApprovedReceiveKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedReceiveKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/update/approvedreceivecard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApprovedReceiveKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateApprovedReceiveKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedReceiveKpokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateApprovedReceiveKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApprovedReceiveKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedReceiveKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/update/approvedreceivecard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApprovedReceiveKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateApprovedTransferKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedTransferKpokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateApprovedTransferKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateApprovedTransferKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedTransferKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/update/approvedtransfercard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApprovedTransferKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateApprovedTransferKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedTransferKpokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateApprovedTransferKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApprovedTransferKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdateApprovedTransferKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/update/approvedtransfercard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApprovedTransferKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdatePlannedReceiveKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedReceiveKpokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdatePlannedReceiveKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdatePlannedReceiveKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedReceiveKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/update/plannedreceivecard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlannedReceiveKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdatePlannedReceiveKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedReceiveKpokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdatePlannedReceiveKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlannedReceiveKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedReceiveKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/update/plannedreceivecard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlannedReceiveKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdatePlannedTransferKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedTransferKpokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdatePlannedTransferKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdatePlannedTransferKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedTransferKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/update/plannedtransfercard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlannedTransferKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdatePlannedTransferKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedTransferKpokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdatePlannedTransferKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;, dla podtypu \&quot;Przekazanie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlannedTransferKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1UpdatePlannedTransferKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/update/plannedtransfercard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlannedTransferKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse WithdrawnKpok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1WithdrawnKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse> localVarResponse = WithdrawnKpokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse > WithdrawnKpokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1WithdrawnKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/card/withdrawn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawnKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse> WithdrawnKpokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1WithdrawnKpokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse> localVarResponse = await WithdrawnKpokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse>> WithdrawnKpokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteTransferCardV1WithdrawnKpokRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpok/card/withdrawn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawnKpok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteTransferCardV1WithdrawnKpokResponse)));
        }

    }
}
