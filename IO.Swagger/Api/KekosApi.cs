/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKekosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Tworzenie wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse CreateBatchOfGeneratedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse> CreateBatchOfGeneratedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentRequest request = null);
        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse CreateKekos (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosRequest request = null);

        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse> CreateKekosWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosRequest request = null);
        /// <summary>
        /// Tworzeniw wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse CreateKekosAppliedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentRequest request = null);

        /// <summary>
        /// Tworzeniw wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse> CreateKekosAppliedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse CreateKekosResearchCard (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse> CreateKekosResearchCardWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardRequest request = null);
        /// <summary>
        /// Usunięcie wpisu wytworzonych osadów
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteBatchOfGeneratedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteBatchOfGeneratedSedimentRequest request = null);

        /// <summary>
        /// Usunięcie wpisu wytworzonych osadów
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteBatchOfGeneratedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteBatchOfGeneratedSedimentRequest request = null);
        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKekos (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosRequest request = null);

        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKekosWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKekosAppliedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosAppliedSedimentRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKekosAppliedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosAppliedSedimentRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKekosResearchCard (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosResearchCardRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKekosResearchCardWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosResearchCardRequest request = null);
        /// <summary>
        /// Zwraca wpis \&quot;Wytworzonych osadów\&quot; z karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGeneratedSedimentId">Id wpisu \&quot;Wytworzone osady\&quot; (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse GetBatchGeneratedSediment (Guid? batchGeneratedSedimentId = null);

        /// <summary>
        /// Zwraca wpis \&quot;Wytworzonych osadów\&quot; z karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGeneratedSedimentId">Id wpisu \&quot;Wytworzone osady\&quot; (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse> GetBatchGeneratedSedimentWithHttpInfo (Guid? batchGeneratedSedimentId = null);
        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse GetBatchGeneratedSediments (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse> GetBatchGeneratedSedimentsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsRequest request = null);
        /// <summary>
        /// Lista kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto&gt;</returns>
        List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto> GetGivenYearKekosesByEup ();

        /// <summary>
        /// Lista kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>> GetGivenYearKekosesByEupWithHttpInfo ();
        /// <summary>
        /// Zwraca wpis \&quot;Zastosowanych osadów\&quot; z karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosAppliedSedimentId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse GetKekosAppliedSediment (Guid? kekosAppliedSedimentId = null);

        /// <summary>
        /// Zwraca wpis \&quot;Zastosowanych osadów\&quot; z karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosAppliedSedimentId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse> GetKekosAppliedSedimentWithHttpInfo (Guid? kekosAppliedSedimentId = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse GetKekosAppliedSediments (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse> GetKekosAppliedSedimentsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsRequest request = null);
        /// <summary>
        /// Zwraca masę zastosowanych osadów dla karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse GetKekosAppliedSedimentsMassByBatchId (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdRequest request = null);

        /// <summary>
        /// Zwraca masę zastosowanych osadów dla karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse> GetKekosAppliedSedimentsMassByBatchIdWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdRequest request = null);
        /// <summary>
        /// Pobranie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId">Id karty (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse GetKekosById (Guid? kekosId = null);

        /// <summary>
        /// Pobranie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId">Id karty (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse> GetKekosByIdWithHttpInfo (Guid? kekosId = null);
        /// <summary>
        /// Zwraca dane do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse GetKekosPrintingPage (Guid? kekosId = null);

        /// <summary>
        /// Zwraca dane do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse> GetKekosPrintingPageWithHttpInfo (Guid? kekosId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse GetKekosResearchCard (Guid? kekosResearchCardId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse> GetKekosResearchCardWithHttpInfo (Guid? kekosResearchCardId = null);
        /// <summary>
        /// Zwraca wpis \&quot;Wyniki badań
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosBatchOfGeneratedSedimentId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse GetKekosResearchCards (Guid? kekosBatchOfGeneratedSedimentId = null);

        /// <summary>
        /// Zwraca wpis \&quot;Wyniki badań
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosBatchOfGeneratedSedimentId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse> GetKekosResearchCardsWithHttpInfo (Guid? kekosBatchOfGeneratedSedimentId = null);
        /// <summary>
        /// Zwraca dane do wydruku karty badań
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse GetKekosResearchPrintingPage (Guid? kekosResearchCardId = null);

        /// <summary>
        /// Zwraca dane do wydruku karty badań
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse> GetKekosResearchPrintingPageWithHttpInfo (Guid? kekosResearchCardId = null);
        /// <summary>
        /// Zwraca dane podsumowujące
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse GetKekosSummary (Guid? kekosId = null);

        /// <summary>
        /// Zwraca dane podsumowujące
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse> GetKekosSummaryWithHttpInfo (Guid? kekosId = null);
        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateBatchOfGeneratedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateBatchOfGeneratedSedimentRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateBatchOfGeneratedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateBatchOfGeneratedSedimentRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKekosAppliedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKekosAppliedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest request = null);
        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKekosInitialMass (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosInitialMassRequest request = null);

        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKekosInitialMassWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosInitialMassRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKekosResearchCard (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosResearchCardRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKekosResearchCardWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosResearchCardRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Tworzenie wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse> CreateBatchOfGeneratedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse>> CreateBatchOfGeneratedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentRequest request = null);
        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse> CreateKekosAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosRequest request = null);

        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse>> CreateKekosAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosRequest request = null);
        /// <summary>
        /// Tworzeniw wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse> CreateKekosAppliedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentRequest request = null);

        /// <summary>
        /// Tworzeniw wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse>> CreateKekosAppliedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse> CreateKekosResearchCardAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse>> CreateKekosResearchCardAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardRequest request = null);
        /// <summary>
        /// Usunięcie wpisu wytworzonych osadów
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteBatchOfGeneratedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteBatchOfGeneratedSedimentRequest request = null);

        /// <summary>
        /// Usunięcie wpisu wytworzonych osadów
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBatchOfGeneratedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteBatchOfGeneratedSedimentRequest request = null);
        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKekosAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosRequest request = null);

        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKekosAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKekosAppliedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosAppliedSedimentRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKekosAppliedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosAppliedSedimentRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKekosResearchCardAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosResearchCardRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKekosResearchCardAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosResearchCardRequest request = null);
        /// <summary>
        /// Zwraca wpis \&quot;Wytworzonych osadów\&quot; z karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGeneratedSedimentId">Id wpisu \&quot;Wytworzone osady\&quot; (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse> GetBatchGeneratedSedimentAsync (Guid? batchGeneratedSedimentId = null);

        /// <summary>
        /// Zwraca wpis \&quot;Wytworzonych osadów\&quot; z karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGeneratedSedimentId">Id wpisu \&quot;Wytworzone osady\&quot; (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse>> GetBatchGeneratedSedimentAsyncWithHttpInfo (Guid? batchGeneratedSedimentId = null);
        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse> GetBatchGeneratedSedimentsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse>> GetBatchGeneratedSedimentsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsRequest request = null);
        /// <summary>
        /// Lista kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>> GetGivenYearKekosesByEupAsync ();

        /// <summary>
        /// Lista kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>>> GetGivenYearKekosesByEupAsyncWithHttpInfo ();
        /// <summary>
        /// Zwraca wpis \&quot;Zastosowanych osadów\&quot; z karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosAppliedSedimentId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse> GetKekosAppliedSedimentAsync (Guid? kekosAppliedSedimentId = null);

        /// <summary>
        /// Zwraca wpis \&quot;Zastosowanych osadów\&quot; z karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosAppliedSedimentId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse>> GetKekosAppliedSedimentAsyncWithHttpInfo (Guid? kekosAppliedSedimentId = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse> GetKekosAppliedSedimentsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse>> GetKekosAppliedSedimentsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsRequest request = null);
        /// <summary>
        /// Zwraca masę zastosowanych osadów dla karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse> GetKekosAppliedSedimentsMassByBatchIdAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdRequest request = null);

        /// <summary>
        /// Zwraca masę zastosowanych osadów dla karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse>> GetKekosAppliedSedimentsMassByBatchIdAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdRequest request = null);
        /// <summary>
        /// Pobranie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId">Id karty (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse> GetKekosByIdAsync (Guid? kekosId = null);

        /// <summary>
        /// Pobranie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId">Id karty (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse>> GetKekosByIdAsyncWithHttpInfo (Guid? kekosId = null);
        /// <summary>
        /// Zwraca dane do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse> GetKekosPrintingPageAsync (Guid? kekosId = null);

        /// <summary>
        /// Zwraca dane do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse>> GetKekosPrintingPageAsyncWithHttpInfo (Guid? kekosId = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse> GetKekosResearchCardAsync (Guid? kekosResearchCardId = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse>> GetKekosResearchCardAsyncWithHttpInfo (Guid? kekosResearchCardId = null);
        /// <summary>
        /// Zwraca wpis \&quot;Wyniki badań
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosBatchOfGeneratedSedimentId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse> GetKekosResearchCardsAsync (Guid? kekosBatchOfGeneratedSedimentId = null);

        /// <summary>
        /// Zwraca wpis \&quot;Wyniki badań
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosBatchOfGeneratedSedimentId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse>> GetKekosResearchCardsAsyncWithHttpInfo (Guid? kekosBatchOfGeneratedSedimentId = null);
        /// <summary>
        /// Zwraca dane do wydruku karty badań
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse> GetKekosResearchPrintingPageAsync (Guid? kekosResearchCardId = null);

        /// <summary>
        /// Zwraca dane do wydruku karty badań
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse>> GetKekosResearchPrintingPageAsyncWithHttpInfo (Guid? kekosResearchCardId = null);
        /// <summary>
        /// Zwraca dane podsumowujące
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse> GetKekosSummaryAsync (Guid? kekosId = null);

        /// <summary>
        /// Zwraca dane podsumowujące
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse>> GetKekosSummaryAsyncWithHttpInfo (Guid? kekosId = null);
        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateBatchOfGeneratedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateBatchOfGeneratedSedimentRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBatchOfGeneratedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateBatchOfGeneratedSedimentRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKekosAppliedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Zastosowanych osadów\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKekosAppliedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest request = null);
        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKekosInitialMassAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosInitialMassRequest request = null);

        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKekosInitialMassAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosInitialMassRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKekosResearchCardAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosResearchCardRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Wyniki badań\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKekosResearchCardAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosResearchCardRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KekosApi : IKekosApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KekosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KekosApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KekosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KekosApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse CreateBatchOfGeneratedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse> localVarResponse = CreateBatchOfGeneratedSedimentWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse > CreateBatchOfGeneratedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/batchofgeneratedsediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBatchOfGeneratedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse> CreateBatchOfGeneratedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse> localVarResponse = await CreateBatchOfGeneratedSedimentAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse>> CreateBatchOfGeneratedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/batchofgeneratedsediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBatchOfGeneratedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateBatchOfGeneratedSedimentResponse)));
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse CreateKekos (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse> localVarResponse = CreateKekosWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse > CreateKekosWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKekos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse)));
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse> CreateKekosAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse> localVarResponse = await CreateKekosAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse>> CreateKekosAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKekos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResponse)));
        }

        /// <summary>
        /// Tworzeniw wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse CreateKekosAppliedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse> localVarResponse = CreateKekosAppliedSedimentWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzeniw wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse > CreateKekosAppliedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKekosAppliedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse)));
        }

        /// <summary>
        /// Tworzeniw wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse> CreateKekosAppliedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse> localVarResponse = await CreateKekosAppliedSedimentAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzeniw wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse>> CreateKekosAppliedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKekosAppliedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosAppliedSedimentResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse CreateKekosResearchCard (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse> localVarResponse = CreateKekosResearchCardWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse > CreateKekosResearchCardWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKekosResearchCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse> CreateKekosResearchCardAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse> localVarResponse = await CreateKekosResearchCardAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse>> CreateKekosResearchCardAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKekosResearchCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1CreateKekosResearchCardResponse)));
        }

        /// <summary>
        /// Usunięcie wpisu wytworzonych osadów 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteBatchOfGeneratedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteBatchOfGeneratedSedimentRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteBatchOfGeneratedSedimentWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu wytworzonych osadów 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteBatchOfGeneratedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteBatchOfGeneratedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/batchofgeneratedsediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBatchOfGeneratedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu wytworzonych osadów 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteBatchOfGeneratedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteBatchOfGeneratedSedimentRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteBatchOfGeneratedSedimentAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu wytworzonych osadów 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBatchOfGeneratedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteBatchOfGeneratedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/batchofgeneratedsediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteBatchOfGeneratedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKekos (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKekosWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKekosWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKekos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKekosAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKekosAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKekosAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKekos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKekosAppliedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosAppliedSedimentRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKekosAppliedSedimentWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKekosAppliedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosAppliedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKekosAppliedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKekosAppliedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosAppliedSedimentRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKekosAppliedSedimentAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKekosAppliedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosAppliedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKekosAppliedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKekosResearchCard (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosResearchCardRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKekosResearchCardWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKekosResearchCardWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosResearchCardRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKekosResearchCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKekosResearchCardAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosResearchCardRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKekosResearchCardAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKekosResearchCardAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1DeleteKekosResearchCardRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKekosResearchCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Zwraca wpis \&quot;Wytworzonych osadów\&quot; z karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGeneratedSedimentId">Id wpisu \&quot;Wytworzone osady\&quot; (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse GetBatchGeneratedSediment (Guid? batchGeneratedSedimentId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse> localVarResponse = GetBatchGeneratedSedimentWithHttpInfo(batchGeneratedSedimentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca wpis \&quot;Wytworzonych osadów\&quot; z karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGeneratedSedimentId">Id wpisu \&quot;Wytworzone osady\&quot; (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse > GetBatchGeneratedSedimentWithHttpInfo (Guid? batchGeneratedSedimentId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/batchofgeneratedsediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchGeneratedSedimentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BatchGeneratedSedimentId", batchGeneratedSedimentId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchGeneratedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse)));
        }

        /// <summary>
        /// Zwraca wpis \&quot;Wytworzonych osadów\&quot; z karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGeneratedSedimentId">Id wpisu \&quot;Wytworzone osady\&quot; (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse> GetBatchGeneratedSedimentAsync (Guid? batchGeneratedSedimentId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse> localVarResponse = await GetBatchGeneratedSedimentAsyncWithHttpInfo(batchGeneratedSedimentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca wpis \&quot;Wytworzonych osadów\&quot; z karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="batchGeneratedSedimentId">Id wpisu \&quot;Wytworzone osady\&quot; (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse>> GetBatchGeneratedSedimentAsyncWithHttpInfo (Guid? batchGeneratedSedimentId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/batchofgeneratedsediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (batchGeneratedSedimentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "BatchGeneratedSedimentId", batchGeneratedSedimentId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchGeneratedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentResponse)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse GetBatchGeneratedSediments (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse> localVarResponse = GetBatchGeneratedSedimentsWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse > GetBatchGeneratedSedimentsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/batch/generatedsediments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchGeneratedSediments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse> GetBatchGeneratedSedimentsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse> localVarResponse = await GetBatchGeneratedSedimentsAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse>> GetBatchGeneratedSedimentsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/batch/generatedsediments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBatchGeneratedSediments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetBatchGeneratedSedimentsResponse)));
        }

        /// <summary>
        /// Lista kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto> GetGivenYearKekosesByEup ()
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>> localVarResponse = GetGivenYearKekosesByEupWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto> > GetGivenYearKekosesByEupWithHttpInfo ()
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/cards/givenyear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGivenYearKekosesByEup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>)));
        }

        /// <summary>
        /// Lista kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>> GetGivenYearKekosesByEupAsync ()
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>> localVarResponse = await GetGivenYearKekosesByEupAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>>> GetGivenYearKekosesByEupAsyncWithHttpInfo ()
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/cards/givenyear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGivenYearKekosesByEup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1KekosOnListDto>)));
        }

        /// <summary>
        /// Zwraca wpis \&quot;Zastosowanych osadów\&quot; z karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosAppliedSedimentId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse GetKekosAppliedSediment (Guid? kekosAppliedSedimentId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse> localVarResponse = GetKekosAppliedSedimentWithHttpInfo(kekosAppliedSedimentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca wpis \&quot;Zastosowanych osadów\&quot; z karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosAppliedSedimentId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse > GetKekosAppliedSedimentWithHttpInfo (Guid? kekosAppliedSedimentId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosAppliedSedimentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosAppliedSedimentId", kekosAppliedSedimentId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosAppliedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse)));
        }

        /// <summary>
        /// Zwraca wpis \&quot;Zastosowanych osadów\&quot; z karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosAppliedSedimentId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse> GetKekosAppliedSedimentAsync (Guid? kekosAppliedSedimentId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse> localVarResponse = await GetKekosAppliedSedimentAsyncWithHttpInfo(kekosAppliedSedimentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca wpis \&quot;Zastosowanych osadów\&quot; z karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosAppliedSedimentId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse>> GetKekosAppliedSedimentAsyncWithHttpInfo (Guid? kekosAppliedSedimentId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosAppliedSedimentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosAppliedSedimentId", kekosAppliedSedimentId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosAppliedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse GetKekosAppliedSediments (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse> localVarResponse = GetKekosAppliedSedimentsWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse > GetKekosAppliedSedimentsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSediments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosAppliedSediments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse> GetKekosAppliedSedimentsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse> localVarResponse = await GetKekosAppliedSedimentsAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse>> GetKekosAppliedSedimentsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSediments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosAppliedSediments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsResponse)));
        }

        /// <summary>
        /// Zwraca masę zastosowanych osadów dla karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse GetKekosAppliedSedimentsMassByBatchId (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse> localVarResponse = GetKekosAppliedSedimentsMassByBatchIdWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca masę zastosowanych osadów dla karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse > GetKekosAppliedSedimentsMassByBatchIdWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSedimentsMassByBatchId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosAppliedSedimentsMassByBatchId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse)));
        }

        /// <summary>
        /// Zwraca masę zastosowanych osadów dla karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse> GetKekosAppliedSedimentsMassByBatchIdAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse> localVarResponse = await GetKekosAppliedSedimentsMassByBatchIdAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca masę zastosowanych osadów dla karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse>> GetKekosAppliedSedimentsMassByBatchIdAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSedimentsMassByBatchId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosAppliedSedimentsMassByBatchId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosAppliedSedimentsMassByBatchIdResponse)));
        }

        /// <summary>
        /// Pobranie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId">Id karty (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse GetKekosById (Guid? kekosId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse> localVarResponse = GetKekosByIdWithHttpInfo(kekosId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pobranie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId">Id karty (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse > GetKekosByIdWithHttpInfo (Guid? kekosId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosId", kekosId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse)));
        }

        /// <summary>
        /// Pobranie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId">Id karty (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse> GetKekosByIdAsync (Guid? kekosId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse> localVarResponse = await GetKekosByIdAsyncWithHttpInfo(kekosId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pobranie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId">Id karty (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse>> GetKekosByIdAsyncWithHttpInfo (Guid? kekosId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosId", kekosId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosByIdResponse)));
        }

        /// <summary>
        /// Zwraca dane do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse GetKekosPrintingPage (Guid? kekosId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse> localVarResponse = GetKekosPrintingPageWithHttpInfo(kekosId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca dane do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse > GetKekosPrintingPageWithHttpInfo (Guid? kekosId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/card/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosId", kekosId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosPrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse)));
        }

        /// <summary>
        /// Zwraca dane do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse> GetKekosPrintingPageAsync (Guid? kekosId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse> localVarResponse = await GetKekosPrintingPageAsyncWithHttpInfo(kekosId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca dane do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse>> GetKekosPrintingPageAsyncWithHttpInfo (Guid? kekosId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/card/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosId", kekosId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosPrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosPrintingPageResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse GetKekosResearchCard (Guid? kekosResearchCardId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse> localVarResponse = GetKekosResearchCardWithHttpInfo(kekosResearchCardId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse > GetKekosResearchCardWithHttpInfo (Guid? kekosResearchCardId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosResearchCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosResearchCardId", kekosResearchCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosResearchCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse> GetKekosResearchCardAsync (Guid? kekosResearchCardId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse> localVarResponse = await GetKekosResearchCardAsyncWithHttpInfo(kekosResearchCardId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse>> GetKekosResearchCardAsyncWithHttpInfo (Guid? kekosResearchCardId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosResearchCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosResearchCardId", kekosResearchCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosResearchCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardResponse)));
        }

        /// <summary>
        /// Zwraca wpis \&quot;Wyniki badań 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosBatchOfGeneratedSedimentId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse GetKekosResearchCards (Guid? kekosBatchOfGeneratedSedimentId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse> localVarResponse = GetKekosResearchCardsWithHttpInfo(kekosBatchOfGeneratedSedimentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca wpis \&quot;Wyniki badań 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosBatchOfGeneratedSedimentId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse > GetKekosResearchCardsWithHttpInfo (Guid? kekosBatchOfGeneratedSedimentId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosBatchOfGeneratedSedimentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosBatchOfGeneratedSedimentId", kekosBatchOfGeneratedSedimentId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosResearchCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse)));
        }

        /// <summary>
        /// Zwraca wpis \&quot;Wyniki badań 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosBatchOfGeneratedSedimentId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse> GetKekosResearchCardsAsync (Guid? kekosBatchOfGeneratedSedimentId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse> localVarResponse = await GetKekosResearchCardsAsyncWithHttpInfo(kekosBatchOfGeneratedSedimentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca wpis \&quot;Wyniki badań 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosBatchOfGeneratedSedimentId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse>> GetKekosResearchCardsAsyncWithHttpInfo (Guid? kekosBatchOfGeneratedSedimentId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosBatchOfGeneratedSedimentId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosBatchOfGeneratedSedimentId", kekosBatchOfGeneratedSedimentId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosResearchCards", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchCardsResponse)));
        }

        /// <summary>
        /// Zwraca dane do wydruku karty badań 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse GetKekosResearchPrintingPage (Guid? kekosResearchCardId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse> localVarResponse = GetKekosResearchPrintingPageWithHttpInfo(kekosResearchCardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca dane do wydruku karty badań 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse > GetKekosResearchPrintingPageWithHttpInfo (Guid? kekosResearchCardId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCard/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosResearchCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosResearchCardId", kekosResearchCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosResearchPrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse)));
        }

        /// <summary>
        /// Zwraca dane do wydruku karty badań 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse> GetKekosResearchPrintingPageAsync (Guid? kekosResearchCardId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse> localVarResponse = await GetKekosResearchPrintingPageAsyncWithHttpInfo(kekosResearchCardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca dane do wydruku karty badań 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosResearchCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse>> GetKekosResearchPrintingPageAsyncWithHttpInfo (Guid? kekosResearchCardId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCard/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosResearchCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosResearchCardId", kekosResearchCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosResearchPrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosResearchPrintingPageResponse)));
        }

        /// <summary>
        /// Zwraca dane podsumowujące 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse GetKekosSummary (Guid? kekosId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse> localVarResponse = GetKekosSummaryWithHttpInfo(kekosId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca dane podsumowujące 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse > GetKekosSummaryWithHttpInfo (Guid? kekosId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosId", kekosId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse)));
        }

        /// <summary>
        /// Zwraca dane podsumowujące 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse> GetKekosSummaryAsync (Guid? kekosId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse> localVarResponse = await GetKekosSummaryAsyncWithHttpInfo(kekosId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca dane podsumowujące 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kekosId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse>> GetKekosSummaryAsyncWithHttpInfo (Guid? kekosId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kekosId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KekosId", kekosId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKekosSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMunicipalSewageSludgeCardV1GetKekosSummaryResponse)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateBatchOfGeneratedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateBatchOfGeneratedSedimentRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateBatchOfGeneratedSedimentWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateBatchOfGeneratedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateBatchOfGeneratedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/batchofgeneratedsediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBatchOfGeneratedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateBatchOfGeneratedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateBatchOfGeneratedSedimentRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateBatchOfGeneratedSedimentAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytworzonych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateBatchOfGeneratedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateBatchOfGeneratedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/batchofgeneratedsediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateBatchOfGeneratedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKekosAppliedSediment (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKekosAppliedSedimentWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKekosAppliedSedimentWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKekosAppliedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKekosAppliedSedimentAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKekosAppliedSedimentAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu \&quot;Zastosowanych osadów\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKekosAppliedSedimentAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosAppliedSedimentRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/appliedSediment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKekosAppliedSediment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKekosInitialMass (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosInitialMassRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKekosInitialMassWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKekosInitialMassWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosInitialMassRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKekosInitialMass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKekosInitialMassAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosInitialMassRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKekosInitialMassAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKekosInitialMassAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosInitialMassRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKekosInitialMass", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKekosResearchCard (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosResearchCardRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKekosResearchCardWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKekosResearchCardWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosResearchCardRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKekosResearchCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKekosResearchCardAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosResearchCardRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKekosResearchCardAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu \&quot;Wyniki badań\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKekosResearchCardAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalSewageSludgeCardV1UpdateKekosResearchCardRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalSewageSludgeCard/v1/Kekos/researchCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKekosResearchCard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
