/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Zwraca rekord z danymi podmiotu zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsElasticsearchCompanyEs</returns>
        WasteRegisterPublicApiApiModelsElasticsearchCompanyEs GetCompanyById (Guid? companyId = null);

        /// <summary>
        /// Zwraca rekord z danymi podmiotu zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsElasticsearchCompanyEs</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs> GetCompanyByIdWithHttpInfo (Guid? companyId = null);
        /// <summary>
        /// Zwraca rekord z danymi miejsca prowadzenia działalności zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eupId">Id miejsca prowadzenia działalności (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsElasticsearchEupEs</returns>
        WasteRegisterPublicApiApiModelsElasticsearchEupEs GetEupById (Guid? eupId = null);

        /// <summary>
        /// Zwraca rekord z danymi miejsca prowadzenia działalności zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eupId">Id miejsca prowadzenia działalności (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsElasticsearchEupEs</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchEupEs> GetEupByIdWithHttpInfo (Guid? eupId = null);
        /// <summary>
        /// Zwraca listę 10 rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        List<WasteRegisterPublicApiApiModelsElasticsearchEupEs> GetEupsByCompanyId (Guid? companyId = null);

        /// <summary>
        /// Zwraca listę 10 rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> GetEupsByCompanyIdWithHttpInfo (Guid? companyId = null);
        /// <summary>
        /// Zwraca rekord z danymi TERYT
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsElasticsearchTerytEs</returns>
        WasteRegisterPublicApiApiModelsElasticsearchTerytEs GetTerytById (string query = null);

        /// <summary>
        /// Zwraca rekord z danymi TERYT
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsElasticsearchTerytEs</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytEs> GetTerytByIdWithHttpInfo (string query = null);
        /// <summary>
        /// Zwraca rekord z danymi gminy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs</returns>
        WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs GetTerytCommuneById (string query = null);

        /// <summary>
        /// Zwraca rekord z danymi gminy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs> GetTerytCommuneByIdWithHttpInfo (string query = null);
        /// <summary>
        /// Zwraca listę rekordów z danymi podmiotów zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Wartość zapytania (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsElasticsearchCompanyEs&gt;</returns>
        List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs> SearchCompany (string query = null);

        /// <summary>
        /// Zwraca listę rekordów z danymi podmiotów zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Wartość zapytania (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsElasticsearchCompanyEs&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>> SearchCompanyWithHttpInfo (string query = null);
        /// <summary>
        /// Zwraca listę rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu, według podanego kryterium wyszukiwania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <param name="query">Kryterium wyszukiwania. Jeśli puste, metoda zwraca 10 wyników. (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        List<WasteRegisterPublicApiApiModelsElasticsearchEupEs> SearchEupsByCompanyId (Guid? companyId = null, string query = null);

        /// <summary>
        /// Zwraca listę rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu, według podanego kryterium wyszukiwania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <param name="query">Kryterium wyszukiwania. Jeśli puste, metoda zwraca 10 wyników. (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> SearchEupsByCompanyIdWithHttpInfo (Guid? companyId = null, string query = null);
        /// <summary>
        /// Zwraca listę rekordów TERYT zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytEs&gt;</returns>
        List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs> SearchTeryt (string query = null);

        /// <summary>
        /// Zwraca listę rekordów TERYT zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytEs&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>> SearchTerytWithHttpInfo (string query = null);
        /// <summary>
        /// Zwraca listę gmin zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs&gt;</returns>
        List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs> SearchTerytCommune (string query = null);

        /// <summary>
        /// Zwraca listę gmin zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>> SearchTerytCommuneWithHttpInfo (string query = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Zwraca rekord z danymi podmiotu zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsElasticsearchCompanyEs</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs> GetCompanyByIdAsync (Guid? companyId = null);

        /// <summary>
        /// Zwraca rekord z danymi podmiotu zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsElasticsearchCompanyEs)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>> GetCompanyByIdAsyncWithHttpInfo (Guid? companyId = null);
        /// <summary>
        /// Zwraca rekord z danymi miejsca prowadzenia działalności zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eupId">Id miejsca prowadzenia działalności (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsElasticsearchEupEs</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsElasticsearchEupEs> GetEupByIdAsync (Guid? eupId = null);

        /// <summary>
        /// Zwraca rekord z danymi miejsca prowadzenia działalności zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eupId">Id miejsca prowadzenia działalności (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsElasticsearchEupEs)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> GetEupByIdAsyncWithHttpInfo (Guid? eupId = null);
        /// <summary>
        /// Zwraca listę 10 rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> GetEupsByCompanyIdAsync (Guid? companyId = null);

        /// <summary>
        /// Zwraca listę 10 rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>>> GetEupsByCompanyIdAsyncWithHttpInfo (Guid? companyId = null);
        /// <summary>
        /// Zwraca rekord z danymi TERYT
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsElasticsearchTerytEs</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsElasticsearchTerytEs> GetTerytByIdAsync (string query = null);

        /// <summary>
        /// Zwraca rekord z danymi TERYT
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsElasticsearchTerytEs)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>> GetTerytByIdAsyncWithHttpInfo (string query = null);
        /// <summary>
        /// Zwraca rekord z danymi gminy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs> GetTerytCommuneByIdAsync (string query = null);

        /// <summary>
        /// Zwraca rekord z danymi gminy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>> GetTerytCommuneByIdAsyncWithHttpInfo (string query = null);
        /// <summary>
        /// Zwraca listę rekordów z danymi podmiotów zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Wartość zapytania (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsElasticsearchCompanyEs&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>> SearchCompanyAsync (string query = null);

        /// <summary>
        /// Zwraca listę rekordów z danymi podmiotów zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Wartość zapytania (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsElasticsearchCompanyEs&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>>> SearchCompanyAsyncWithHttpInfo (string query = null);
        /// <summary>
        /// Zwraca listę rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu, według podanego kryterium wyszukiwania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <param name="query">Kryterium wyszukiwania. Jeśli puste, metoda zwraca 10 wyników. (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> SearchEupsByCompanyIdAsync (Guid? companyId = null, string query = null);

        /// <summary>
        /// Zwraca listę rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu, według podanego kryterium wyszukiwania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <param name="query">Kryterium wyszukiwania. Jeśli puste, metoda zwraca 10 wyników. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>>> SearchEupsByCompanyIdAsyncWithHttpInfo (Guid? companyId = null, string query = null);
        /// <summary>
        /// Zwraca listę rekordów TERYT zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytEs&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>> SearchTerytAsync (string query = null);

        /// <summary>
        /// Zwraca listę rekordów TERYT zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytEs&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>>> SearchTerytAsyncWithHttpInfo (string query = null);
        /// <summary>
        /// Zwraca listę gmin zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>> SearchTerytCommuneAsync (string query = null);

        /// <summary>
        /// Zwraca listę gmin zgodnie z wartością zapytania
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>>> SearchTerytCommuneAsyncWithHttpInfo (string query = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Zwraca rekord z danymi podmiotu zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsElasticsearchCompanyEs</returns>
        public WasteRegisterPublicApiApiModelsElasticsearchCompanyEs GetCompanyById (Guid? companyId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs> localVarResponse = GetCompanyByIdWithHttpInfo(companyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca rekord z danymi podmiotu zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsElasticsearchCompanyEs</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsElasticsearchCompanyEs > GetCompanyByIdWithHttpInfo (Guid? companyId = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/getcompanybyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "companyId", companyId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompanyById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsElasticsearchCompanyEs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsElasticsearchCompanyEs)));
        }

        /// <summary>
        /// Zwraca rekord z danymi podmiotu zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsElasticsearchCompanyEs</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs> GetCompanyByIdAsync (Guid? companyId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs> localVarResponse = await GetCompanyByIdAsyncWithHttpInfo(companyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca rekord z danymi podmiotu zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsElasticsearchCompanyEs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>> GetCompanyByIdAsyncWithHttpInfo (Guid? companyId = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/getcompanybyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "companyId", companyId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCompanyById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsElasticsearchCompanyEs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsElasticsearchCompanyEs)));
        }

        /// <summary>
        /// Zwraca rekord z danymi miejsca prowadzenia działalności zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eupId">Id miejsca prowadzenia działalności (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsElasticsearchEupEs</returns>
        public WasteRegisterPublicApiApiModelsElasticsearchEupEs GetEupById (Guid? eupId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchEupEs> localVarResponse = GetEupByIdWithHttpInfo(eupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca rekord z danymi miejsca prowadzenia działalności zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eupId">Id miejsca prowadzenia działalności (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsElasticsearchEupEs</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsElasticsearchEupEs > GetEupByIdWithHttpInfo (Guid? eupId = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/geteupbyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eupId", eupId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchEupEs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsElasticsearchEupEs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsElasticsearchEupEs)));
        }

        /// <summary>
        /// Zwraca rekord z danymi miejsca prowadzenia działalności zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eupId">Id miejsca prowadzenia działalności (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsElasticsearchEupEs</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsElasticsearchEupEs> GetEupByIdAsync (Guid? eupId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchEupEs> localVarResponse = await GetEupByIdAsyncWithHttpInfo(eupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca rekord z danymi miejsca prowadzenia działalności zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eupId">Id miejsca prowadzenia działalności (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsElasticsearchEupEs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> GetEupByIdAsyncWithHttpInfo (Guid? eupId = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/geteupbyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (eupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "eupId", eupId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEupById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchEupEs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsElasticsearchEupEs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsElasticsearchEupEs)));
        }

        /// <summary>
        /// Zwraca listę 10 rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsElasticsearchEupEs> GetEupsByCompanyId (Guid? companyId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> localVarResponse = GetEupsByCompanyIdWithHttpInfo(companyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca listę 10 rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsElasticsearchEupEs> > GetEupsByCompanyIdWithHttpInfo (Guid? companyId = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/geteupsbycompanyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "companyId", companyId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEupsByCompanyId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>)));
        }

        /// <summary>
        /// Zwraca listę 10 rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> GetEupsByCompanyIdAsync (Guid? companyId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> localVarResponse = await GetEupsByCompanyIdAsyncWithHttpInfo(companyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca listę 10 rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>>> GetEupsByCompanyIdAsyncWithHttpInfo (Guid? companyId = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/geteupsbycompanyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "companyId", companyId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEupsByCompanyId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>)));
        }

        /// <summary>
        /// Zwraca rekord z danymi TERYT 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsElasticsearchTerytEs</returns>
        public WasteRegisterPublicApiApiModelsElasticsearchTerytEs GetTerytById (string query = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytEs> localVarResponse = GetTerytByIdWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca rekord z danymi TERYT 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsElasticsearchTerytEs</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsElasticsearchTerytEs > GetTerytByIdWithHttpInfo (string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/getterytbyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTerytById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsElasticsearchTerytEs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsElasticsearchTerytEs)));
        }

        /// <summary>
        /// Zwraca rekord z danymi TERYT 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsElasticsearchTerytEs</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsElasticsearchTerytEs> GetTerytByIdAsync (string query = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytEs> localVarResponse = await GetTerytByIdAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca rekord z danymi TERYT 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsElasticsearchTerytEs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>> GetTerytByIdAsyncWithHttpInfo (string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/getterytbyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTerytById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsElasticsearchTerytEs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsElasticsearchTerytEs)));
        }

        /// <summary>
        /// Zwraca rekord z danymi gminy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs</returns>
        public WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs GetTerytCommuneById (string query = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs> localVarResponse = GetTerytCommuneByIdWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca rekord z danymi gminy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs > GetTerytCommuneByIdWithHttpInfo (string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/getterytcommunebyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTerytCommuneById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs)));
        }

        /// <summary>
        /// Zwraca rekord z danymi gminy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs> GetTerytCommuneByIdAsync (string query = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs> localVarResponse = await GetTerytCommuneByIdAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca rekord z danymi gminy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>> GetTerytCommuneByIdAsyncWithHttpInfo (string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/getterytcommunebyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTerytCommuneById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs)));
        }

        /// <summary>
        /// Zwraca listę rekordów z danymi podmiotów zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Wartość zapytania (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsElasticsearchCompanyEs&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs> SearchCompany (string query = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>> localVarResponse = SearchCompanyWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca listę rekordów z danymi podmiotów zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Wartość zapytania (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsElasticsearchCompanyEs&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs> > SearchCompanyWithHttpInfo (string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/searchcompany";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCompany", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>)));
        }

        /// <summary>
        /// Zwraca listę rekordów z danymi podmiotów zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Wartość zapytania (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsElasticsearchCompanyEs&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>> SearchCompanyAsync (string query = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>> localVarResponse = await SearchCompanyAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca listę rekordów z danymi podmiotów zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Wartość zapytania (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsElasticsearchCompanyEs&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>>> SearchCompanyAsyncWithHttpInfo (string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/searchcompany";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCompany", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsElasticsearchCompanyEs>)));
        }

        /// <summary>
        /// Zwraca listę rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu, według podanego kryterium wyszukiwania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <param name="query">Kryterium wyszukiwania. Jeśli puste, metoda zwraca 10 wyników. (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsElasticsearchEupEs> SearchEupsByCompanyId (Guid? companyId = null, string query = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> localVarResponse = SearchEupsByCompanyIdWithHttpInfo(companyId, query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca listę rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu, według podanego kryterium wyszukiwania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <param name="query">Kryterium wyszukiwania. Jeśli puste, metoda zwraca 10 wyników. (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsElasticsearchEupEs> > SearchEupsByCompanyIdWithHttpInfo (Guid? companyId = null, string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/searcheupsbycompanyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "companyId", companyId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchEupsByCompanyId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>)));
        }

        /// <summary>
        /// Zwraca listę rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu, według podanego kryterium wyszukiwania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <param name="query">Kryterium wyszukiwania. Jeśli puste, metoda zwraca 10 wyników. (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> SearchEupsByCompanyIdAsync (Guid? companyId = null, string query = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>> localVarResponse = await SearchEupsByCompanyIdAsyncWithHttpInfo(companyId, query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca listę rekordów z danymi miejsc prowadzenia działalności przypisanych do Id podmiotu, według podanego kryterium wyszukiwania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="companyId">Id podmiotu (optional)</param>
        /// <param name="query">Kryterium wyszukiwania. Jeśli puste, metoda zwraca 10 wyników. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsElasticsearchEupEs&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>>> SearchEupsByCompanyIdAsyncWithHttpInfo (Guid? companyId = null, string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/searcheupsbycompanyid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (companyId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "companyId", companyId)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchEupsByCompanyId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsElasticsearchEupEs>)));
        }

        /// <summary>
        /// Zwraca listę rekordów TERYT zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytEs&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs> SearchTeryt (string query = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>> localVarResponse = SearchTerytWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca listę rekordów TERYT zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytEs&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs> > SearchTerytWithHttpInfo (string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/searchteryt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTeryt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>)));
        }

        /// <summary>
        /// Zwraca listę rekordów TERYT zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytEs&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>> SearchTerytAsync (string query = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>> localVarResponse = await SearchTerytAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca listę rekordów TERYT zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytEs&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>>> SearchTerytAsyncWithHttpInfo (string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/searchteryt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTeryt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsElasticsearchTerytEs>)));
        }

        /// <summary>
        /// Zwraca listę gmin zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs> SearchTerytCommune (string query = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>> localVarResponse = SearchTerytCommuneWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zwraca listę gmin zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs> > SearchTerytCommuneWithHttpInfo (string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/searchterytcommune";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTerytCommune", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>)));
        }

        /// <summary>
        /// Zwraca listę gmin zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>> SearchTerytCommuneAsync (string query = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>> localVarResponse = await SearchTerytCommuneAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zwraca listę gmin zgodnie z wartością zapytania 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>>> SearchTerytCommuneAsyncWithHttpInfo (string query = null)
        {

            var localVarPath = "/WasteRegister/v1/Search/searchterytcommune";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchTerytCommune", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsElasticsearchTerytCommuneEs>)));
        }

    }
}
