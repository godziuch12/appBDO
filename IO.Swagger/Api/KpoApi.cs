/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKpoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object ApproveKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ApproveKpoRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ApproveKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ApproveKpoRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object AssignReceiveConfirmationToKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1AssignReceiveConfirmationToKpoRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssignReceiveConfirmationToKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1AssignReceiveConfirmationToKpoRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse ChangeKpoStatusToTransportConfirmation (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse> ChangeKpoStatusToTransportConfirmationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationRequest request = null);
        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1DeleteKpoRequest request = null);

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1DeleteKpoRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Potwierdzenie wygenerowane\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object GenerateKpoConfirmation (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1GenerateKpoConfirmationRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Potwierdzenie wygenerowane\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GenerateKpoConfirmationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1GenerateKpoConfirmationRequest request = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto GetApprovedKpo (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto> GetApprovedKpoWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto GetConfirmationGeneratedKpo (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto> GetConfirmationGeneratedKpoWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage GetKpoPrintingPage (Guid? kpoId = null);

        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage> GetKpoPrintingPageWithHttpInfo (Guid? kpoId = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto GetPlannedKpo (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto> GetPlannedKpoWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto GetReceiveConfirmedKpo (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto> GetReceiveConfirmedKpoWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="receiverIdentificationNumber">Numer identyfikacyjny podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverName">Nazwa podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverNip">Nip podmiotu przejmującego odpady (optional)</param>
        /// <param name="cardNumber">Numer Karty Przekazania Odpadów (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto&gt;</returns>
        List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto> GetReceiverKposAsSender (long? pageSize = null, string receiverIdentificationNumber = null, string receiverName = null, string receiverNip = null, string cardNumber = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null);

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="receiverIdentificationNumber">Numer identyfikacyjny podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverName">Nazwa podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverNip">Nip podmiotu przejmującego odpady (optional)</param>
        /// <param name="cardNumber">Numer Karty Przekazania Odpadów (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>> GetReceiverKposAsSenderWithHttpInfo (long? pageSize = null, string receiverIdentificationNumber = null, string receiverName = null, string receiverNip = null, string cardNumber = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto GetRejectedKpo (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto> GetRejectedKpoWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="cardNumber">Numer lub fragment numeru karty KPO (optional)</param>
        /// <param name="senderNip">NIP przekazującego odpad (optional)</param>
        /// <param name="senderIdentificationNumber">Numer rejestrowy przekazującego odpady (optional)</param>
        /// <param name="senderName">Nazwa lub Imię i Nazwisko przekazującego odpady (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto&gt;</returns>
        List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto> GetSenderKposAsReceiver (long? pageSize = null, string cardNumber = null, string senderNip = null, string senderIdentificationNumber = null, string senderName = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null);

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="cardNumber">Numer lub fragment numeru karty KPO (optional)</param>
        /// <param name="senderNip">NIP przekazującego odpad (optional)</param>
        /// <param name="senderIdentificationNumber">Numer rejestrowy przekazującego odpady (optional)</param>
        /// <param name="senderName">Nazwa lub Imię i Nazwisko przekazującego odpady (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>> GetSenderKposAsReceiverWithHttpInfo (long? pageSize = null, string cardNumber = null, string senderNip = null, string senderIdentificationNumber = null, string senderName = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto GetTransportConfirmationKpo (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto> GetTransportConfirmationKpoWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto GetWithdrawnKpo (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto> GetWithdrawnKpoWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto PlanKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1PlanKpoRequest request = null);

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto> PlanKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1PlanKpoRequest request = null);
        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object RejectKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1RejectKpoRequest request = null);

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RejectKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1RejectKpoRequest request = null);
        /// <summary>
        /// Korekta odrzuconej karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object ReviseKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ReviseKpoRequest request = null);

        /// <summary>
        /// Korekta odrzuconej karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ReviseKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ReviseKpoRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpoAsCarrier (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsCarrierRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpoAsCarrierWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsCarrierRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpoAsReceiver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsReceiverRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpoAsReceiverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsReceiverRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpoAsSender (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsSenderRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpoAsSenderWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsSenderRequest request = null);
        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateApprovedGenerateConfirmationKpoAsSender (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null);

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateApprovedGenerateConfirmationKpoAsSenderWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateApprovedKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateApprovedKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null);
        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateApprovedKpoAndGenerateConfirmationAsCarrier (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoAndGenerateConfirmationAsCarrierRequest request = null);

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateApprovedKpoAndGenerateConfirmationAsCarrierWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoAndGenerateConfirmationAsCarrierRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdatePlannedKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdatePlannedKpoRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdatePlannedKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdatePlannedKpoRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object WithdrawnKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1WithdrawnKpoRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WithdrawnKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1WithdrawnKpoRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ApproveKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ApproveKpoRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApproveKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ApproveKpoRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssignReceiveConfirmationToKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1AssignReceiveConfirmationToKpoRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssignReceiveConfirmationToKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1AssignReceiveConfirmationToKpoRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse> ChangeKpoStatusToTransportConfirmationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse>> ChangeKpoStatusToTransportConfirmationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationRequest request = null);
        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1DeleteKpoRequest request = null);

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1DeleteKpoRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Potwierdzenie wygenerowane\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GenerateKpoConfirmationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1GenerateKpoConfirmationRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Potwierdzenie wygenerowane\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GenerateKpoConfirmationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1GenerateKpoConfirmationRequest request = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto> GetApprovedKpoAsync (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto>> GetApprovedKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto> GetConfirmationGeneratedKpoAsync (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto>> GetConfirmationGeneratedKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage> GetKpoPrintingPageAsync (Guid? kpoId = null);

        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage>> GetKpoPrintingPageAsyncWithHttpInfo (Guid? kpoId = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto> GetPlannedKpoAsync (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto>> GetPlannedKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto> GetReceiveConfirmedKpoAsync (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto>> GetReceiveConfirmedKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="receiverIdentificationNumber">Numer identyfikacyjny podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverName">Nazwa podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverNip">Nip podmiotu przejmującego odpady (optional)</param>
        /// <param name="cardNumber">Numer Karty Przekazania Odpadów (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>> GetReceiverKposAsSenderAsync (long? pageSize = null, string receiverIdentificationNumber = null, string receiverName = null, string receiverNip = null, string cardNumber = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null);

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="receiverIdentificationNumber">Numer identyfikacyjny podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverName">Nazwa podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverNip">Nip podmiotu przejmującego odpady (optional)</param>
        /// <param name="cardNumber">Numer Karty Przekazania Odpadów (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>>> GetReceiverKposAsSenderAsyncWithHttpInfo (long? pageSize = null, string receiverIdentificationNumber = null, string receiverName = null, string receiverNip = null, string cardNumber = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto> GetRejectedKpoAsync (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto>> GetRejectedKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="cardNumber">Numer lub fragment numeru karty KPO (optional)</param>
        /// <param name="senderNip">NIP przekazującego odpad (optional)</param>
        /// <param name="senderIdentificationNumber">Numer rejestrowy przekazującego odpady (optional)</param>
        /// <param name="senderName">Nazwa lub Imię i Nazwisko przekazującego odpady (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>> GetSenderKposAsReceiverAsync (long? pageSize = null, string cardNumber = null, string senderNip = null, string senderIdentificationNumber = null, string senderName = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null);

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="cardNumber">Numer lub fragment numeru karty KPO (optional)</param>
        /// <param name="senderNip">NIP przekazującego odpad (optional)</param>
        /// <param name="senderIdentificationNumber">Numer rejestrowy przekazującego odpady (optional)</param>
        /// <param name="senderName">Nazwa lub Imię i Nazwisko przekazującego odpady (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>>> GetSenderKposAsReceiverAsyncWithHttpInfo (long? pageSize = null, string cardNumber = null, string senderNip = null, string senderIdentificationNumber = null, string senderName = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto> GetTransportConfirmationKpoAsync (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto>> GetTransportConfirmationKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto> GetWithdrawnKpoAsync (Guid? kpoId = null, string companyType = null);

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto>> GetWithdrawnKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null);
        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto> PlanKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1PlanKpoRequest request = null);

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto>> PlanKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1PlanKpoRequest request = null);
        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RejectKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1RejectKpoRequest request = null);

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RejectKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1RejectKpoRequest request = null);
        /// <summary>
        /// Korekta odrzuconej karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ReviseKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ReviseKpoRequest request = null);

        /// <summary>
        /// Korekta odrzuconej karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReviseKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ReviseKpoRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpoAsCarrierAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsCarrierRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpoAsCarrierAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsCarrierRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpoAsReceiverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsReceiverRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpoAsReceiverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsReceiverRequest request = null);
        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpoAsSenderAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsSenderRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpoAsSenderAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsSenderRequest request = null);
        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateApprovedGenerateConfirmationKpoAsSenderAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null);

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Przekazującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApprovedGenerateConfirmationKpoAsSenderAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateApprovedKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApprovedKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null);
        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateApprovedKpoAndGenerateConfirmationAsCarrierAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoAndGenerateConfirmationAsCarrierRequest request = null);

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Transportującego
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApprovedKpoAndGenerateConfirmationAsCarrierAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoAndGenerateConfirmationAsCarrierRequest request = null);
        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdatePlannedKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdatePlannedKpoRequest request = null);

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlannedKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdatePlannedKpoRequest request = null);
        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WithdrawnKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1WithdrawnKpoRequest request = null);

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WithdrawnKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1WithdrawnKpoRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KpoApi : IKpoApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KpoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KpoApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KpoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KpoApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object ApproveKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ApproveKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = ApproveKpoWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ApproveKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ApproveKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ApproveKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ApproveKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await ApproveKpoAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Planowana\&quot; na \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ApproveKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ApproveKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object AssignReceiveConfirmationToKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1AssignReceiveConfirmationToKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = AssignReceiveConfirmationToKpoWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AssignReceiveConfirmationToKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1AssignReceiveConfirmationToKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/assign/receiveconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignReceiveConfirmationToKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssignReceiveConfirmationToKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1AssignReceiveConfirmationToKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await AssignReceiveConfirmationToKpoAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssignReceiveConfirmationToKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1AssignReceiveConfirmationToKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/assign/receiveconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssignReceiveConfirmationToKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse ChangeKpoStatusToTransportConfirmation (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse> localVarResponse = ChangeKpoStatusToTransportConfirmationWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse > ChangeKpoStatusToTransportConfirmationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/status/transportconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeKpoStatusToTransportConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse> ChangeKpoStatusToTransportConfirmationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse> localVarResponse = await ChangeKpoStatusToTransportConfirmationAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Potwierdzenie przejęcia\&quot; na \&quot;Potwierdzenie transportu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse>> ChangeKpoStatusToTransportConfirmationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/status/transportconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeKpoStatusToTransportConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ChangeKpoStatusToTransportConfirmationResponse)));
        }

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1DeleteKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKpoWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1DeleteKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1DeleteKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKpoAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1DeleteKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Potwierdzenie wygenerowane\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object GenerateKpoConfirmation (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1GenerateKpoConfirmationRequest request = null)
        {
             ApiResponse<Object> localVarResponse = GenerateKpoConfirmationWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Potwierdzenie wygenerowane\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GenerateKpoConfirmationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1GenerateKpoConfirmationRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/generateconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateKpoConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Potwierdzenie wygenerowane\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GenerateKpoConfirmationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1GenerateKpoConfirmationRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await GenerateKpoConfirmationAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; na \&quot;Potwierdzenie wygenerowane\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GenerateKpoConfirmationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1GenerateKpoConfirmationRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/generateconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateKpoConfirmation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto GetApprovedKpo (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto> localVarResponse = GetApprovedKpoWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto > GetApprovedKpoWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/approved/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApprovedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto> GetApprovedKpoAsync (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto> localVarResponse = await GetApprovedKpoAsyncWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto>> GetApprovedKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/approved/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApprovedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ApprovedKpoDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto GetConfirmationGeneratedKpo (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto> localVarResponse = GetConfirmationGeneratedKpoWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto > GetConfirmationGeneratedKpoWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/confirmationgenerated/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfirmationGeneratedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto> GetConfirmationGeneratedKpoAsync (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto> localVarResponse = await GetConfirmationGeneratedKpoAsyncWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wygenerowane potwierdzenie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto>> GetConfirmationGeneratedKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/confirmationgenerated/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfirmationGeneratedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ConfirmationGeneratedKpoDto)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage GetKpoPrintingPage (Guid? kpoId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage> localVarResponse = GetKpoPrintingPageWithHttpInfo(kpoId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage > GetKpoPrintingPageWithHttpInfo (Guid? kpoId = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKpoPrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage> GetKpoPrintingPageAsync (Guid? kpoId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage> localVarResponse = await GetKpoPrintingPageAsyncWithHttpInfo(kpoId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage>> GetKpoPrintingPageAsyncWithHttpInfo (Guid? kpoId = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKpoPrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoPrintingPage)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto GetPlannedKpo (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto> localVarResponse = GetPlannedKpoWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto > GetPlannedKpoWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/planned/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlannedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto> GetPlannedKpoAsync (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto> localVarResponse = await GetPlannedKpoAsyncWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto>> GetPlannedKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/planned/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlannedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto GetReceiveConfirmedKpo (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto> localVarResponse = GetReceiveConfirmedKpoWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto > GetReceiveConfirmedKpoWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/receiveconfirmed/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReceiveConfirmedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto> GetReceiveConfirmedKpoAsync (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto> localVarResponse = await GetReceiveConfirmedKpoAsyncWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzenie przejęcia\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto>> GetReceiveConfirmedKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/receiveconfirmed/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReceiveConfirmedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiveConfirmedKpoDto)));
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="receiverIdentificationNumber">Numer identyfikacyjny podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverName">Nazwa podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverNip">Nip podmiotu przejmującego odpady (optional)</param>
        /// <param name="cardNumber">Numer Karty Przekazania Odpadów (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto> GetReceiverKposAsSender (long? pageSize = null, string receiverIdentificationNumber = null, string receiverName = null, string receiverNip = null, string cardNumber = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>> localVarResponse = GetReceiverKposAsSenderWithHttpInfo(pageSize, receiverIdentificationNumber, receiverName, receiverNip, cardNumber, receiveConfirmationTime, cardStatusCodeNames, wasteCodeName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="receiverIdentificationNumber">Numer identyfikacyjny podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverName">Nazwa podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverNip">Nip podmiotu przejmującego odpady (optional)</param>
        /// <param name="cardNumber">Numer Karty Przekazania Odpadów (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto> > GetReceiverKposAsSenderWithHttpInfo (long? pageSize = null, string receiverIdentificationNumber = null, string receiverName = null, string receiverNip = null, string cardNumber = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/receivercards/sender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            if (receiverIdentificationNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReceiverIdentificationNumber", receiverIdentificationNumber)); // query parameter
            if (receiverName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReceiverName", receiverName)); // query parameter
            if (receiverNip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReceiverNip", receiverNip)); // query parameter
            if (cardNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CardNumber", cardNumber)); // query parameter
            if (receiveConfirmationTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReceiveConfirmationTime", receiveConfirmationTime)); // query parameter
            if (cardStatusCodeNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CardStatusCodeNames", cardStatusCodeNames)); // query parameter
            if (wasteCodeName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeName", wasteCodeName)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReceiverKposAsSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>)));
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="receiverIdentificationNumber">Numer identyfikacyjny podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverName">Nazwa podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverNip">Nip podmiotu przejmującego odpady (optional)</param>
        /// <param name="cardNumber">Numer Karty Przekazania Odpadów (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>> GetReceiverKposAsSenderAsync (long? pageSize = null, string receiverIdentificationNumber = null, string receiverName = null, string receiverNip = null, string cardNumber = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>> localVarResponse = await GetReceiverKposAsSenderAsyncWithHttpInfo(pageSize, receiverIdentificationNumber, receiverName, receiverNip, cardNumber, receiveConfirmationTime, cardStatusCodeNames, wasteCodeName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przekazującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="receiverIdentificationNumber">Numer identyfikacyjny podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverName">Nazwa podmiotu przejmującego odpady (optional)</param>
        /// <param name="receiverNip">Nip podmiotu przejmującego odpady (optional)</param>
        /// <param name="cardNumber">Numer Karty Przekazania Odpadów (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>>> GetReceiverKposAsSenderAsyncWithHttpInfo (long? pageSize = null, string receiverIdentificationNumber = null, string receiverName = null, string receiverNip = null, string cardNumber = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/receivercards/sender";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            if (receiverIdentificationNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReceiverIdentificationNumber", receiverIdentificationNumber)); // query parameter
            if (receiverName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReceiverName", receiverName)); // query parameter
            if (receiverNip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReceiverNip", receiverNip)); // query parameter
            if (cardNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CardNumber", cardNumber)); // query parameter
            if (receiveConfirmationTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReceiveConfirmationTime", receiveConfirmationTime)); // query parameter
            if (cardStatusCodeNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CardStatusCodeNames", cardStatusCodeNames)); // query parameter
            if (wasteCodeName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeName", wasteCodeName)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReceiverKposAsSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1ReceiverKpoAsSenderListItemDto>)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto GetRejectedKpo (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto> localVarResponse = GetRejectedKpoWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto > GetRejectedKpoWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/rejected/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRejectedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto> GetRejectedKpoAsync (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto> localVarResponse = await GetRejectedKpoAsyncWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto>> GetRejectedKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/rejected/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRejectedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1RejectedKpoDto)));
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="cardNumber">Numer lub fragment numeru karty KPO (optional)</param>
        /// <param name="senderNip">NIP przekazującego odpad (optional)</param>
        /// <param name="senderIdentificationNumber">Numer rejestrowy przekazującego odpady (optional)</param>
        /// <param name="senderName">Nazwa lub Imię i Nazwisko przekazującego odpady (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto> GetSenderKposAsReceiver (long? pageSize = null, string cardNumber = null, string senderNip = null, string senderIdentificationNumber = null, string senderName = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>> localVarResponse = GetSenderKposAsReceiverWithHttpInfo(pageSize, cardNumber, senderNip, senderIdentificationNumber, senderName, receiveConfirmationTime, cardStatusCodeNames, wasteCodeName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="cardNumber">Numer lub fragment numeru karty KPO (optional)</param>
        /// <param name="senderNip">NIP przekazującego odpad (optional)</param>
        /// <param name="senderIdentificationNumber">Numer rejestrowy przekazującego odpady (optional)</param>
        /// <param name="senderName">Nazwa lub Imię i Nazwisko przekazującego odpady (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto> > GetSenderKposAsReceiverWithHttpInfo (long? pageSize = null, string cardNumber = null, string senderNip = null, string senderIdentificationNumber = null, string senderName = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/sendercards/receiver";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            if (cardNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CardNumber", cardNumber)); // query parameter
            if (senderNip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SenderNip", senderNip)); // query parameter
            if (senderIdentificationNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SenderIdentificationNumber", senderIdentificationNumber)); // query parameter
            if (senderName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SenderName", senderName)); // query parameter
            if (receiveConfirmationTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReceiveConfirmationTime", receiveConfirmationTime)); // query parameter
            if (cardStatusCodeNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CardStatusCodeNames", cardStatusCodeNames)); // query parameter
            if (wasteCodeName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeName", wasteCodeName)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderKposAsReceiver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>)));
        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="cardNumber">Numer lub fragment numeru karty KPO (optional)</param>
        /// <param name="senderNip">NIP przekazującego odpad (optional)</param>
        /// <param name="senderIdentificationNumber">Numer rejestrowy przekazującego odpady (optional)</param>
        /// <param name="senderName">Nazwa lub Imię i Nazwisko przekazującego odpady (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>> GetSenderKposAsReceiverAsync (long? pageSize = null, string cardNumber = null, string senderNip = null, string senderIdentificationNumber = null, string senderName = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>> localVarResponse = await GetSenderKposAsReceiverAsyncWithHttpInfo(pageSize, cardNumber, senderNip, senderIdentificationNumber, senderName, receiveConfirmationTime, cardStatusCodeNames, wasteCodeName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista kart ze statusem \&quot;Zrealizowane przejęcie\&quot; lub \&quot;Potwierdzony transport\&quot;, gdzie bieżący podmiot występuje w roli przejmującego odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">Maksymalna liczba wyników wyszukiwania (optional)</param>
        /// <param name="cardNumber">Numer lub fragment numeru karty KPO (optional)</param>
        /// <param name="senderNip">NIP przekazującego odpad (optional)</param>
        /// <param name="senderIdentificationNumber">Numer rejestrowy przekazującego odpady (optional)</param>
        /// <param name="senderName">Nazwa lub Imię i Nazwisko przekazującego odpady (optional)</param>
        /// <param name="receiveConfirmationTime">Data przekazania odpadów (optional)</param>
        /// <param name="cardStatusCodeNames">Lista statusów Kart Przekazania Odpadów rozdzielona średnikami. Słownik wartości dostępny w kontrolerze CardStatus (optional)</param>
        /// <param name="wasteCodeName">Kod odpadów (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>>> GetSenderKposAsReceiverAsyncWithHttpInfo (long? pageSize = null, string cardNumber = null, string senderNip = null, string senderIdentificationNumber = null, string senderName = null, DateTime? receiveConfirmationTime = null, string cardStatusCodeNames = null, string wasteCodeName = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/sendercards/receiver";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "PageSize", pageSize)); // query parameter
            if (cardNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CardNumber", cardNumber)); // query parameter
            if (senderNip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SenderNip", senderNip)); // query parameter
            if (senderIdentificationNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SenderIdentificationNumber", senderIdentificationNumber)); // query parameter
            if (senderName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SenderName", senderName)); // query parameter
            if (receiveConfirmationTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ReceiveConfirmationTime", receiveConfirmationTime)); // query parameter
            if (cardStatusCodeNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CardStatusCodeNames", cardStatusCodeNames)); // query parameter
            if (wasteCodeName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeName", wasteCodeName)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSenderKposAsReceiver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1SenderKpoAsReceiverDto>)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto GetTransportConfirmationKpo (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto> localVarResponse = GetTransportConfirmationKpoWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto > GetTransportConfirmationKpoWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/transportconfirmation/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransportConfirmationKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto> GetTransportConfirmationKpoAsync (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto> localVarResponse = await GetTransportConfirmationKpoAsyncWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Potwierdzony transport\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto>> GetTransportConfirmationKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/transportconfirmation/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTransportConfirmationKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1TransportConfirmationKpoDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto GetWithdrawnKpo (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto> localVarResponse = GetWithdrawnKpoWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto > GetWithdrawnKpoWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/withdrawn/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWithdrawnKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto)));
        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto> GetWithdrawnKpoAsync (Guid? kpoId = null, string companyType = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto> localVarResponse = await GetWithdrawnKpoAsyncWithHttpInfo(kpoId, companyType);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie ze statusem \&quot;Wycofana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kpoId">Id Karty Przekazania Odpadów (optional)</param>
        /// <param name="companyType">Rola w której występuje podmiot w procesie przekazania odpadów (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto>> GetWithdrawnKpoAsyncWithHttpInfo (Guid? kpoId = null, string companyType = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/withdrawn/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kpoId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KpoId", kpoId)); // query parameter
            if (companyType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CompanyType", companyType)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWithdrawnKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1GetWithdrawnKpoDto)));
        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto PlanKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1PlanKpoRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto> localVarResponse = PlanKpoWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto > PlanKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1PlanKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/create/plannedcard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto)));
        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto> PlanKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1PlanKpoRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto> localVarResponse = await PlanKpoAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto>> PlanKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1PlanKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/create/plannedcard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlanKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1PlannedKpoDto)));
        }

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object RejectKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1RejectKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = RejectKpoWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > RejectKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1RejectKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RejectKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RejectKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1RejectKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await RejectKpoAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Odrzucona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RejectKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1RejectKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RejectKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Korekta odrzuconej karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object ReviseKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ReviseKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = ReviseKpoWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Korekta odrzuconej karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ReviseKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ReviseKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/revise";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviseKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Korekta odrzuconej karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ReviseKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ReviseKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await ReviseKpoAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Korekta odrzuconej karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReviseKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1ReviseKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/revise";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReviseKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpoAsCarrier (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsCarrierRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = SearchKpoAsCarrierWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull > SearchKpoAsCarrierWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsCarrierRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/carrier/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpoAsCarrier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpoAsCarrierAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsCarrierRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = await SearchKpoAsCarrierAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpoAsCarrierAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsCarrierRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/carrier/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpoAsCarrier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsCarrierSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpoAsReceiver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsReceiverRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = SearchKpoAsReceiverWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull > SearchKpoAsReceiverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsReceiverRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/receiver/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpoAsReceiver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpoAsReceiverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsReceiverRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = await SearchKpoAsReceiverAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przejmującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpoAsReceiverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsReceiverRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/receiver/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpoAsReceiver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsReceiverSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKpoAsSender (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsSenderRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = SearchKpoAsSenderWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull > SearchKpoAsSenderWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsSenderRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/sender/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpoAsSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKpoAsSenderAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsSenderRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = await SearchKpoAsSenderAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka kart, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKpoAsSenderAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardSearchCardsV1SearchKpoAsSenderRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/sender/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKpoAsSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWasteTransferCardV1KpoAsSenderSearchResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateApprovedGenerateConfirmationKpoAsSender (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateApprovedGenerateConfirmationKpoAsSenderWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateApprovedGenerateConfirmationKpoAsSenderWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/sender/update/approved/generateconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApprovedGenerateConfirmationKpoAsSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateApprovedGenerateConfirmationKpoAsSenderAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateApprovedGenerateConfirmationKpoAsSenderAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Przekazującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApprovedGenerateConfirmationKpoAsSenderAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/sender/update/approved/generateconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApprovedGenerateConfirmationKpoAsSender", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateApprovedKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateApprovedKpoWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateApprovedKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/update/approvedcard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApprovedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateApprovedKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateApprovedKpoAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Zatwierdzona\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApprovedKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/update/approvedcard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApprovedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateApprovedKpoAndGenerateConfirmationAsCarrier (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoAndGenerateConfirmationAsCarrierRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateApprovedKpoAndGenerateConfirmationAsCarrierWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateApprovedKpoAndGenerateConfirmationAsCarrierWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoAndGenerateConfirmationAsCarrierRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/carrier/update/approved/generateconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApprovedKpoAndGenerateConfirmationAsCarrier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateApprovedKpoAndGenerateConfirmationAsCarrierAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoAndGenerateConfirmationAsCarrierRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateApprovedKpoAndGenerateConfirmationAsCarrierAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wygenerowanie potwierdzenia (zmiana statusu karty na \&quot;Potwierdzenie wygenerowane\&quot;) dla karty ze statusem \&quot;Zatwierdzona\&quot;, gdzie bieżący podmiot występuje w roli Transportującego 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateApprovedKpoAndGenerateConfirmationAsCarrierAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdateApprovedKpoAndGenerateConfirmationAsCarrierRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/carrier/update/approved/generateconfirmation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApprovedKpoAndGenerateConfirmationAsCarrier", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdatePlannedKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdatePlannedKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdatePlannedKpoWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdatePlannedKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdatePlannedKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/update/plannedcard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlannedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdatePlannedKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdatePlannedKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdatePlannedKpoAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja karty ze statusem \&quot;Planowana\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePlannedKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1UpdatePlannedKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/update/plannedcard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlannedKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object WithdrawnKpo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1WithdrawnKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = WithdrawnKpoWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > WithdrawnKpoWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1WithdrawnKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/withdrawn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawnKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WithdrawnKpoAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1WithdrawnKpoRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await WithdrawnKpoAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zmiana statusu karty z \&quot;Zatwierdzona\&quot; lub \&quot;Potwierdzenie wygenerowane\&quot; na \&quot;Wycofana\&quot;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WithdrawnKpoAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWasteTransferCardV1WithdrawnKpoRequest request = null)
        {

            var localVarPath = "/WasteRegister/WasteTransferCard/v1/Kpo/withdrawn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WithdrawnKpo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
