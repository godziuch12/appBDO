/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKezsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Sprawdzenie czy w danym roku istnieje już karta z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse CheckKezsExistsByYearAndWasteCodeCreate (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);

        /// <summary>
        /// Sprawdzenie czy w danym roku istnieje już karta z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse> CheckKezsExistsByYearAndWasteCodeCreateWithHttpInfo (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);
        /// <summary>
        /// Sprawdzenie czy w danym roku oprócz wybranej karty istnieje inna z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse CheckKezsExistsByYearAndWasteCodeEdit (Guid? kezsId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);

        /// <summary>
        /// Sprawdzenie czy w danym roku oprócz wybranej karty istnieje inna z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse> CheckKezsExistsByYearAndWasteCodeEditWithHttpInfo (Guid? kezsId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);
        /// <summary>
        /// Sprawdzenie czy na danej karcie istnieje już wpis Stany magazynowe - \&quot;Wytworzone odpady\&quot; z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse CheckKezsStockWasteMassGroupExists (Guid? kezsEquipmentGroupCardId = null, int? wasteCodeId = null);

        /// <summary>
        /// Sprawdzenie czy na danej karcie istnieje już wpis Stany magazynowe - \&quot;Wytworzone odpady\&quot; z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse> CheckKezsStockWasteMassGroupExistsWithHttpInfo (Guid? kezsEquipmentGroupCardId = null, int? wasteCodeId = null);
        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto CreateKezs (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsRequest request = null);

        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto> CreateKezsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto CreateKezsEquipmentCollectingEntry (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> CreateKezsEquipmentCollectingEntryWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto CreateKezsEquipmentManagement (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentManagementRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> CreateKezsEquipmentManagementWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentManagementRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto CreateKezsStockWasteMassGroup (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsStockWasteMassGroupRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> CreateKezsStockWasteMassGroupWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsStockWasteMassGroupRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto CreateKezsUsedEquipmentWasteGeneration (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsUsedEquipmentWasteGenerationRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> CreateKezsUsedEquipmentWasteGenerationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsUsedEquipmentWasteGenerationRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto CreateKezsWasteManagementHandedOver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> CreateKezsWasteManagementHandedOverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto CreateKezsWasteManagementOnOnesOwn (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementOnOnesOwnRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> CreateKezsWasteManagementOnOnesOwnWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementOnOnesOwnRequest request = null);
        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKezs (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsRequest request = null);

        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKezsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKezsEquipmentCollectingEntry (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentCollectingEntryRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKezsEquipmentCollectingEntryWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentCollectingEntryRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKezsEquipmentManagement (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentManagementRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKezsEquipmentManagementWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentManagementRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKezsStockWasteMassGroup (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsStockWasteMassGroupRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKezsStockWasteMassGroupWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsStockWasteMassGroupRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKezsUsedEquipmentWasteGeneration (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsUsedEquipmentWasteGenerationRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKezsUsedEquipmentWasteGenerationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsUsedEquipmentWasteGenerationRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKezsWasteManagementHandedOver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementHandedOverRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKezsWasteManagementHandedOverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementHandedOverRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKezsWasteManagementOnOnesOwn (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementOnOnesOwnRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKezsWasteManagementOnOnesOwnWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementOnOnesOwnRequest request = null);
        /// <summary>
        /// Lista kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse GetKezs (Guid? kezsId = null);

        /// <summary>
        /// Lista kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse> GetKezsWithHttpInfo (Guid? kezsId = null);
        /// <summary>
        /// Lista wpisów \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto&gt;</returns>
        List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> GetKezsEquipmentCollectingEntries (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>> GetKezsEquipmentCollectingEntriesWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Informacje o wpisie \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentCollectingEntryId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto GetKezsEquipmentCollectingEntry (Guid? kezsEquipmentCollectingEntryId = null);

        /// <summary>
        /// Informacje o wpisie \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentCollectingEntryId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> GetKezsEquipmentCollectingEntryWithHttpInfo (Guid? kezsEquipmentCollectingEntryId = null);
        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentManagementId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto GetKezsEquipmentManagement (Guid? kezsEquipmentManagementId = null);

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentManagementId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> GetKezsEquipmentManagementWithHttpInfo (Guid? kezsEquipmentManagementId = null);
        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto&gt;</returns>
        List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> GetKezsEquipmentManagements (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>> GetKezsEquipmentManagementsWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="groupNumber"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse GetKezsPrintingPageData (Guid? kezsId = null, int? groupNumber = null);

        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="groupNumber"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse> GetKezsPrintingPageDataWithHttpInfo (Guid? kezsId = null, int? groupNumber = null);
        /// <summary>
        /// Informacje o stanach magazynowych
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsStockWasteMassGroupId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto GetKezsStockWasteMassGroup (Guid? kezsStockWasteMassGroupId = null);

        /// <summary>
        /// Informacje o stanach magazynowych
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsStockWasteMassGroupId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> GetKezsStockWasteMassGroupWithHttpInfo (Guid? kezsStockWasteMassGroupId = null);
        /// <summary>
        /// Lista wpisów Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto&gt;</returns>
        List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> GetKezsStockWasteMassGroups (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>> GetKezsStockWasteMassGroupsWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Informacje o wpisie \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsUsedEquipmentWasteGenerationId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto GetKezsUsedEquipmentWasteGenerationOver (Guid? kezsUsedEquipmentWasteGenerationId = null);

        /// <summary>
        /// Informacje o wpisie \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsUsedEquipmentWasteGenerationId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> GetKezsUsedEquipmentWasteGenerationOverWithHttpInfo (Guid? kezsUsedEquipmentWasteGenerationId = null);
        /// <summary>
        /// Lista wpisów \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto&gt;</returns>
        List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> GetKezsUsedEquipmentWasteGenerations (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>> GetKezsUsedEquipmentWasteGenerationsWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementHandedOverId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto GetKezsWasteManagementHandedOver (Guid? kezsWasteManagementHandedOverId = null);

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementHandedOverId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> GetKezsWasteManagementHandedOverWithHttpInfo (Guid? kezsWasteManagementHandedOverId = null);
        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto&gt;</returns>
        List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> GetKezsWasteManagementHandedOvers (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>> GetKezsWasteManagementHandedOversWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementOnOnesOwnId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto GetKezsWasteManagementOnOnesOwn (Guid? kezsWasteManagementOnOnesOwnId = null);

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementOnOnesOwnId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> GetKezsWasteManagementOnOnesOwnWithHttpInfo (Guid? kezsWasteManagementOnOnesOwnId = null);
        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto&gt;</returns>
        List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> GetKezsWasteManagementOnOnesOwns (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto&gt;</returns>
        ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>> GetKezsWasteManagementOnOnesOwnsWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKezs (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1SearchKezsRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKezsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1SearchKezsRequest request = null);
        /// <summary>
        /// Edycja karty i stanów magazynowych zebranego sprzetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKezs (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsRequest request = null);

        /// <summary>
        /// Edycja karty i stanów magazynowych zebranego sprzetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKezsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKezsEquipmentCollectingEntry (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentCollectingEntryRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKezsEquipmentCollectingEntryWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentCollectingEntryRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKezsEquipmentManagement (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKezsEquipmentManagementWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest request = null);
        /// <summary>
        /// Edycja wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKezsStockWasteMassGroup (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsStockWasteMassGroupRequest request = null);

        /// <summary>
        /// Edycja wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKezsStockWasteMassGroupWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsStockWasteMassGroupRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKezsUsedEquipmentWasteGeneration (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsUsedEquipmentWasteGenerationRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKezsUsedEquipmentWasteGenerationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsUsedEquipmentWasteGenerationRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKezsWasteManagementHandedOver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementHandedOverRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKezsWasteManagementHandedOverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementHandedOverRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKezsWasteManagementOnOnesOwn (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementOnOnesOwnRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKezsWasteManagementOnOnesOwnWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementOnOnesOwnRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Sprawdzenie czy w danym roku istnieje już karta z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse> CheckKezsExistsByYearAndWasteCodeCreateAsync (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);

        /// <summary>
        /// Sprawdzenie czy w danym roku istnieje już karta z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse>> CheckKezsExistsByYearAndWasteCodeCreateAsyncWithHttpInfo (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);
        /// <summary>
        /// Sprawdzenie czy w danym roku oprócz wybranej karty istnieje inna z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse> CheckKezsExistsByYearAndWasteCodeEditAsync (Guid? kezsId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);

        /// <summary>
        /// Sprawdzenie czy w danym roku oprócz wybranej karty istnieje inna z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse>> CheckKezsExistsByYearAndWasteCodeEditAsyncWithHttpInfo (Guid? kezsId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);
        /// <summary>
        /// Sprawdzenie czy na danej karcie istnieje już wpis Stany magazynowe - \&quot;Wytworzone odpady\&quot; z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse> CheckKezsStockWasteMassGroupExistsAsync (Guid? kezsEquipmentGroupCardId = null, int? wasteCodeId = null);

        /// <summary>
        /// Sprawdzenie czy na danej karcie istnieje już wpis Stany magazynowe - \&quot;Wytworzone odpady\&quot; z wybranym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse>> CheckKezsStockWasteMassGroupExistsAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null, int? wasteCodeId = null);
        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto> CreateKezsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsRequest request = null);

        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto>> CreateKezsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> CreateKezsEquipmentCollectingEntryAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>> CreateKezsEquipmentCollectingEntryAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> CreateKezsEquipmentManagementAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentManagementRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>> CreateKezsEquipmentManagementAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentManagementRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> CreateKezsStockWasteMassGroupAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsStockWasteMassGroupRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>> CreateKezsStockWasteMassGroupAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsStockWasteMassGroupRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> CreateKezsUsedEquipmentWasteGenerationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsUsedEquipmentWasteGenerationRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>> CreateKezsUsedEquipmentWasteGenerationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsUsedEquipmentWasteGenerationRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> CreateKezsWasteManagementHandedOverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>> CreateKezsWasteManagementHandedOverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest request = null);
        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> CreateKezsWasteManagementOnOnesOwnAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementOnOnesOwnRequest request = null);

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>> CreateKezsWasteManagementOnOnesOwnAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementOnOnesOwnRequest request = null);
        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKezsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsRequest request = null);

        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKezsEquipmentCollectingEntryAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentCollectingEntryRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsEquipmentCollectingEntryAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentCollectingEntryRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKezsEquipmentManagementAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentManagementRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsEquipmentManagementAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentManagementRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKezsStockWasteMassGroupAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsStockWasteMassGroupRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsStockWasteMassGroupAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsStockWasteMassGroupRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKezsUsedEquipmentWasteGenerationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsUsedEquipmentWasteGenerationRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsUsedEquipmentWasteGenerationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsUsedEquipmentWasteGenerationRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKezsWasteManagementHandedOverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementHandedOverRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsWasteManagementHandedOverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementHandedOverRequest request = null);
        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKezsWasteManagementOnOnesOwnAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementOnOnesOwnRequest request = null);

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsWasteManagementOnOnesOwnAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementOnOnesOwnRequest request = null);
        /// <summary>
        /// Lista kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse> GetKezsAsync (Guid? kezsId = null);

        /// <summary>
        /// Lista kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse>> GetKezsAsyncWithHttpInfo (Guid? kezsId = null);
        /// <summary>
        /// Lista wpisów \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>> GetKezsEquipmentCollectingEntriesAsync (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>>> GetKezsEquipmentCollectingEntriesAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Informacje o wpisie \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentCollectingEntryId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> GetKezsEquipmentCollectingEntryAsync (Guid? kezsEquipmentCollectingEntryId = null);

        /// <summary>
        /// Informacje o wpisie \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentCollectingEntryId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>> GetKezsEquipmentCollectingEntryAsyncWithHttpInfo (Guid? kezsEquipmentCollectingEntryId = null);
        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentManagementId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> GetKezsEquipmentManagementAsync (Guid? kezsEquipmentManagementId = null);

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentManagementId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>> GetKezsEquipmentManagementAsyncWithHttpInfo (Guid? kezsEquipmentManagementId = null);
        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>> GetKezsEquipmentManagementsAsync (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>>> GetKezsEquipmentManagementsAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="groupNumber"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse> GetKezsPrintingPageDataAsync (Guid? kezsId = null, int? groupNumber = null);

        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="groupNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse>> GetKezsPrintingPageDataAsyncWithHttpInfo (Guid? kezsId = null, int? groupNumber = null);
        /// <summary>
        /// Informacje o stanach magazynowych
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsStockWasteMassGroupId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> GetKezsStockWasteMassGroupAsync (Guid? kezsStockWasteMassGroupId = null);

        /// <summary>
        /// Informacje o stanach magazynowych
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsStockWasteMassGroupId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>> GetKezsStockWasteMassGroupAsyncWithHttpInfo (Guid? kezsStockWasteMassGroupId = null);
        /// <summary>
        /// Lista wpisów Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>> GetKezsStockWasteMassGroupsAsync (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>>> GetKezsStockWasteMassGroupsAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Informacje o wpisie \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsUsedEquipmentWasteGenerationId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> GetKezsUsedEquipmentWasteGenerationOverAsync (Guid? kezsUsedEquipmentWasteGenerationId = null);

        /// <summary>
        /// Informacje o wpisie \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsUsedEquipmentWasteGenerationId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>> GetKezsUsedEquipmentWasteGenerationOverAsyncWithHttpInfo (Guid? kezsUsedEquipmentWasteGenerationId = null);
        /// <summary>
        /// Lista wpisów \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>> GetKezsUsedEquipmentWasteGenerationsAsync (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>>> GetKezsUsedEquipmentWasteGenerationsAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementHandedOverId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> GetKezsWasteManagementHandedOverAsync (Guid? kezsWasteManagementHandedOverId = null);

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementHandedOverId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>> GetKezsWasteManagementHandedOverAsyncWithHttpInfo (Guid? kezsWasteManagementHandedOverId = null);
        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>> GetKezsWasteManagementHandedOversAsync (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>>> GetKezsWasteManagementHandedOversAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementOnOnesOwnId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> GetKezsWasteManagementOnOnesOwnAsync (Guid? kezsWasteManagementOnOnesOwnId = null);

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementOnOnesOwnId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>> GetKezsWasteManagementOnOnesOwnAsyncWithHttpInfo (Guid? kezsWasteManagementOnOnesOwnId = null);
        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto&gt;</returns>
        System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>> GetKezsWasteManagementOnOnesOwnsAsync (Guid? kezsEquipmentGroupCardId = null);

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>>> GetKezsWasteManagementOnOnesOwnsAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null);
        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKezsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1SearchKezsRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKezsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1SearchKezsRequest request = null);
        /// <summary>
        /// Edycja karty i stanów magazynowych zebranego sprzetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKezsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsRequest request = null);

        /// <summary>
        /// Edycja karty i stanów magazynowych zebranego sprzetu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKezsEquipmentCollectingEntryAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentCollectingEntryRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Zbieranie sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsEquipmentCollectingEntryAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentCollectingEntryRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKezsEquipmentManagementAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie sprzętem\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsEquipmentManagementAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest request = null);
        /// <summary>
        /// Edycja wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKezsStockWasteMassGroupAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsStockWasteMassGroupRequest request = null);

        /// <summary>
        /// Edycja wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsStockWasteMassGroupAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsStockWasteMassGroupRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKezsUsedEquipmentWasteGenerationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsUsedEquipmentWasteGenerationRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsUsedEquipmentWasteGenerationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsUsedEquipmentWasteGenerationRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKezsWasteManagementHandedOverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementHandedOverRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsWasteManagementHandedOverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementHandedOverRequest request = null);
        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKezsWasteManagementOnOnesOwnAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementOnOnesOwnRequest request = null);

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsWasteManagementOnOnesOwnAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementOnOnesOwnRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KezsApi : IKezsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KezsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KezsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KezsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KezsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Sprawdzenie czy w danym roku istnieje już karta z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse CheckKezsExistsByYearAndWasteCodeCreate (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse> localVarResponse = CheckKezsExistsByYearAndWasteCodeCreateWithHttpInfo(wasteCodeId, wasteCodeExtended, wasteCodeExtendedDescription, hazardousWasteReclassification, hazardousWasteReclassificationDescription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sprawdzenie czy w danym roku istnieje już karta z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse > CheckKezsExistsByYearAndWasteCodeCreateWithHttpInfo (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/card/exist/year/wastecodeCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wasteCodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeId", wasteCodeId)); // query parameter
            if (wasteCodeExtended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtended", wasteCodeExtended)); // query parameter
            if (wasteCodeExtendedDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtendedDescription", wasteCodeExtendedDescription)); // query parameter
            if (hazardousWasteReclassification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassification", hazardousWasteReclassification)); // query parameter
            if (hazardousWasteReclassificationDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassificationDescription", hazardousWasteReclassificationDescription)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckKezsExistsByYearAndWasteCodeCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse)));
        }

        /// <summary>
        /// Sprawdzenie czy w danym roku istnieje już karta z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse> CheckKezsExistsByYearAndWasteCodeCreateAsync (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse> localVarResponse = await CheckKezsExistsByYearAndWasteCodeCreateAsyncWithHttpInfo(wasteCodeId, wasteCodeExtended, wasteCodeExtendedDescription, hazardousWasteReclassification, hazardousWasteReclassificationDescription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sprawdzenie czy w danym roku istnieje już karta z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse>> CheckKezsExistsByYearAndWasteCodeCreateAsyncWithHttpInfo (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/card/exist/year/wastecodeCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wasteCodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeId", wasteCodeId)); // query parameter
            if (wasteCodeExtended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtended", wasteCodeExtended)); // query parameter
            if (wasteCodeExtendedDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtendedDescription", wasteCodeExtendedDescription)); // query parameter
            if (hazardousWasteReclassification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassification", hazardousWasteReclassification)); // query parameter
            if (hazardousWasteReclassificationDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassificationDescription", hazardousWasteReclassificationDescription)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckKezsExistsByYearAndWasteCodeCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeCreateResponse)));
        }

        /// <summary>
        /// Sprawdzenie czy w danym roku oprócz wybranej karty istnieje inna z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse CheckKezsExistsByYearAndWasteCodeEdit (Guid? kezsId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse> localVarResponse = CheckKezsExistsByYearAndWasteCodeEditWithHttpInfo(kezsId, wasteCodeId, wasteCodeExtended, wasteCodeExtendedDescription, hazardousWasteReclassification, hazardousWasteReclassificationDescription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sprawdzenie czy w danym roku oprócz wybranej karty istnieje inna z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse > CheckKezsExistsByYearAndWasteCodeEditWithHttpInfo (Guid? kezsId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/card/exist/year/wastecodeEdit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsId", kezsId)); // query parameter
            if (wasteCodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeId", wasteCodeId)); // query parameter
            if (wasteCodeExtended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtended", wasteCodeExtended)); // query parameter
            if (wasteCodeExtendedDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtendedDescription", wasteCodeExtendedDescription)); // query parameter
            if (hazardousWasteReclassification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassification", hazardousWasteReclassification)); // query parameter
            if (hazardousWasteReclassificationDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassificationDescription", hazardousWasteReclassificationDescription)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckKezsExistsByYearAndWasteCodeEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse)));
        }

        /// <summary>
        /// Sprawdzenie czy w danym roku oprócz wybranej karty istnieje inna z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse> CheckKezsExistsByYearAndWasteCodeEditAsync (Guid? kezsId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse> localVarResponse = await CheckKezsExistsByYearAndWasteCodeEditAsyncWithHttpInfo(kezsId, wasteCodeId, wasteCodeExtended, wasteCodeExtendedDescription, hazardousWasteReclassification, hazardousWasteReclassificationDescription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sprawdzenie czy w danym roku oprócz wybranej karty istnieje inna z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse>> CheckKezsExistsByYearAndWasteCodeEditAsyncWithHttpInfo (Guid? kezsId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/card/exist/year/wastecodeEdit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsId", kezsId)); // query parameter
            if (wasteCodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeId", wasteCodeId)); // query parameter
            if (wasteCodeExtended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtended", wasteCodeExtended)); // query parameter
            if (wasteCodeExtendedDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtendedDescription", wasteCodeExtendedDescription)); // query parameter
            if (hazardousWasteReclassification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassification", hazardousWasteReclassification)); // query parameter
            if (hazardousWasteReclassificationDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassificationDescription", hazardousWasteReclassificationDescription)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckKezsExistsByYearAndWasteCodeEdit", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsExistsByYearAndWasteCodeEditResponse)));
        }

        /// <summary>
        /// Sprawdzenie czy na danej karcie istnieje już wpis Stany magazynowe - \&quot;Wytworzone odpady\&quot; z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse CheckKezsStockWasteMassGroupExists (Guid? kezsEquipmentGroupCardId = null, int? wasteCodeId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse> localVarResponse = CheckKezsStockWasteMassGroupExistsWithHttpInfo(kezsEquipmentGroupCardId, wasteCodeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sprawdzenie czy na danej karcie istnieje już wpis Stany magazynowe - \&quot;Wytworzone odpady\&quot; z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse > CheckKezsStockWasteMassGroupExistsWithHttpInfo (Guid? kezsEquipmentGroupCardId = null, int? wasteCodeId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/Kezs/KezsStockWasteMassGroup/card/exist/year/wastecode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter
            if (wasteCodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeId", wasteCodeId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckKezsStockWasteMassGroupExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse)));
        }

        /// <summary>
        /// Sprawdzenie czy na danej karcie istnieje już wpis Stany magazynowe - \&quot;Wytworzone odpady\&quot; z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse> CheckKezsStockWasteMassGroupExistsAsync (Guid? kezsEquipmentGroupCardId = null, int? wasteCodeId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse> localVarResponse = await CheckKezsStockWasteMassGroupExistsAsyncWithHttpInfo(kezsEquipmentGroupCardId, wasteCodeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sprawdzenie czy na danej karcie istnieje już wpis Stany magazynowe - \&quot;Wytworzone odpady\&quot; z wybranym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse>> CheckKezsStockWasteMassGroupExistsAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null, int? wasteCodeId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/Kezs/KezsStockWasteMassGroup/card/exist/year/wastecode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter
            if (wasteCodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeId", wasteCodeId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckKezsStockWasteMassGroupExists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1CheckKezsStockWasteMassGroupExistsResponse)));
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto CreateKezs (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto> localVarResponse = CreateKezsWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto > CreateKezsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto)));
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto> CreateKezsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto> localVarResponse = await CreateKezsAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto>> CreateKezsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsDto)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto CreateKezsEquipmentCollectingEntry (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> localVarResponse = CreateKezsEquipmentCollectingEntryWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto > CreateKezsEquipmentCollectingEntryWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentCollectingEntry/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsEquipmentCollectingEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> CreateKezsEquipmentCollectingEntryAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> localVarResponse = await CreateKezsEquipmentCollectingEntryAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>> CreateKezsEquipmentCollectingEntryAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentCollectingEntryRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentCollectingEntry/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsEquipmentCollectingEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto CreateKezsEquipmentManagement (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentManagementRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> localVarResponse = CreateKezsEquipmentManagementWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto > CreateKezsEquipmentManagementWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentManagementRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentManagement/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsEquipmentManagement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> CreateKezsEquipmentManagementAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentManagementRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> localVarResponse = await CreateKezsEquipmentManagementAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>> CreateKezsEquipmentManagementAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsEquipmentManagementRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentManagement/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsEquipmentManagement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto)));
        }

        /// <summary>
        /// Tworzenie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto CreateKezsStockWasteMassGroup (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsStockWasteMassGroupRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> localVarResponse = CreateKezsStockWasteMassGroupWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto > CreateKezsStockWasteMassGroupWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsStockWasteMassGroupRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsStockWasteMassGroup/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsStockWasteMassGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto)));
        }

        /// <summary>
        /// Tworzenie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> CreateKezsStockWasteMassGroupAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsStockWasteMassGroupRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> localVarResponse = await CreateKezsStockWasteMassGroupAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>> CreateKezsStockWasteMassGroupAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsStockWasteMassGroupRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsStockWasteMassGroup/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsStockWasteMassGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto CreateKezsUsedEquipmentWasteGeneration (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsUsedEquipmentWasteGenerationRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> localVarResponse = CreateKezsUsedEquipmentWasteGenerationWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto > CreateKezsUsedEquipmentWasteGenerationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsUsedEquipmentWasteGenerationRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsUsedEquipmentWasteGeneration/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsUsedEquipmentWasteGeneration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> CreateKezsUsedEquipmentWasteGenerationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsUsedEquipmentWasteGenerationRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> localVarResponse = await CreateKezsUsedEquipmentWasteGenerationAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>> CreateKezsUsedEquipmentWasteGenerationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsUsedEquipmentWasteGenerationRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsUsedEquipmentWasteGeneration/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsUsedEquipmentWasteGeneration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto CreateKezsWasteManagementHandedOver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> localVarResponse = CreateKezsWasteManagementHandedOverWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto > CreateKezsWasteManagementHandedOverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementHandedOver/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsWasteManagementHandedOver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> CreateKezsWasteManagementHandedOverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> localVarResponse = await CreateKezsWasteManagementHandedOverAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>> CreateKezsWasteManagementHandedOverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementHandedOverRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementHandedOver/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsWasteManagementHandedOver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto CreateKezsWasteManagementOnOnesOwn (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementOnOnesOwnRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> localVarResponse = CreateKezsWasteManagementOnOnesOwnWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto > CreateKezsWasteManagementOnOnesOwnWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementOnOnesOwnRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementOnOnesOwn/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsWasteManagementOnOnesOwn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto)));
        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> CreateKezsWasteManagementOnOnesOwnAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementOnOnesOwnRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> localVarResponse = await CreateKezsWasteManagementOnOnesOwnAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>> CreateKezsWasteManagementOnOnesOwnAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1CreateKezsWasteManagementOnOnesOwnRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementOnOnesOwn/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKezsWasteManagementOnOnesOwn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto)));
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKezs (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKezsWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKezsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKezsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKezsAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKezsEquipmentCollectingEntry (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentCollectingEntryRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKezsEquipmentCollectingEntryWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKezsEquipmentCollectingEntryWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentCollectingEntryRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentCollectingEntry/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsEquipmentCollectingEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKezsEquipmentCollectingEntryAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentCollectingEntryRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKezsEquipmentCollectingEntryAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsEquipmentCollectingEntryAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentCollectingEntryRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentCollectingEntry/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsEquipmentCollectingEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKezsEquipmentManagement (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentManagementRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKezsEquipmentManagementWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKezsEquipmentManagementWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentManagementRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentManagement/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsEquipmentManagement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKezsEquipmentManagementAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentManagementRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKezsEquipmentManagementAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsEquipmentManagementAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsEquipmentManagementRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentManagement/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsEquipmentManagement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKezsStockWasteMassGroup (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsStockWasteMassGroupRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKezsStockWasteMassGroupWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKezsStockWasteMassGroupWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsStockWasteMassGroupRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsStockWasteMassGroup/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsStockWasteMassGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKezsStockWasteMassGroupAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsStockWasteMassGroupRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKezsStockWasteMassGroupAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsStockWasteMassGroupAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsStockWasteMassGroupRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsStockWasteMassGroup/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsStockWasteMassGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKezsUsedEquipmentWasteGeneration (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsUsedEquipmentWasteGenerationRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKezsUsedEquipmentWasteGenerationWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKezsUsedEquipmentWasteGenerationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsUsedEquipmentWasteGenerationRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsUsedEquipmentWasteGeneration/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsUsedEquipmentWasteGeneration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKezsUsedEquipmentWasteGenerationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsUsedEquipmentWasteGenerationRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKezsUsedEquipmentWasteGenerationAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsUsedEquipmentWasteGenerationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsUsedEquipmentWasteGenerationRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsUsedEquipmentWasteGeneration/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsUsedEquipmentWasteGeneration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKezsWasteManagementHandedOver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementHandedOverRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKezsWasteManagementHandedOverWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKezsWasteManagementHandedOverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementHandedOverRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementHandedOver/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsWasteManagementHandedOver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKezsWasteManagementHandedOverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementHandedOverRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKezsWasteManagementHandedOverAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsWasteManagementHandedOverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementHandedOverRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementHandedOver/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsWasteManagementHandedOver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKezsWasteManagementOnOnesOwn (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementOnOnesOwnRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKezsWasteManagementOnOnesOwnWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKezsWasteManagementOnOnesOwnWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementOnOnesOwnRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementOnOnesOwn/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsWasteManagementOnOnesOwn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKezsWasteManagementOnOnesOwnAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementOnOnesOwnRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKezsWasteManagementOnOnesOwnAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKezsWasteManagementOnOnesOwnAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1DeleteKezsWasteManagementOnOnesOwnRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementOnOnesOwn/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKezsWasteManagementOnOnesOwn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Lista kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse GetKezs (Guid? kezsId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse> localVarResponse = GetKezsWithHttpInfo(kezsId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse > GetKezsWithHttpInfo (Guid? kezsId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsId", kezsId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse)));
        }

        /// <summary>
        /// Lista kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse> GetKezsAsync (Guid? kezsId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse> localVarResponse = await GetKezsAsyncWithHttpInfo(kezsId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse>> GetKezsAsyncWithHttpInfo (Guid? kezsId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsId", kezsId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsResponse)));
        }

        /// <summary>
        /// Lista wpisów \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> GetKezsEquipmentCollectingEntries (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>> localVarResponse = GetKezsEquipmentCollectingEntriesWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista wpisów \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> > GetKezsEquipmentCollectingEntriesWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentCollectingEntry/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsEquipmentCollectingEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>)));
        }

        /// <summary>
        /// Lista wpisów \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>> GetKezsEquipmentCollectingEntriesAsync (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>> localVarResponse = await GetKezsEquipmentCollectingEntriesAsyncWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista wpisów \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>>> GetKezsEquipmentCollectingEntriesAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentCollectingEntry/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsEquipmentCollectingEntries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>)));
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentCollectingEntryId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto GetKezsEquipmentCollectingEntry (Guid? kezsEquipmentCollectingEntryId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> localVarResponse = GetKezsEquipmentCollectingEntryWithHttpInfo(kezsEquipmentCollectingEntryId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentCollectingEntryId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto > GetKezsEquipmentCollectingEntryWithHttpInfo (Guid? kezsEquipmentCollectingEntryId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentCollectingEntry/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentCollectingEntryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentCollectingEntryId", kezsEquipmentCollectingEntryId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsEquipmentCollectingEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto)));
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentCollectingEntryId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> GetKezsEquipmentCollectingEntryAsync (Guid? kezsEquipmentCollectingEntryId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto> localVarResponse = await GetKezsEquipmentCollectingEntryAsyncWithHttpInfo(kezsEquipmentCollectingEntryId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentCollectingEntryId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>> GetKezsEquipmentCollectingEntryAsyncWithHttpInfo (Guid? kezsEquipmentCollectingEntryId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentCollectingEntry/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentCollectingEntryId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentCollectingEntryId", kezsEquipmentCollectingEntryId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsEquipmentCollectingEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentCollectingEntryDto)));
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentManagementId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto GetKezsEquipmentManagement (Guid? kezsEquipmentManagementId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> localVarResponse = GetKezsEquipmentManagementWithHttpInfo(kezsEquipmentManagementId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentManagementId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto > GetKezsEquipmentManagementWithHttpInfo (Guid? kezsEquipmentManagementId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentManagement/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentManagementId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentManagementId", kezsEquipmentManagementId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsEquipmentManagement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto)));
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentManagementId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> GetKezsEquipmentManagementAsync (Guid? kezsEquipmentManagementId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> localVarResponse = await GetKezsEquipmentManagementAsyncWithHttpInfo(kezsEquipmentManagementId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentManagementId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>> GetKezsEquipmentManagementAsyncWithHttpInfo (Guid? kezsEquipmentManagementId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentManagement/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentManagementId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentManagementId", kezsEquipmentManagementId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsEquipmentManagement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto)));
        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> GetKezsEquipmentManagements (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>> localVarResponse = GetKezsEquipmentManagementsWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto> > GetKezsEquipmentManagementsWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentManagement/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsEquipmentManagements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>)));
        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>> GetKezsEquipmentManagementsAsync (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>> localVarResponse = await GetKezsEquipmentManagementsAsyncWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>>> GetKezsEquipmentManagementsAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsEquipmentManagement/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsEquipmentManagements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsEquipmentManagementDto>)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="groupNumber"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse GetKezsPrintingPageData (Guid? kezsId = null, int? groupNumber = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse> localVarResponse = GetKezsPrintingPageDataWithHttpInfo(kezsId, groupNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="groupNumber"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse > GetKezsPrintingPageDataWithHttpInfo (Guid? kezsId = null, int? groupNumber = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/card/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsId", kezsId)); // query parameter
            if (groupNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupNumber", groupNumber)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsPrintingPageData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="groupNumber"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse> GetKezsPrintingPageDataAsync (Guid? kezsId = null, int? groupNumber = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse> localVarResponse = await GetKezsPrintingPageDataAsyncWithHttpInfo(kezsId, groupNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsId"> (optional)</param>
        /// <param name="groupNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse>> GetKezsPrintingPageDataAsyncWithHttpInfo (Guid? kezsId = null, int? groupNumber = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/card/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsId", kezsId)); // query parameter
            if (groupNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "GroupNumber", groupNumber)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsPrintingPageData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1GetKezsPrintingPageDataResponse)));
        }

        /// <summary>
        /// Informacje o stanach magazynowych 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsStockWasteMassGroupId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto GetKezsStockWasteMassGroup (Guid? kezsStockWasteMassGroupId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> localVarResponse = GetKezsStockWasteMassGroupWithHttpInfo(kezsStockWasteMassGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o stanach magazynowych 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsStockWasteMassGroupId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto > GetKezsStockWasteMassGroupWithHttpInfo (Guid? kezsStockWasteMassGroupId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/Kezs/KezsStockWasteMassGroup/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsStockWasteMassGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsStockWasteMassGroupId", kezsStockWasteMassGroupId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsStockWasteMassGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto)));
        }

        /// <summary>
        /// Informacje o stanach magazynowych 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsStockWasteMassGroupId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> GetKezsStockWasteMassGroupAsync (Guid? kezsStockWasteMassGroupId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> localVarResponse = await GetKezsStockWasteMassGroupAsyncWithHttpInfo(kezsStockWasteMassGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o stanach magazynowych 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsStockWasteMassGroupId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>> GetKezsStockWasteMassGroupAsyncWithHttpInfo (Guid? kezsStockWasteMassGroupId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/Kezs/KezsStockWasteMassGroup/card";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsStockWasteMassGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsStockWasteMassGroupId", kezsStockWasteMassGroupId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsStockWasteMassGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto)));
        }

        /// <summary>
        /// Lista wpisów Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> GetKezsStockWasteMassGroups (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>> localVarResponse = GetKezsStockWasteMassGroupsWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista wpisów Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto> > GetKezsStockWasteMassGroupsWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsStockWasteMassGroups/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsStockWasteMassGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>)));
        }

        /// <summary>
        /// Lista wpisów Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>> GetKezsStockWasteMassGroupsAsync (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>> localVarResponse = await GetKezsStockWasteMassGroupsAsyncWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista wpisów Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>>> GetKezsStockWasteMassGroupsAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsStockWasteMassGroups/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsStockWasteMassGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsStockWasteMassGroupDto>)));
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsUsedEquipmentWasteGenerationId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto GetKezsUsedEquipmentWasteGenerationOver (Guid? kezsUsedEquipmentWasteGenerationId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> localVarResponse = GetKezsUsedEquipmentWasteGenerationOverWithHttpInfo(kezsUsedEquipmentWasteGenerationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsUsedEquipmentWasteGenerationId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto > GetKezsUsedEquipmentWasteGenerationOverWithHttpInfo (Guid? kezsUsedEquipmentWasteGenerationId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsUsedEquipmentWasteGeneration/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsUsedEquipmentWasteGenerationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsUsedEquipmentWasteGenerationId", kezsUsedEquipmentWasteGenerationId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsUsedEquipmentWasteGenerationOver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto)));
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsUsedEquipmentWasteGenerationId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> GetKezsUsedEquipmentWasteGenerationOverAsync (Guid? kezsUsedEquipmentWasteGenerationId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> localVarResponse = await GetKezsUsedEquipmentWasteGenerationOverAsyncWithHttpInfo(kezsUsedEquipmentWasteGenerationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsUsedEquipmentWasteGenerationId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>> GetKezsUsedEquipmentWasteGenerationOverAsyncWithHttpInfo (Guid? kezsUsedEquipmentWasteGenerationId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsUsedEquipmentWasteGeneration/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsUsedEquipmentWasteGenerationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsUsedEquipmentWasteGenerationId", kezsUsedEquipmentWasteGenerationId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsUsedEquipmentWasteGenerationOver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto)));
        }

        /// <summary>
        /// Lista wpisów \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> GetKezsUsedEquipmentWasteGenerations (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>> localVarResponse = GetKezsUsedEquipmentWasteGenerationsWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista wpisów \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto> > GetKezsUsedEquipmentWasteGenerationsWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsUsedEquipmentWasteGeneration/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsUsedEquipmentWasteGenerations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>)));
        }

        /// <summary>
        /// Lista wpisów \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>> GetKezsUsedEquipmentWasteGenerationsAsync (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>> localVarResponse = await GetKezsUsedEquipmentWasteGenerationsAsyncWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista wpisów \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>>> GetKezsUsedEquipmentWasteGenerationsAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsUsedEquipmentWasteGeneration/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsUsedEquipmentWasteGenerations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsUsedEquipmentWasteGenerationDto>)));
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementHandedOverId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto GetKezsWasteManagementHandedOver (Guid? kezsWasteManagementHandedOverId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> localVarResponse = GetKezsWasteManagementHandedOverWithHttpInfo(kezsWasteManagementHandedOverId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementHandedOverId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto > GetKezsWasteManagementHandedOverWithHttpInfo (Guid? kezsWasteManagementHandedOverId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementHandedOver/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsWasteManagementHandedOverId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsWasteManagementHandedOverId", kezsWasteManagementHandedOverId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsWasteManagementHandedOver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto)));
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementHandedOverId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> GetKezsWasteManagementHandedOverAsync (Guid? kezsWasteManagementHandedOverId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> localVarResponse = await GetKezsWasteManagementHandedOverAsyncWithHttpInfo(kezsWasteManagementHandedOverId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementHandedOverId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>> GetKezsWasteManagementHandedOverAsyncWithHttpInfo (Guid? kezsWasteManagementHandedOverId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementHandedOver/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsWasteManagementHandedOverId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsWasteManagementHandedOverId", kezsWasteManagementHandedOverId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsWasteManagementHandedOver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto)));
        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> GetKezsWasteManagementHandedOvers (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>> localVarResponse = GetKezsWasteManagementHandedOversWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto> > GetKezsWasteManagementHandedOversWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementHandedOver/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsWasteManagementHandedOvers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>)));
        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>> GetKezsWasteManagementHandedOversAsync (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>> localVarResponse = await GetKezsWasteManagementHandedOversAsyncWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>>> GetKezsWasteManagementHandedOversAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementHandedOver/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsWasteManagementHandedOvers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementHandedOverDto>)));
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementOnOnesOwnId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto GetKezsWasteManagementOnOnesOwn (Guid? kezsWasteManagementOnOnesOwnId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> localVarResponse = GetKezsWasteManagementOnOnesOwnWithHttpInfo(kezsWasteManagementOnOnesOwnId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementOnOnesOwnId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto > GetKezsWasteManagementOnOnesOwnWithHttpInfo (Guid? kezsWasteManagementOnOnesOwnId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementOnOnesOwn/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsWasteManagementOnOnesOwnId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsWasteManagementOnOnesOwnId", kezsWasteManagementOnOnesOwnId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsWasteManagementOnOnesOwn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto)));
        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementOnOnesOwnId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> GetKezsWasteManagementOnOnesOwnAsync (Guid? kezsWasteManagementOnOnesOwnId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> localVarResponse = await GetKezsWasteManagementOnOnesOwnAsyncWithHttpInfo(kezsWasteManagementOnOnesOwnId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsWasteManagementOnOnesOwnId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>> GetKezsWasteManagementOnOnesOwnAsyncWithHttpInfo (Guid? kezsWasteManagementOnOnesOwnId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementOnOnesOwn/item";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsWasteManagementOnOnesOwnId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsWasteManagementOnOnesOwnId", kezsWasteManagementOnOnesOwnId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsWasteManagementOnOnesOwn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto)));
        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto&gt;</returns>
        public List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> GetKezsWasteManagementOnOnesOwns (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>> localVarResponse = GetKezsWasteManagementOnOnesOwnsWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto&gt;</returns>
        public ApiResponse< List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto> > GetKezsWasteManagementOnOnesOwnsWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementOnOnesOwn/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsWasteManagementOnOnesOwns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>)));
        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto&gt;</returns>
        public async System.Threading.Tasks.Task<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>> GetKezsWasteManagementOnOnesOwnsAsync (Guid? kezsEquipmentGroupCardId = null)
        {
             ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>> localVarResponse = await GetKezsWasteManagementOnOnesOwnsAsyncWithHttpInfo(kezsEquipmentGroupCardId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lista wpisów \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kezsEquipmentGroupCardId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>>> GetKezsWasteManagementOnOnesOwnsAsyncWithHttpInfo (Guid? kezsEquipmentGroupCardId = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsWasteManagementOnOnesOwn/items";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kezsEquipmentGroupCardId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KezsEquipmentGroupCardId", kezsEquipmentGroupCardId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKezsWasteManagementOnOnesOwns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1KezsWasteManagementOnOnesOwnDto>)));
        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKezs (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1SearchKezsRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = SearchKezsWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull > SearchKezsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1SearchKezsRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKezs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKezsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1SearchKezsRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = await SearchKezsAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKezsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1SearchKezsRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKezs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterElectronicWasteRecordCardV1SearchKezsResultDtoWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Edycja karty i stanów magazynowych zebranego sprzetu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKezs (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKezsWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja karty i stanów magazynowych zebranego sprzetu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKezsWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty i stanów magazynowych zebranego sprzetu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKezsAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKezsAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja karty i stanów magazynowych zebranego sprzetu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKezsEquipmentCollectingEntry (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentCollectingEntryRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKezsEquipmentCollectingEntryWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKezsEquipmentCollectingEntryWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentCollectingEntryRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/UpdateKezsEquipmentCollectingEntry/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsEquipmentCollectingEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKezsEquipmentCollectingEntryAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentCollectingEntryRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKezsEquipmentCollectingEntryAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu \&quot;Zbieranie sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsEquipmentCollectingEntryAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentCollectingEntryRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/UpdateKezsEquipmentCollectingEntry/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsEquipmentCollectingEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKezsEquipmentManagement (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKezsEquipmentManagementWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKezsEquipmentManagementWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/UpdateKezsEquipmentManagement/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsEquipmentManagement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKezsEquipmentManagementAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKezsEquipmentManagementAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie sprzętem\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsEquipmentManagementAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsEquipmentManagementRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/UpdateKezsEquipmentManagement/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsEquipmentManagement", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKezsStockWasteMassGroup (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsStockWasteMassGroupRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKezsStockWasteMassGroupWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKezsStockWasteMassGroupWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsStockWasteMassGroupRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsStockWasteMassGroup/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsStockWasteMassGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKezsStockWasteMassGroupAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsStockWasteMassGroupRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKezsStockWasteMassGroupAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu Stany magazynowe - \&quot;Wytworzone odpady\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsStockWasteMassGroupAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsStockWasteMassGroupRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/KezsStockWasteMassGroup/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsStockWasteMassGroup", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKezsUsedEquipmentWasteGeneration (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsUsedEquipmentWasteGenerationRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKezsUsedEquipmentWasteGenerationWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKezsUsedEquipmentWasteGenerationWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsUsedEquipmentWasteGenerationRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/UpdateKezsUsedEquipmentWasteGeneration/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsUsedEquipmentWasteGeneration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKezsUsedEquipmentWasteGenerationAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsUsedEquipmentWasteGenerationRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKezsUsedEquipmentWasteGenerationAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu \&quot;Wytwarzanie odpadów w wyniku przetworzenia zużytego sprzętu\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsUsedEquipmentWasteGenerationAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsUsedEquipmentWasteGenerationRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/UpdateKezsUsedEquipmentWasteGeneration/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsUsedEquipmentWasteGeneration", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKezsWasteManagementHandedOver (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementHandedOverRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKezsWasteManagementHandedOverWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKezsWasteManagementHandedOverWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementHandedOverRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/UpdateKezsWasteManagementHandedOver/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsWasteManagementHandedOver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKezsWasteManagementHandedOverAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementHandedOverRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKezsWasteManagementHandedOverAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - przekazanie innemu posiadaczowi\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsWasteManagementHandedOverAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementHandedOverRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/UpdateKezsWasteManagementHandedOver/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsWasteManagementHandedOver", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKezsWasteManagementOnOnesOwn (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementOnOnesOwnRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKezsWasteManagementOnOnesOwnWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKezsWasteManagementOnOnesOwnWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementOnOnesOwnRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/UpdateKezsWasteManagementOnOnesOwn/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsWasteManagementOnOnesOwn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKezsWasteManagementOnOnesOwnAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementOnOnesOwnRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKezsWasteManagementOnOnesOwnAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu \&quot;Gospodarowanie odpadami - we własnym zakresie\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKezsWasteManagementOnOnesOwnAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterElectronicWasteRecordCardV1UpdateKezsWasteManagementOnOnesOwnRequest request = null)
        {

            var localVarPath = "/WasteRegister/ElectronicWasteRecordCard/v1/Kezs/KezsEquipmentGroupCard/UpdateKezsWasteManagementOnOnesOwn/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKezsWasteManagementOnOnesOwn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
