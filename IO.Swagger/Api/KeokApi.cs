/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKeokApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse CreateKeok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1CreateKeokRequest request = null);

        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse> CreateKeokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1CreateKeokRequest request = null);
        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse CreateKeokCollectedFromRealEstateOwner (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1CreateKeokCollectedFromRealEstateOwnerRequest request = null);

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse> CreateKeokCollectedFromRealEstateOwnerWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1CreateKeokCollectedFromRealEstateOwnerRequest request = null);
        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse CreateKeokProcessed (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1CreateKeokProcessedRequest request = null);

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse> CreateKeokProcessedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1CreateKeokProcessedRequest request = null);
        /// <summary>
        /// Tworzenie wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse CreateKeokReceived (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1CreateKeokReceivedRequest request = null);

        /// <summary>
        /// Tworzenie wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse> CreateKeokReceivedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1CreateKeokReceivedRequest request = null);
        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse CreateKeokTransferred (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1CreateKeokTransferredRequest request = null);

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse> CreateKeokTransferredWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1CreateKeokTransferredRequest request = null);
        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKeok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1DeleteKeokRequest request = null);

        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKeokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1DeleteKeokRequest request = null);
        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKeokCollectedFromRealEstateOwner (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1DeleteKeokCollectedFromRealEstateOwnerRequest request = null);

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKeokCollectedFromRealEstateOwnerWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1DeleteKeokCollectedFromRealEstateOwnerRequest request = null);
        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKeokProcessed (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1DeleteKeokProcessedRequest request = null);

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKeokProcessedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1DeleteKeokProcessedRequest request = null);
        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKeokReceived (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1DeleteKeokReceivedRequest request = null);

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKeokReceivedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1DeleteKeokReceivedRequest request = null);
        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKeokTransferred (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1DeleteKeokTransferredRequest request = null);

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKeokTransferredWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1DeleteKeokTransferredRequest request = null);
        /// <summary>
        /// Informacje o karcie
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse GetKeok (Guid? keokId = null);

        /// <summary>
        /// Informacje o karcie
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse> GetKeokWithHttpInfo (Guid? keokId = null);
        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokCollectedFromRealEstateOwnerId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse GetKeokCollectedFromRealEstateOwner (Guid? keokCollectedFromRealEstateOwnerId = null);

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokCollectedFromRealEstateOwnerId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse> GetKeokCollectedFromRealEstateOwnerWithHttpInfo (Guid? keokCollectedFromRealEstateOwnerId = null);
        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse GetKeokPrintingPageData (Guid? keokId = null);

        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse> GetKeokPrintingPageDataWithHttpInfo (Guid? keokId = null);
        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokProcessedId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse GetKeokProcessed (Guid? keokProcessedId = null);

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokProcessedId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse> GetKeokProcessedWithHttpInfo (Guid? keokProcessedId = null);
        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokReceivedId">Id wpisu o statusie \&quot;Odbiór\&quot; (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse GetKeokReceived (Guid? keokReceivedId = null);

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokReceivedId">Id wpisu o statusie \&quot;Odbiór\&quot; (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse> GetKeokReceivedWithHttpInfo (Guid? keokReceivedId = null);
        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokTransferredId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse GetKeokTransferred (Guid? keokTransferredId = null);

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokTransferredId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse> GetKeokTransferredWithHttpInfo (Guid? keokTransferredId = null);
        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKeok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1SearchKeokRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKeokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1SearchKeokRequest request = null);
        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse SearchKeokCollectedFromRealEstateOwner (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1SearchKeokCollectedFromRealEstateOwnerRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse> SearchKeokCollectedFromRealEstateOwnerWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1SearchKeokCollectedFromRealEstateOwnerRequest request = null);
        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse SearchKeokProcessed (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1SearchKeokProcessedRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse> SearchKeokProcessedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1SearchKeokProcessedRequest request = null);
        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse SearchKeokReceived (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1SearchKeokReceivedRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse> SearchKeokReceivedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1SearchKeokReceivedRequest request = null);
        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse SearchKeokTransferred (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1SearchKeokTransferredRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse> SearchKeokTransferredWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1SearchKeokTransferredRequest request = null);
        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKeok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1UpdateKeokRequest request = null);

        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKeokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1UpdateKeokRequest request = null);
        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKeokCollectedFromRealEstateOwner (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1UpdateKeokCollectedFromRealEstateOwnerRequest request = null);

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKeokCollectedFromRealEstateOwnerWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1UpdateKeokCollectedFromRealEstateOwnerRequest request = null);
        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKeokProcessed (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1UpdateKeokProcessedRequest request = null);

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKeokProcessedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1UpdateKeokProcessedRequest request = null);
        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKeokReceived (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1UpdateKeokReceivedRequest request = null);

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKeokReceivedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1UpdateKeokReceivedRequest request = null);
        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKeokTransferred (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1UpdateKeokTransferredRequest request = null);

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKeokTransferredWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1UpdateKeokTransferredRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse> CreateKeokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1CreateKeokRequest request = null);

        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse>> CreateKeokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1CreateKeokRequest request = null);
        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse> CreateKeokCollectedFromRealEstateOwnerAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1CreateKeokCollectedFromRealEstateOwnerRequest request = null);

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse>> CreateKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1CreateKeokCollectedFromRealEstateOwnerRequest request = null);
        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse> CreateKeokProcessedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1CreateKeokProcessedRequest request = null);

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse>> CreateKeokProcessedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1CreateKeokProcessedRequest request = null);
        /// <summary>
        /// Tworzenie wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse> CreateKeokReceivedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1CreateKeokReceivedRequest request = null);

        /// <summary>
        /// Tworzenie wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse>> CreateKeokReceivedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1CreateKeokReceivedRequest request = null);
        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse> CreateKeokTransferredAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1CreateKeokTransferredRequest request = null);

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse>> CreateKeokTransferredAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1CreateKeokTransferredRequest request = null);
        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKeokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1DeleteKeokRequest request = null);

        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1DeleteKeokRequest request = null);
        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKeokCollectedFromRealEstateOwnerAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1DeleteKeokCollectedFromRealEstateOwnerRequest request = null);

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1DeleteKeokCollectedFromRealEstateOwnerRequest request = null);
        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKeokProcessedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1DeleteKeokProcessedRequest request = null);

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeokProcessedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1DeleteKeokProcessedRequest request = null);
        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKeokReceivedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1DeleteKeokReceivedRequest request = null);

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeokReceivedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1DeleteKeokReceivedRequest request = null);
        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKeokTransferredAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1DeleteKeokTransferredRequest request = null);

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeokTransferredAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1DeleteKeokTransferredRequest request = null);
        /// <summary>
        /// Informacje o karcie
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse> GetKeokAsync (Guid? keokId = null);

        /// <summary>
        /// Informacje o karcie
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse>> GetKeokAsyncWithHttpInfo (Guid? keokId = null);
        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokCollectedFromRealEstateOwnerId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse> GetKeokCollectedFromRealEstateOwnerAsync (Guid? keokCollectedFromRealEstateOwnerId = null);

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokCollectedFromRealEstateOwnerId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse>> GetKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo (Guid? keokCollectedFromRealEstateOwnerId = null);
        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse> GetKeokPrintingPageDataAsync (Guid? keokId = null);

        /// <summary>
        /// Pobranie danych karty do wydruku
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse>> GetKeokPrintingPageDataAsyncWithHttpInfo (Guid? keokId = null);
        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokProcessedId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse> GetKeokProcessedAsync (Guid? keokProcessedId = null);

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokProcessedId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse>> GetKeokProcessedAsyncWithHttpInfo (Guid? keokProcessedId = null);
        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokReceivedId">Id wpisu o statusie \&quot;Odbiór\&quot; (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse> GetKeokReceivedAsync (Guid? keokReceivedId = null);

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokReceivedId">Id wpisu o statusie \&quot;Odbiór\&quot; (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse>> GetKeokReceivedAsyncWithHttpInfo (Guid? keokReceivedId = null);
        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokTransferredId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse> GetKeokTransferredAsync (Guid? keokTransferredId = null);

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokTransferredId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse>> GetKeokTransferredAsyncWithHttpInfo (Guid? keokTransferredId = null);
        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKeokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1SearchKeokRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKeokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1SearchKeokRequest request = null);
        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse> SearchKeokCollectedFromRealEstateOwnerAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1SearchKeokCollectedFromRealEstateOwnerRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse>> SearchKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1SearchKeokCollectedFromRealEstateOwnerRequest request = null);
        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse> SearchKeokProcessedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1SearchKeokProcessedRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse>> SearchKeokProcessedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1SearchKeokProcessedRequest request = null);
        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse> SearchKeokReceivedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1SearchKeokReceivedRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse>> SearchKeokReceivedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1SearchKeokReceivedRequest request = null);
        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse> SearchKeokTransferredAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1SearchKeokTransferredRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse>> SearchKeokTransferredAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1SearchKeokTransferredRequest request = null);
        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKeokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1UpdateKeokRequest request = null);

        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKeokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1UpdateKeokRequest request = null);
        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKeokCollectedFromRealEstateOwnerAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1UpdateKeokCollectedFromRealEstateOwnerRequest request = null);

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przyjęte\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1UpdateKeokCollectedFromRealEstateOwnerRequest request = null);
        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKeokProcessedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1UpdateKeokProcessedRequest request = null);

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przetwarzane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKeokProcessedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1UpdateKeokProcessedRequest request = null);
        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKeokReceivedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1UpdateKeokReceivedRequest request = null);

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Odbiór\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKeokReceivedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1UpdateKeokReceivedRequest request = null);
        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKeokTransferredAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1UpdateKeokTransferredRequest request = null);

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKeokTransferredAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1UpdateKeokTransferredRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KeokApi : IKeokApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KeokApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KeokApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KeokApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KeokApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse CreateKeok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1CreateKeokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse> localVarResponse = CreateKeokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse > CreateKeokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1CreateKeokRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKeok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse)));
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse> CreateKeokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1CreateKeokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse> localVarResponse = await CreateKeokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse>> CreateKeokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1CreateKeokRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKeok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokResponse)));
        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse CreateKeokCollectedFromRealEstateOwner (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1CreateKeokCollectedFromRealEstateOwnerRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse> localVarResponse = CreateKeokCollectedFromRealEstateOwnerWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse > CreateKeokCollectedFromRealEstateOwnerWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1CreateKeokCollectedFromRealEstateOwnerRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/collectedFromRealEstateOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKeokCollectedFromRealEstateOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse)));
        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse> CreateKeokCollectedFromRealEstateOwnerAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1CreateKeokCollectedFromRealEstateOwnerRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse> localVarResponse = await CreateKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse>> CreateKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1CreateKeokCollectedFromRealEstateOwnerRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/collectedFromRealEstateOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKeokCollectedFromRealEstateOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokCollectedFromRealEstateOwnerResponse)));
        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse CreateKeokProcessed (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1CreateKeokProcessedRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse> localVarResponse = CreateKeokProcessedWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse > CreateKeokProcessedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1CreateKeokProcessedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/processed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKeokProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse)));
        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse> CreateKeokProcessedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1CreateKeokProcessedRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse> localVarResponse = await CreateKeokProcessedAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse>> CreateKeokProcessedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1CreateKeokProcessedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/processed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKeokProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokProcessedResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse CreateKeokReceived (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1CreateKeokReceivedRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse> localVarResponse = CreateKeokReceivedWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse > CreateKeokReceivedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1CreateKeokReceivedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/received";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKeokReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse> CreateKeokReceivedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1CreateKeokReceivedRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse> localVarResponse = await CreateKeokReceivedAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse>> CreateKeokReceivedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1CreateKeokReceivedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/received";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKeokReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokReceivedResponse)));
        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse CreateKeokTransferred (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1CreateKeokTransferredRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse> localVarResponse = CreateKeokTransferredWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse > CreateKeokTransferredWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1CreateKeokTransferredRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/transferred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKeokTransferred", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse)));
        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse> CreateKeokTransferredAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1CreateKeokTransferredRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse> localVarResponse = await CreateKeokTransferredAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Utworzenie wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse>> CreateKeokTransferredAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1CreateKeokTransferredRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/transferred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKeokTransferred", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1CreateKeokTransferredResponse)));
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKeok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1DeleteKeokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKeokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKeokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1DeleteKeokRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKeok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKeokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1DeleteKeokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKeokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1DeleteKeokRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKeok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKeokCollectedFromRealEstateOwner (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1DeleteKeokCollectedFromRealEstateOwnerRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKeokCollectedFromRealEstateOwnerWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKeokCollectedFromRealEstateOwnerWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1DeleteKeokCollectedFromRealEstateOwnerRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/collectedFromRealEstateOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKeokCollectedFromRealEstateOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKeokCollectedFromRealEstateOwnerAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1DeleteKeokCollectedFromRealEstateOwnerRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1DeleteKeokCollectedFromRealEstateOwnerRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/collectedFromRealEstateOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKeokCollectedFromRealEstateOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKeokProcessed (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1DeleteKeokProcessedRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKeokProcessedWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKeokProcessedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1DeleteKeokProcessedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/processed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKeokProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKeokProcessedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1DeleteKeokProcessedRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKeokProcessedAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeokProcessedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1DeleteKeokProcessedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/processed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKeokProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKeokReceived (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1DeleteKeokReceivedRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKeokReceivedWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKeokReceivedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1DeleteKeokReceivedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/received";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKeokReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKeokReceivedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1DeleteKeokReceivedRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKeokReceivedAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeokReceivedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1DeleteKeokReceivedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/received";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKeokReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKeokTransferred (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1DeleteKeokTransferredRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKeokTransferredWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKeokTransferredWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1DeleteKeokTransferredRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/transferred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKeokTransferred", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKeokTransferredAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1DeleteKeokTransferredRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKeokTransferredAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKeokTransferredAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1DeleteKeokTransferredRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/transferred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKeokTransferred", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Informacje o karcie 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse GetKeok (Guid? keokId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse> localVarResponse = GetKeokWithHttpInfo(keokId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse > GetKeokWithHttpInfo (Guid? keokId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokId", keokId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse)));
        }

        /// <summary>
        /// Informacje o karcie 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse> GetKeokAsync (Guid? keokId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse> localVarResponse = await GetKeokAsyncWithHttpInfo(keokId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse>> GetKeokAsyncWithHttpInfo (Guid? keokId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokId", keokId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokResponse)));
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokCollectedFromRealEstateOwnerId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse GetKeokCollectedFromRealEstateOwner (Guid? keokCollectedFromRealEstateOwnerId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse> localVarResponse = GetKeokCollectedFromRealEstateOwnerWithHttpInfo(keokCollectedFromRealEstateOwnerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokCollectedFromRealEstateOwnerId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse > GetKeokCollectedFromRealEstateOwnerWithHttpInfo (Guid? keokCollectedFromRealEstateOwnerId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/collectedFromRealEstateOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokCollectedFromRealEstateOwnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokCollectedFromRealEstateOwnerId", keokCollectedFromRealEstateOwnerId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeokCollectedFromRealEstateOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse)));
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokCollectedFromRealEstateOwnerId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse> GetKeokCollectedFromRealEstateOwnerAsync (Guid? keokCollectedFromRealEstateOwnerId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse> localVarResponse = await GetKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo(keokCollectedFromRealEstateOwnerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokCollectedFromRealEstateOwnerId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse>> GetKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo (Guid? keokCollectedFromRealEstateOwnerId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/collectedFromRealEstateOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokCollectedFromRealEstateOwnerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokCollectedFromRealEstateOwnerId", keokCollectedFromRealEstateOwnerId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeokCollectedFromRealEstateOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokCollectedFromRealEstateOwnerResponse)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse GetKeokPrintingPageData (Guid? keokId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse> localVarResponse = GetKeokPrintingPageDataWithHttpInfo(keokId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse > GetKeokPrintingPageDataWithHttpInfo (Guid? keokId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/card/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokId", keokId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeokPrintingPageData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse> GetKeokPrintingPageDataAsync (Guid? keokId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse> localVarResponse = await GetKeokPrintingPageDataAsyncWithHttpInfo(keokId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pobranie danych karty do wydruku 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokId">Id karty (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse>> GetKeokPrintingPageDataAsyncWithHttpInfo (Guid? keokId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/card/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokId", keokId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeokPrintingPageData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokPrintingPageDataResponse)));
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokProcessedId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse GetKeokProcessed (Guid? keokProcessedId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse> localVarResponse = GetKeokProcessedWithHttpInfo(keokProcessedId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokProcessedId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse > GetKeokProcessedWithHttpInfo (Guid? keokProcessedId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/processed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokProcessedId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokProcessedId", keokProcessedId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeokProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse)));
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokProcessedId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse> GetKeokProcessedAsync (Guid? keokProcessedId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse> localVarResponse = await GetKeokProcessedAsyncWithHttpInfo(keokProcessedId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokProcessedId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse>> GetKeokProcessedAsyncWithHttpInfo (Guid? keokProcessedId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/processed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokProcessedId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokProcessedId", keokProcessedId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeokProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokProcessedResponse)));
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokReceivedId">Id wpisu o statusie \&quot;Odbiór\&quot; (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse GetKeokReceived (Guid? keokReceivedId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse> localVarResponse = GetKeokReceivedWithHttpInfo(keokReceivedId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokReceivedId">Id wpisu o statusie \&quot;Odbiór\&quot; (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse > GetKeokReceivedWithHttpInfo (Guid? keokReceivedId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/received";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokReceivedId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokReceivedId", keokReceivedId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeokReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse)));
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokReceivedId">Id wpisu o statusie \&quot;Odbiór\&quot; (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse> GetKeokReceivedAsync (Guid? keokReceivedId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse> localVarResponse = await GetKeokReceivedAsyncWithHttpInfo(keokReceivedId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokReceivedId">Id wpisu o statusie \&quot;Odbiór\&quot; (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse>> GetKeokReceivedAsyncWithHttpInfo (Guid? keokReceivedId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/received";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokReceivedId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokReceivedId", keokReceivedId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeokReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokReceivedResponse)));
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokTransferredId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse GetKeokTransferred (Guid? keokTransferredId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse> localVarResponse = GetKeokTransferredWithHttpInfo(keokTransferredId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokTransferredId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse > GetKeokTransferredWithHttpInfo (Guid? keokTransferredId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/transferred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokTransferredId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokTransferredId", keokTransferredId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeokTransferred", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse)));
        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokTransferredId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse> GetKeokTransferredAsync (Guid? keokTransferredId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse> localVarResponse = await GetKeokTransferredAsyncWithHttpInfo(keokTransferredId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keokTransferredId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse>> GetKeokTransferredAsyncWithHttpInfo (Guid? keokTransferredId = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/transferred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (keokTransferredId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KeokTransferredId", keokTransferredId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeokTransferred", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1GetKeokTransferredResponse)));
        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKeok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1SearchKeokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = SearchKeokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull > SearchKeokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1SearchKeokRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKeok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKeokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1SearchKeokRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = await SearchKeokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKeokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1SearchKeokRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKeok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1KeokListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse SearchKeokCollectedFromRealEstateOwner (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1SearchKeokCollectedFromRealEstateOwnerRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse> localVarResponse = SearchKeokCollectedFromRealEstateOwnerWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse > SearchKeokCollectedFromRealEstateOwnerWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1SearchKeokCollectedFromRealEstateOwnerRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/collectedFromRealEstateOwner/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKeokCollectedFromRealEstateOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse> SearchKeokCollectedFromRealEstateOwnerAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1SearchKeokCollectedFromRealEstateOwnerRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse> localVarResponse = await SearchKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse>> SearchKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1SearchKeokCollectedFromRealEstateOwnerRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/collectedFromRealEstateOwner/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKeokCollectedFromRealEstateOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokCollectedFromRealEstateOwnerResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse SearchKeokProcessed (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1SearchKeokProcessedRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse> localVarResponse = SearchKeokProcessedWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse > SearchKeokProcessedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1SearchKeokProcessedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/processed/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKeokProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse> SearchKeokProcessedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1SearchKeokProcessedRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse> localVarResponse = await SearchKeokProcessedAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse>> SearchKeokProcessedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1SearchKeokProcessedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/processed/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKeokProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokProcessedResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse SearchKeokReceived (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1SearchKeokReceivedRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse> localVarResponse = SearchKeokReceivedWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse > SearchKeokReceivedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1SearchKeokReceivedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/received/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKeokReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse> SearchKeokReceivedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1SearchKeokReceivedRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse> localVarResponse = await SearchKeokReceivedAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse>> SearchKeokReceivedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1SearchKeokReceivedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/received/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKeokReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokReceivedResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse SearchKeokTransferred (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1SearchKeokTransferredRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse> localVarResponse = SearchKeokTransferredWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse > SearchKeokTransferredWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1SearchKeokTransferredRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/transferred/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKeokTransferred", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse> SearchKeokTransferredAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1SearchKeokTransferredRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse> localVarResponse = await SearchKeokTransferredAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka wpisów ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse>> SearchKeokTransferredAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1SearchKeokTransferredRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/transferred/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKeokTransferred", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterMuncipalWasteRecordCardV1SearchKeokTransferredResponse)));
        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKeok (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1UpdateKeokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKeokWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKeokWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1UpdateKeokRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKeokAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1UpdateKeokRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKeokAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKeokAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokV1UpdateKeokRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeok", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKeokCollectedFromRealEstateOwner (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1UpdateKeokCollectedFromRealEstateOwnerRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKeokCollectedFromRealEstateOwnerWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKeokCollectedFromRealEstateOwnerWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1UpdateKeokCollectedFromRealEstateOwnerRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/collectedFromRealEstateOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeokCollectedFromRealEstateOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKeokCollectedFromRealEstateOwnerAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1UpdateKeokCollectedFromRealEstateOwnerRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przyjęte\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKeokCollectedFromRealEstateOwnerAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokCollectedFromRealEstateOwnerV1UpdateKeokCollectedFromRealEstateOwnerRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/collectedFromRealEstateOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeokCollectedFromRealEstateOwner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKeokProcessed (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1UpdateKeokProcessedRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKeokProcessedWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKeokProcessedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1UpdateKeokProcessedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/processed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeokProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKeokProcessedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1UpdateKeokProcessedRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKeokProcessedAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przetwarzane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKeokProcessedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokProcessedV1UpdateKeokProcessedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/processed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeokProcessed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKeokReceived (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1UpdateKeokReceivedRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKeokReceivedWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKeokReceivedWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1UpdateKeokReceivedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/received";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeokReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKeokReceivedAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1UpdateKeokReceivedRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKeokReceivedAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Odbiór\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKeokReceivedAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokReceivedV1UpdateKeokReceivedRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/received";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeokReceived", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKeokTransferred (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1UpdateKeokTransferredRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKeokTransferredWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKeokTransferredWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1UpdateKeokTransferredRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/transferred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeokTransferred", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKeokTransferredAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1UpdateKeokTransferredRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKeokTransferredAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu ze statusem \&quot;Przekazane\&quot; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKeokTransferredAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterMunicipalWasteRecordCardKeokTransferredV1UpdateKeokTransferredRequest request = null)
        {

            var localVarPath = "/WasteRegister/MunicipalWasteRecordCard/v1/Keok/transferred";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKeokTransferred", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
