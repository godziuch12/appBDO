/* 
 * v1 Waste Register public Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IKepwApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Sprawdzenie czy istnieje już karta z danym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse CheckWasteCodeUsedInKepwCreateContext (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);

        /// <summary>
        /// Sprawdzenie czy istnieje już karta z danym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse> CheckWasteCodeUsedInKepwCreateContextWithHttpInfo (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);
        /// <summary>
        /// Sprawdzenie czy oprócz wybranej karty istnieje inna z danym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse CheckWasteCodeUsedInKepwEditContext (Guid? kepwId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);

        /// <summary>
        /// Sprawdzenie czy oprócz wybranej karty istnieje inna z danym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse> CheckWasteCodeUsedInKepwEditContextWithHttpInfo (Guid? kepwId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse CreateCollectingReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1CreateCollectingReceivedVehicleRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse> CreateCollectingReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1CreateCollectingReceivedVehicleRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse CreateCollectingTransferredVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1CreateCollectingTransferredVehicleRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse> CreateCollectingTransferredVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1CreateCollectingTransferredVehicleRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse CreateDismantleProcessedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1CreateDismantleProcessedWasteRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse> CreateDismantleProcessedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1CreateDismantleProcessedWasteRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse CreateDismantleProducedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1CreateDismantleProducedWasteRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse> CreateDismantleProducedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1CreateDismantleProducedWasteRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse CreateDismantleReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse> CreateDismantleReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse CreateDismantleTransferredWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1CreateDismantleTransferredWasteRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse> CreateDismantleTransferredWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1CreateDismantleTransferredWasteRequest request = null);
        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse CreateKepw (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1CreateKepwRequest request = null);

        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse> CreateKepwWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1CreateKepwRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteCollectingReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1DeleteCollectingReceivedVehicleRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteCollectingReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1DeleteCollectingReceivedVehicleRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteCollectingTransferredVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1DeleteCollectingTransferredVehicleRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteCollectingTransferredVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1DeleteCollectingTransferredVehicleRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteDismantleProcessedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1DeleteDismantleProcessedWasteRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteDismantleProcessedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1DeleteDismantleProcessedWasteRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteDismantleProducedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1DeleteDismantleProducedWasteRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteDismantleProducedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1DeleteDismantleProducedWasteRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteDismantleReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1DeleteDismantleReceivedVehicleRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteDismantleReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1DeleteDismantleReceivedVehicleRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteDismantleTransferredWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1DeleteDismantleTransferredWasteRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteDismantleTransferredWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1DeleteDismantleTransferredWasteRequest request = null);
        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object DeleteKepw (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1DeleteKepwRequest request = null);

        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteKepwWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1DeleteKepwRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingReceivedVehicleId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse GetCollectingReceivedVehicle (Guid? collectingReceivedVehicleId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingReceivedVehicleId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse> GetCollectingReceivedVehicleWithHttpInfo (Guid? collectingReceivedVehicleId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse GetCollectingReceivedVehicles (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1GetCollectingReceivedVehiclesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse> GetCollectingReceivedVehiclesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1GetCollectingReceivedVehiclesRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingTransferredVehiclesId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse GetCollectingTransferredVehicle (Guid? collectingTransferredVehiclesId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingTransferredVehiclesId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse> GetCollectingTransferredVehicleWithHttpInfo (Guid? collectingTransferredVehiclesId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse GetCollectingTransferredVehicles (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1GetCollectingTransferredVehiclesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse> GetCollectingTransferredVehiclesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1GetCollectingTransferredVehiclesRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProcessedWasteId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse GetDismantleProcessedWaste (Guid? dismantleProcessedWasteId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProcessedWasteId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse> GetDismantleProcessedWasteWithHttpInfo (Guid? dismantleProcessedWasteId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse GetDismantleProcessedWastes (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1GetDismantleProcessedWastesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse> GetDismantleProcessedWastesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1GetDismantleProcessedWastesRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProducedWasteId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse GetDismantleProducedWaste (Guid? dismantleProducedWasteId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProducedWasteId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse> GetDismantleProducedWasteWithHttpInfo (Guid? dismantleProducedWasteId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse GetDismantleProducedWastes (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1GetDismantleProducedWastesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse> GetDismantleProducedWastesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1GetDismantleProducedWastesRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleReceivedVehicleId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse GetDismantleReceivedVehicle (Guid? dismantleReceivedVehicleId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleReceivedVehicleId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse> GetDismantleReceivedVehicleWithHttpInfo (Guid? dismantleReceivedVehicleId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse GetDismantleReceivedVehicles (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1GetDismantleReceivedVehiclesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse> GetDismantleReceivedVehiclesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1GetDismantleReceivedVehiclesRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleTransferredWasteId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse GetDismantleTransferredWaste (Guid? dismantleTransferredWasteId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleTransferredWasteId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse> GetDismantleTransferredWasteWithHttpInfo (Guid? dismantleTransferredWasteId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse GetDismantleTransferredWastes (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1GetDismantleTransferredWastesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse> GetDismantleTransferredWastesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1GetDismantleTransferredWastesRequest request = null);
        /// <summary>
        /// Zestawienie danych - Prowadzący stację demontażu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse GetDismantleWasteSummary (Guid? kepwId = null);

        /// <summary>
        /// Zestawienie danych - Prowadzący stację demontażu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse> GetDismantleWasteSummaryWithHttpInfo (Guid? kepwId = null);
        /// <summary>
        /// Informacje o karcie i liście stanów magazynowych - odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes GetKepw (Guid? kepwId = null);

        /// <summary>
        /// Informacje o karcie i liście stanów magazynowych - odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes> GetKepwWithHttpInfo (Guid? kepwId = null);
        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący punkt zbierania pojazdów
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse GetKepwCollectingPrintingPage (Guid? kepwId = null);

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący punkt zbierania pojazdów
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse> GetKepwCollectingPrintingPageWithHttpInfo (Guid? kepwId = null);
        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący stację demontażu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse</returns>
        WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse GetKepwDismantlePrintingPage (Guid? kepwId = null);

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący stację demontażu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse> GetKepwDismantlePrintingPageWithHttpInfo (Guid? kepwId = null);
        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKepw (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1SearchKepwRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKepwWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1SearchKepwRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateCollectingReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1UpdateCollectingReceivedVehicleRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateCollectingReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1UpdateCollectingReceivedVehicleRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateCollectingTransferredVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1UpdateCollectingTransferredVehicleRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateCollectingTransferredVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1UpdateCollectingTransferredVehicleRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateDismantleProcessedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1UpdateDismantleProcessedWasteRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateDismantleProcessedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1UpdateDismantleProcessedWasteRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateDismantleProducedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1UpdateDismantleProducedWasteRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateDismantleProducedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1UpdateDismantleProducedWasteRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateDismantleReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1UpdateDismantleReceivedVehicleRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateDismantleReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1UpdateDismantleReceivedVehicleRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateDismantleTransferredWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1UpdateDismantleTransferredWasteRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateDismantleTransferredWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1UpdateDismantleTransferredWasteRequest request = null);
        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        Object UpdateKepw (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1UpdateKepwRequest request = null);

        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateKepwWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1UpdateKepwRequest request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Sprawdzenie czy istnieje już karta z danym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse> CheckWasteCodeUsedInKepwCreateContextAsync (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);

        /// <summary>
        /// Sprawdzenie czy istnieje już karta z danym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse>> CheckWasteCodeUsedInKepwCreateContextAsyncWithHttpInfo (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);
        /// <summary>
        /// Sprawdzenie czy oprócz wybranej karty istnieje inna z danym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse> CheckWasteCodeUsedInKepwEditContextAsync (Guid? kepwId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);

        /// <summary>
        /// Sprawdzenie czy oprócz wybranej karty istnieje inna z danym kodem odpadu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse>> CheckWasteCodeUsedInKepwEditContextAsyncWithHttpInfo (Guid? kepwId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse> CreateCollectingReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1CreateCollectingReceivedVehicleRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse>> CreateCollectingReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1CreateCollectingReceivedVehicleRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse> CreateCollectingTransferredVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1CreateCollectingTransferredVehicleRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse>> CreateCollectingTransferredVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1CreateCollectingTransferredVehicleRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse> CreateDismantleProcessedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1CreateDismantleProcessedWasteRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse>> CreateDismantleProcessedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1CreateDismantleProcessedWasteRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse> CreateDismantleProducedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1CreateDismantleProducedWasteRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse>> CreateDismantleProducedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1CreateDismantleProducedWasteRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse> CreateDismantleReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse>> CreateDismantleReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest request = null);
        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse> CreateDismantleTransferredWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1CreateDismantleTransferredWasteRequest request = null);

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse>> CreateDismantleTransferredWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1CreateDismantleTransferredWasteRequest request = null);
        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse> CreateKepwAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1CreateKepwRequest request = null);

        /// <summary>
        /// Tworzenie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse>> CreateKepwAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1CreateKepwRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteCollectingReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1DeleteCollectingReceivedVehicleRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCollectingReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1DeleteCollectingReceivedVehicleRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteCollectingTransferredVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1DeleteCollectingTransferredVehicleRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCollectingTransferredVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1DeleteCollectingTransferredVehicleRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteDismantleProcessedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1DeleteDismantleProcessedWasteRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDismantleProcessedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1DeleteDismantleProcessedWasteRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteDismantleProducedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1DeleteDismantleProducedWasteRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDismantleProducedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1DeleteDismantleProducedWasteRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteDismantleReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1DeleteDismantleReceivedVehicleRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDismantleReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1DeleteDismantleReceivedVehicleRequest request = null);
        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteDismantleTransferredWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1DeleteDismantleTransferredWasteRequest request = null);

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDismantleTransferredWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1DeleteDismantleTransferredWasteRequest request = null);
        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteKepwAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1DeleteKepwRequest request = null);

        /// <summary>
        /// Usunięcie karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKepwAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1DeleteKepwRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingReceivedVehicleId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse> GetCollectingReceivedVehicleAsync (Guid? collectingReceivedVehicleId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingReceivedVehicleId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse>> GetCollectingReceivedVehicleAsyncWithHttpInfo (Guid? collectingReceivedVehicleId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse> GetCollectingReceivedVehiclesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1GetCollectingReceivedVehiclesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse>> GetCollectingReceivedVehiclesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1GetCollectingReceivedVehiclesRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingTransferredVehiclesId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse> GetCollectingTransferredVehicleAsync (Guid? collectingTransferredVehiclesId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingTransferredVehiclesId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse>> GetCollectingTransferredVehicleAsyncWithHttpInfo (Guid? collectingTransferredVehiclesId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse> GetCollectingTransferredVehiclesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1GetCollectingTransferredVehiclesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse>> GetCollectingTransferredVehiclesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1GetCollectingTransferredVehiclesRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProcessedWasteId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse> GetDismantleProcessedWasteAsync (Guid? dismantleProcessedWasteId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProcessedWasteId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse>> GetDismantleProcessedWasteAsyncWithHttpInfo (Guid? dismantleProcessedWasteId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse> GetDismantleProcessedWastesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1GetDismantleProcessedWastesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse>> GetDismantleProcessedWastesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1GetDismantleProcessedWastesRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProducedWasteId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse> GetDismantleProducedWasteAsync (Guid? dismantleProducedWasteId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProducedWasteId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse>> GetDismantleProducedWasteAsyncWithHttpInfo (Guid? dismantleProducedWasteId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse> GetDismantleProducedWastesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1GetDismantleProducedWastesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse>> GetDismantleProducedWastesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1GetDismantleProducedWastesRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleReceivedVehicleId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse> GetDismantleReceivedVehicleAsync (Guid? dismantleReceivedVehicleId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleReceivedVehicleId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse>> GetDismantleReceivedVehicleAsyncWithHttpInfo (Guid? dismantleReceivedVehicleId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse> GetDismantleReceivedVehiclesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1GetDismantleReceivedVehiclesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse>> GetDismantleReceivedVehiclesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1GetDismantleReceivedVehiclesRequest request = null);
        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleTransferredWasteId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse> GetDismantleTransferredWasteAsync (Guid? dismantleTransferredWasteId = null);

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleTransferredWasteId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse>> GetDismantleTransferredWasteAsyncWithHttpInfo (Guid? dismantleTransferredWasteId = null);
        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse> GetDismantleTransferredWastesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1GetDismantleTransferredWastesRequest request = null);

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse>> GetDismantleTransferredWastesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1GetDismantleTransferredWastesRequest request = null);
        /// <summary>
        /// Zestawienie danych - Prowadzący stację demontażu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse> GetDismantleWasteSummaryAsync (Guid? kepwId = null);

        /// <summary>
        /// Zestawienie danych - Prowadzący stację demontażu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse>> GetDismantleWasteSummaryAsyncWithHttpInfo (Guid? kepwId = null);
        /// <summary>
        /// Informacje o karcie i liście stanów magazynowych - odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes> GetKepwAsync (Guid? kepwId = null);

        /// <summary>
        /// Informacje o karcie i liście stanów magazynowych - odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes>> GetKepwAsyncWithHttpInfo (Guid? kepwId = null);
        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący punkt zbierania pojazdów
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse> GetKepwCollectingPrintingPageAsync (Guid? kepwId = null);

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący punkt zbierania pojazdów
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse>> GetKepwCollectingPrintingPageAsyncWithHttpInfo (Guid? kepwId = null);
        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący stację demontażu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse> GetKepwDismantlePrintingPageAsync (Guid? kepwId = null);

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący stację demontażu
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse>> GetKepwDismantlePrintingPageAsyncWithHttpInfo (Guid? kepwId = null);
        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKepwAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1SearchKepwRequest request = null);

        /// <summary>
        /// Wyszukiwarka kart
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKepwAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1SearchKepwRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateCollectingReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1UpdateCollectingReceivedVehicleRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przyjęte
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCollectingReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1UpdateCollectingReceivedVehicleRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateCollectingTransferredVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1UpdateCollectingTransferredVehicleRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przekazane
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCollectingTransferredVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1UpdateCollectingTransferredVehicleRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateDismantleProcessedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1UpdateDismantleProcessedWasteRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przetwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDismantleProcessedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1UpdateDismantleProcessedWasteRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateDismantleProducedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1UpdateDismantleProducedWasteRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Wytwarzane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDismantleProducedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1UpdateDismantleProducedWasteRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateDismantleReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1UpdateDismantleReceivedVehicleRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przyjete pojazdy
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDismantleReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1UpdateDismantleReceivedVehicleRequest request = null);
        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateDismantleTransferredWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1UpdateDismantleTransferredWasteRequest request = null);

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przekazane odpady
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDismantleTransferredWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1UpdateDismantleTransferredWasteRequest request = null);
        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateKepwAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1UpdateKepwRequest request = null);

        /// <summary>
        /// Edycja karty
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKepwAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1UpdateKepwRequest request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class KepwApi : IKepwApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="KepwApi"/> class.
        /// </summary>
        /// <returns></returns>
        public KepwApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="KepwApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public KepwApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Sprawdzenie czy istnieje już karta z danym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse CheckWasteCodeUsedInKepwCreateContext (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse> localVarResponse = CheckWasteCodeUsedInKepwCreateContextWithHttpInfo(wasteCodeId, wasteCodeExtended, wasteCodeExtendedDescription, hazardousWasteReclassification, hazardousWasteReclassificationDescription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sprawdzenie czy istnieje już karta z danym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse > CheckWasteCodeUsedInKepwCreateContextWithHttpInfo (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/context/wastecodeCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wasteCodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeId", wasteCodeId)); // query parameter
            if (wasteCodeExtended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtended", wasteCodeExtended)); // query parameter
            if (wasteCodeExtendedDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtendedDescription", wasteCodeExtendedDescription)); // query parameter
            if (hazardousWasteReclassification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassification", hazardousWasteReclassification)); // query parameter
            if (hazardousWasteReclassificationDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassificationDescription", hazardousWasteReclassificationDescription)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckWasteCodeUsedInKepwCreateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse)));
        }

        /// <summary>
        /// Sprawdzenie czy istnieje już karta z danym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse> CheckWasteCodeUsedInKepwCreateContextAsync (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse> localVarResponse = await CheckWasteCodeUsedInKepwCreateContextAsyncWithHttpInfo(wasteCodeId, wasteCodeExtended, wasteCodeExtendedDescription, hazardousWasteReclassification, hazardousWasteReclassificationDescription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sprawdzenie czy istnieje już karta z danym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse>> CheckWasteCodeUsedInKepwCreateContextAsyncWithHttpInfo (int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/context/wastecodeCreate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (wasteCodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeId", wasteCodeId)); // query parameter
            if (wasteCodeExtended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtended", wasteCodeExtended)); // query parameter
            if (wasteCodeExtendedDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtendedDescription", wasteCodeExtendedDescription)); // query parameter
            if (hazardousWasteReclassification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassification", hazardousWasteReclassification)); // query parameter
            if (hazardousWasteReclassificationDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassificationDescription", hazardousWasteReclassificationDescription)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckWasteCodeUsedInKepwCreateContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse)));
        }

        /// <summary>
        /// Sprawdzenie czy oprócz wybranej karty istnieje inna z danym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse CheckWasteCodeUsedInKepwEditContext (Guid? kepwId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse> localVarResponse = CheckWasteCodeUsedInKepwEditContextWithHttpInfo(kepwId, wasteCodeId, wasteCodeExtended, wasteCodeExtendedDescription, hazardousWasteReclassification, hazardousWasteReclassificationDescription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sprawdzenie czy oprócz wybranej karty istnieje inna z danym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse > CheckWasteCodeUsedInKepwEditContextWithHttpInfo (Guid? kepwId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/context/wastecodeEdit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kepwId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KepwId", kepwId)); // query parameter
            if (wasteCodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeId", wasteCodeId)); // query parameter
            if (wasteCodeExtended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtended", wasteCodeExtended)); // query parameter
            if (wasteCodeExtendedDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtendedDescription", wasteCodeExtendedDescription)); // query parameter
            if (hazardousWasteReclassification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassification", hazardousWasteReclassification)); // query parameter
            if (hazardousWasteReclassificationDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassificationDescription", hazardousWasteReclassificationDescription)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckWasteCodeUsedInKepwEditContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse)));
        }

        /// <summary>
        /// Sprawdzenie czy oprócz wybranej karty istnieje inna z danym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse> CheckWasteCodeUsedInKepwEditContextAsync (Guid? kepwId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse> localVarResponse = await CheckWasteCodeUsedInKepwEditContextAsyncWithHttpInfo(kepwId, wasteCodeId, wasteCodeExtended, wasteCodeExtendedDescription, hazardousWasteReclassification, hazardousWasteReclassificationDescription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sprawdzenie czy oprócz wybranej karty istnieje inna z danym kodem odpadu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <param name="wasteCodeId"> (optional)</param>
        /// <param name="wasteCodeExtended"> (optional)</param>
        /// <param name="wasteCodeExtendedDescription"> (optional)</param>
        /// <param name="hazardousWasteReclassification"> (optional)</param>
        /// <param name="hazardousWasteReclassificationDescription"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse>> CheckWasteCodeUsedInKepwEditContextAsyncWithHttpInfo (Guid? kepwId = null, int? wasteCodeId = null, bool? wasteCodeExtended = null, string wasteCodeExtendedDescription = null, bool? hazardousWasteReclassification = null, string hazardousWasteReclassificationDescription = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/context/wastecodeEdit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kepwId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KepwId", kepwId)); // query parameter
            if (wasteCodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeId", wasteCodeId)); // query parameter
            if (wasteCodeExtended != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtended", wasteCodeExtended)); // query parameter
            if (wasteCodeExtendedDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "WasteCodeExtendedDescription", wasteCodeExtendedDescription)); // query parameter
            if (hazardousWasteReclassification != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassification", hazardousWasteReclassification)); // query parameter
            if (hazardousWasteReclassificationDescription != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "HazardousWasteReclassificationDescription", hazardousWasteReclassificationDescription)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckWasteCodeUsedInKepwEditContext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CheckWasteCodeUsedInKepwCreateContextResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse CreateCollectingReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1CreateCollectingReceivedVehicleRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse> localVarResponse = CreateCollectingReceivedVehicleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse > CreateCollectingReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1CreateCollectingReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCollectingReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse> CreateCollectingReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1CreateCollectingReceivedVehicleRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse> localVarResponse = await CreateCollectingReceivedVehicleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse>> CreateCollectingReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1CreateCollectingReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCollectingReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingReceivedVehicleResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse CreateCollectingTransferredVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1CreateCollectingTransferredVehicleRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse> localVarResponse = CreateCollectingTransferredVehicleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse > CreateCollectingTransferredVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1CreateCollectingTransferredVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingTransferredVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCollectingTransferredVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse> CreateCollectingTransferredVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1CreateCollectingTransferredVehicleRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse> localVarResponse = await CreateCollectingTransferredVehicleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse>> CreateCollectingTransferredVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1CreateCollectingTransferredVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingTransferredVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCollectingTransferredVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateCollectingTransferredVehicleResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse CreateDismantleProcessedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1CreateDismantleProcessedWasteRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse> localVarResponse = CreateDismantleProcessedWasteWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse > CreateDismantleProcessedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1CreateDismantleProcessedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProcessedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDismantleProcessedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse> CreateDismantleProcessedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1CreateDismantleProcessedWasteRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse> localVarResponse = await CreateDismantleProcessedWasteAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse>> CreateDismantleProcessedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1CreateDismantleProcessedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProcessedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDismantleProcessedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProcessedWasteResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse CreateDismantleProducedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1CreateDismantleProducedWasteRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse> localVarResponse = CreateDismantleProducedWasteWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse > CreateDismantleProducedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1CreateDismantleProducedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProducedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDismantleProducedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse> CreateDismantleProducedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1CreateDismantleProducedWasteRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse> localVarResponse = await CreateDismantleProducedWasteAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse>> CreateDismantleProducedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1CreateDismantleProducedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProducedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDismantleProducedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleProducedWasteResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse CreateDismantleReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse> localVarResponse = CreateDismantleReceivedVehicleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse > CreateDismantleReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDismantleReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse> CreateDismantleReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse> localVarResponse = await CreateDismantleReceivedVehicleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse>> CreateDismantleReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1CreateDismantleReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDismantleReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleReceivedVehicleResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse CreateDismantleTransferredWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1CreateDismantleTransferredWasteRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse> localVarResponse = CreateDismantleTransferredWasteWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse > CreateDismantleTransferredWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1CreateDismantleTransferredWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleTransferredWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDismantleTransferredWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse)));
        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse> CreateDismantleTransferredWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1CreateDismantleTransferredWasteRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse> localVarResponse = await CreateDismantleTransferredWasteAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse>> CreateDismantleTransferredWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1CreateDismantleTransferredWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleTransferredWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateDismantleTransferredWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateDismantleTransferredWasteResponse)));
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse CreateKepw (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1CreateKepwRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse> localVarResponse = CreateKepwWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse > CreateKepwWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1CreateKepwRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKepw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse)));
        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse> CreateKepwAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1CreateKepwRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse> localVarResponse = await CreateKepwAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Tworzenie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse>> CreateKepwAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1CreateKepwRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateKepw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1CreateKepwResponse)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteCollectingReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1DeleteCollectingReceivedVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteCollectingReceivedVehicleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteCollectingReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1DeleteCollectingReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectingReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteCollectingReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1DeleteCollectingReceivedVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteCollectingReceivedVehicleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCollectingReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1DeleteCollectingReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectingReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteCollectingTransferredVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1DeleteCollectingTransferredVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteCollectingTransferredVehicleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteCollectingTransferredVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1DeleteCollectingTransferredVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingTransferredVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectingTransferredVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteCollectingTransferredVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1DeleteCollectingTransferredVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteCollectingTransferredVehicleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCollectingTransferredVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1DeleteCollectingTransferredVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingTransferredVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectingTransferredVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteDismantleProcessedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1DeleteDismantleProcessedWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteDismantleProcessedWasteWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteDismantleProcessedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1DeleteDismantleProcessedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProcessedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDismantleProcessedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteDismantleProcessedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1DeleteDismantleProcessedWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteDismantleProcessedWasteAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDismantleProcessedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1DeleteDismantleProcessedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProcessedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDismantleProcessedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteDismantleProducedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1DeleteDismantleProducedWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteDismantleProducedWasteWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteDismantleProducedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1DeleteDismantleProducedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProducedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDismantleProducedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteDismantleProducedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1DeleteDismantleProducedWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteDismantleProducedWasteAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDismantleProducedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1DeleteDismantleProducedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProducedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDismantleProducedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteDismantleReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1DeleteDismantleReceivedVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteDismantleReceivedVehicleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteDismantleReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1DeleteDismantleReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDismantleReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteDismantleReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1DeleteDismantleReceivedVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteDismantleReceivedVehicleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDismantleReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1DeleteDismantleReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDismantleReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteDismantleTransferredWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1DeleteDismantleTransferredWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteDismantleTransferredWasteWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteDismantleTransferredWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1DeleteDismantleTransferredWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleTransferredWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDismantleTransferredWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteDismantleTransferredWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1DeleteDismantleTransferredWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteDismantleTransferredWasteAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDismantleTransferredWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1DeleteDismantleTransferredWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleTransferredWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDismantleTransferredWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object DeleteKepw (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1DeleteKepwRequest request = null)
        {
             ApiResponse<Object> localVarResponse = DeleteKepwWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > DeleteKepwWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1DeleteKepwRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKepw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteKepwAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1DeleteKepwRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await DeleteKepwAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Usunięcie karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteKepwAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1DeleteKepwRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteKepw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingReceivedVehicleId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse GetCollectingReceivedVehicle (Guid? collectingReceivedVehicleId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse> localVarResponse = GetCollectingReceivedVehicleWithHttpInfo(collectingReceivedVehicleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingReceivedVehicleId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse > GetCollectingReceivedVehicleWithHttpInfo (Guid? collectingReceivedVehicleId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectingReceivedVehicleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CollectingReceivedVehicleId", collectingReceivedVehicleId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectingReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingReceivedVehicleId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse> GetCollectingReceivedVehicleAsync (Guid? collectingReceivedVehicleId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse> localVarResponse = await GetCollectingReceivedVehicleAsyncWithHttpInfo(collectingReceivedVehicleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingReceivedVehicleId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse>> GetCollectingReceivedVehicleAsyncWithHttpInfo (Guid? collectingReceivedVehicleId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectingReceivedVehicleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CollectingReceivedVehicleId", collectingReceivedVehicleId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectingReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehicleResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse GetCollectingReceivedVehicles (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1GetCollectingReceivedVehiclesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse> localVarResponse = GetCollectingReceivedVehiclesWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse > GetCollectingReceivedVehiclesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1GetCollectingReceivedVehiclesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingReceivedVehicle/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectingReceivedVehicles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse> GetCollectingReceivedVehiclesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1GetCollectingReceivedVehiclesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse> localVarResponse = await GetCollectingReceivedVehiclesAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse>> GetCollectingReceivedVehiclesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1GetCollectingReceivedVehiclesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingReceivedVehicle/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectingReceivedVehicles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingReceivedVehiclesResponse)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingTransferredVehiclesId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse GetCollectingTransferredVehicle (Guid? collectingTransferredVehiclesId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse> localVarResponse = GetCollectingTransferredVehicleWithHttpInfo(collectingTransferredVehiclesId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingTransferredVehiclesId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse > GetCollectingTransferredVehicleWithHttpInfo (Guid? collectingTransferredVehiclesId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingTransferredVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectingTransferredVehiclesId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CollectingTransferredVehiclesId", collectingTransferredVehiclesId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectingTransferredVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingTransferredVehiclesId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse> GetCollectingTransferredVehicleAsync (Guid? collectingTransferredVehiclesId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse> localVarResponse = await GetCollectingTransferredVehicleAsyncWithHttpInfo(collectingTransferredVehiclesId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectingTransferredVehiclesId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse>> GetCollectingTransferredVehicleAsyncWithHttpInfo (Guid? collectingTransferredVehiclesId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingTransferredVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (collectingTransferredVehiclesId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "CollectingTransferredVehiclesId", collectingTransferredVehiclesId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectingTransferredVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehicleResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse GetCollectingTransferredVehicles (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1GetCollectingTransferredVehiclesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse> localVarResponse = GetCollectingTransferredVehiclesWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse > GetCollectingTransferredVehiclesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1GetCollectingTransferredVehiclesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingTransferredVehicle/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectingTransferredVehicles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse> GetCollectingTransferredVehiclesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1GetCollectingTransferredVehiclesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse> localVarResponse = await GetCollectingTransferredVehiclesAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse>> GetCollectingTransferredVehiclesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1GetCollectingTransferredVehiclesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingTransferredVehicle/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCollectingTransferredVehicles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingTransferredVehiclesResponse)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProcessedWasteId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse GetDismantleProcessedWaste (Guid? dismantleProcessedWasteId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse> localVarResponse = GetDismantleProcessedWasteWithHttpInfo(dismantleProcessedWasteId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProcessedWasteId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse > GetDismantleProcessedWasteWithHttpInfo (Guid? dismantleProcessedWasteId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProcessedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dismantleProcessedWasteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DismantleProcessedWasteId", dismantleProcessedWasteId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleProcessedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProcessedWasteId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse> GetDismantleProcessedWasteAsync (Guid? dismantleProcessedWasteId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse> localVarResponse = await GetDismantleProcessedWasteAsyncWithHttpInfo(dismantleProcessedWasteId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProcessedWasteId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse>> GetDismantleProcessedWasteAsyncWithHttpInfo (Guid? dismantleProcessedWasteId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProcessedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dismantleProcessedWasteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DismantleProcessedWasteId", dismantleProcessedWasteId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleProcessedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWasteResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse GetDismantleProcessedWastes (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1GetDismantleProcessedWastesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse> localVarResponse = GetDismantleProcessedWastesWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse > GetDismantleProcessedWastesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1GetDismantleProcessedWastesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProcessedWaste/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleProcessedWastes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse> GetDismantleProcessedWastesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1GetDismantleProcessedWastesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse> localVarResponse = await GetDismantleProcessedWastesAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse>> GetDismantleProcessedWastesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1GetDismantleProcessedWastesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProcessedWaste/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleProcessedWastes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProcessedWastesResponse)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProducedWasteId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse GetDismantleProducedWaste (Guid? dismantleProducedWasteId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse> localVarResponse = GetDismantleProducedWasteWithHttpInfo(dismantleProducedWasteId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProducedWasteId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse > GetDismantleProducedWasteWithHttpInfo (Guid? dismantleProducedWasteId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProducedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dismantleProducedWasteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DismantleProducedWasteId", dismantleProducedWasteId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleProducedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProducedWasteId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse> GetDismantleProducedWasteAsync (Guid? dismantleProducedWasteId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse> localVarResponse = await GetDismantleProducedWasteAsyncWithHttpInfo(dismantleProducedWasteId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleProducedWasteId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse>> GetDismantleProducedWasteAsyncWithHttpInfo (Guid? dismantleProducedWasteId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProducedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dismantleProducedWasteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DismantleProducedWasteId", dismantleProducedWasteId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleProducedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWasteResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse GetDismantleProducedWastes (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1GetDismantleProducedWastesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse> localVarResponse = GetDismantleProducedWastesWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse > GetDismantleProducedWastesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1GetDismantleProducedWastesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProducedWaste/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleProducedWastes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse> GetDismantleProducedWastesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1GetDismantleProducedWastesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse> localVarResponse = await GetDismantleProducedWastesAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse>> GetDismantleProducedWastesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1GetDismantleProducedWastesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProducedWaste/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleProducedWastes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleProducedWastesResponse)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleReceivedVehicleId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse GetDismantleReceivedVehicle (Guid? dismantleReceivedVehicleId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse> localVarResponse = GetDismantleReceivedVehicleWithHttpInfo(dismantleReceivedVehicleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleReceivedVehicleId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse > GetDismantleReceivedVehicleWithHttpInfo (Guid? dismantleReceivedVehicleId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dismantleReceivedVehicleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DismantleReceivedVehicleId", dismantleReceivedVehicleId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleReceivedVehicleId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse> GetDismantleReceivedVehicleAsync (Guid? dismantleReceivedVehicleId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse> localVarResponse = await GetDismantleReceivedVehicleAsyncWithHttpInfo(dismantleReceivedVehicleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleReceivedVehicleId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse>> GetDismantleReceivedVehicleAsyncWithHttpInfo (Guid? dismantleReceivedVehicleId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dismantleReceivedVehicleId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DismantleReceivedVehicleId", dismantleReceivedVehicleId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehicleResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse GetDismantleReceivedVehicles (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1GetDismantleReceivedVehiclesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse> localVarResponse = GetDismantleReceivedVehiclesWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse > GetDismantleReceivedVehiclesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1GetDismantleReceivedVehiclesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleReceivedVehicle/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleReceivedVehicles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse> GetDismantleReceivedVehiclesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1GetDismantleReceivedVehiclesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse> localVarResponse = await GetDismantleReceivedVehiclesAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse>> GetDismantleReceivedVehiclesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1GetDismantleReceivedVehiclesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleReceivedVehicle/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleReceivedVehicles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleReceivedVehiclesResponse)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleTransferredWasteId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse GetDismantleTransferredWaste (Guid? dismantleTransferredWasteId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse> localVarResponse = GetDismantleTransferredWasteWithHttpInfo(dismantleTransferredWasteId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleTransferredWasteId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse > GetDismantleTransferredWasteWithHttpInfo (Guid? dismantleTransferredWasteId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleTransferredWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dismantleTransferredWasteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DismantleTransferredWasteId", dismantleTransferredWasteId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleTransferredWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse)));
        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleTransferredWasteId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse> GetDismantleTransferredWasteAsync (Guid? dismantleTransferredWasteId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse> localVarResponse = await GetDismantleTransferredWasteAsyncWithHttpInfo(dismantleTransferredWasteId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o wpisie Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dismantleTransferredWasteId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse>> GetDismantleTransferredWasteAsyncWithHttpInfo (Guid? dismantleTransferredWasteId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleTransferredWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dismantleTransferredWasteId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DismantleTransferredWasteId", dismantleTransferredWasteId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleTransferredWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWasteResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse GetDismantleTransferredWastes (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1GetDismantleTransferredWastesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse> localVarResponse = GetDismantleTransferredWastesWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse > GetDismantleTransferredWastesWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1GetDismantleTransferredWastesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleTransferredWaste/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleTransferredWastes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse)));
        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse> GetDismantleTransferredWastesAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1GetDismantleTransferredWastesRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse> localVarResponse = await GetDismantleTransferredWastesAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka wpisów Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse>> GetDismantleTransferredWastesAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1GetDismantleTransferredWastesRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleTransferredWaste/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleTransferredWastes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleTransferredWastesResponse)));
        }

        /// <summary>
        /// Zestawienie danych - Prowadzący stację demontażu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse GetDismantleWasteSummary (Guid? kepwId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse> localVarResponse = GetDismantleWasteSummaryWithHttpInfo(kepwId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Zestawienie danych - Prowadzący stację demontażu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse > GetDismantleWasteSummaryWithHttpInfo (Guid? kepwId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleWasteSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kepwId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KepwId", kepwId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleWasteSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse)));
        }

        /// <summary>
        /// Zestawienie danych - Prowadzący stację demontażu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse> GetDismantleWasteSummaryAsync (Guid? kepwId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse> localVarResponse = await GetDismantleWasteSummaryAsyncWithHttpInfo(kepwId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Zestawienie danych - Prowadzący stację demontażu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse>> GetDismantleWasteSummaryAsyncWithHttpInfo (Guid? kepwId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleWasteSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kepwId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KepwId", kepwId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDismantleWasteSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantleWasteSummaryResponse)));
        }

        /// <summary>
        /// Informacje o karcie i liście stanów magazynowych - odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes GetKepw (Guid? kepwId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes> localVarResponse = GetKepwWithHttpInfo(kepwId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Informacje o karcie i liście stanów magazynowych - odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes > GetKepwWithHttpInfo (Guid? kepwId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kepwId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KepwId", kepwId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKepw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes)));
        }

        /// <summary>
        /// Informacje o karcie i liście stanów magazynowych - odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes> GetKepwAsync (Guid? kepwId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes> localVarResponse = await GetKepwAsyncWithHttpInfo(kepwId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Informacje o karcie i liście stanów magazynowych - odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes>> GetKepwAsyncWithHttpInfo (Guid? kepwId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kepwId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KepwId", kepwId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKepw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwWithDismantleInitialWastes)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący punkt zbierania pojazdów 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse GetKepwCollectingPrintingPage (Guid? kepwId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse> localVarResponse = GetKepwCollectingPrintingPageWithHttpInfo(kepwId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący punkt zbierania pojazdów 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse > GetKepwCollectingPrintingPageWithHttpInfo (Guid? kepwId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/card/collecting/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kepwId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KepwId", kepwId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKepwCollectingPrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący punkt zbierania pojazdów 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse> GetKepwCollectingPrintingPageAsync (Guid? kepwId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse> localVarResponse = await GetKepwCollectingPrintingPageAsyncWithHttpInfo(kepwId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący punkt zbierania pojazdów 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse>> GetKepwCollectingPrintingPageAsyncWithHttpInfo (Guid? kepwId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/card/collecting/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kepwId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KepwId", kepwId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKepwCollectingPrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetCollectingPrintingPageResponse)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący stację demontażu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse</returns>
        public WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse GetKepwDismantlePrintingPage (Guid? kepwId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse> localVarResponse = GetKepwDismantlePrintingPageWithHttpInfo(kepwId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący stację demontażu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse > GetKepwDismantlePrintingPageWithHttpInfo (Guid? kepwId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/card/dismantle/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kepwId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KepwId", kepwId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKepwDismantlePrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse)));
        }

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący stację demontażu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse> GetKepwDismantlePrintingPageAsync (Guid? kepwId = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse> localVarResponse = await GetKepwDismantlePrintingPageAsyncWithHttpInfo(kepwId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pobranie danych karty do wydruku - Prowadzący stację demontażu 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="kepwId"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse>> GetKepwDismantlePrintingPageAsyncWithHttpInfo (Guid? kepwId = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/card/dismantle/printingpage";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (kepwId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "KepwId", kepwId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKepwDismantlePrintingPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1GetDismantlePrintingPageResponse)));
        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull SearchKepw (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1SearchKepwRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = SearchKepwWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public ApiResponse< WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull > SearchKepwWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1SearchKepwRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKepw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull</returns>
        public async System.Threading.Tasks.Task<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> SearchKepwAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1SearchKepwRequest request = null)
        {
             ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull> localVarResponse = await SearchKepwAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Wyszukiwarka kart 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>> SearchKepwAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1SearchKepwRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchKepw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(WasteRegisterPublicApiApiModelsCollectionsPaginatedPage1WasteRegisterPublicApiApiModelsResponsesWasteRegisterWreckWasteRecordCardV1KepwListItemWasteRegisterPublicApiVersion1000CultureneutralPublicKeyTokennull)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateCollectingReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1UpdateCollectingReceivedVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateCollectingReceivedVehicleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateCollectingReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1UpdateCollectingReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCollectingReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateCollectingReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1UpdateCollectingReceivedVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateCollectingReceivedVehicleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przyjęte 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCollectingReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingReceivedVehicleV1UpdateCollectingReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCollectingReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateCollectingTransferredVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1UpdateCollectingTransferredVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateCollectingTransferredVehicleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateCollectingTransferredVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1UpdateCollectingTransferredVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingTransferredVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCollectingTransferredVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateCollectingTransferredVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1UpdateCollectingTransferredVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateCollectingTransferredVehicleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu Prowadzący punkt zbierania pojazdów - Przekazane 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCollectingTransferredVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardCollectingTransferredVehicleV1UpdateCollectingTransferredVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/collectingTransferredVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCollectingTransferredVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateDismantleProcessedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1UpdateDismantleProcessedWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateDismantleProcessedWasteWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateDismantleProcessedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1UpdateDismantleProcessedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProcessedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDismantleProcessedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateDismantleProcessedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1UpdateDismantleProcessedWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateDismantleProcessedWasteAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przetwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDismantleProcessedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProcessedWasteV1UpdateDismantleProcessedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProcessedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDismantleProcessedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateDismantleProducedWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1UpdateDismantleProducedWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateDismantleProducedWasteWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateDismantleProducedWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1UpdateDismantleProducedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProducedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDismantleProducedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateDismantleProducedWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1UpdateDismantleProducedWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateDismantleProducedWasteAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Wytwarzane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDismantleProducedWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleProducedWasteV1UpdateDismantleProducedWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleProducedWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDismantleProducedWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateDismantleReceivedVehicle (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1UpdateDismantleReceivedVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateDismantleReceivedVehicleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateDismantleReceivedVehicleWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1UpdateDismantleReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDismantleReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateDismantleReceivedVehicleAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1UpdateDismantleReceivedVehicleRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateDismantleReceivedVehicleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przyjete pojazdy 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDismantleReceivedVehicleAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleReceivedVehicleV1UpdateDismantleReceivedVehicleRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleReceivedVehicle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDismantleReceivedVehicle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateDismantleTransferredWaste (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1UpdateDismantleTransferredWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateDismantleTransferredWasteWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateDismantleTransferredWasteWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1UpdateDismantleTransferredWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleTransferredWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDismantleTransferredWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateDismantleTransferredWasteAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1UpdateDismantleTransferredWasteRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateDismantleTransferredWasteAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja wpisu Prowadzący stację demontażu - Przekazane odpady 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDismantleTransferredWasteAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardDismantleTransferredWasteV1UpdateDismantleTransferredWasteRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw/dismantleTransferredWaste";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDismantleTransferredWaste", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Object</returns>
        public Object UpdateKepw (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1UpdateKepwRequest request = null)
        {
             ApiResponse<Object> localVarResponse = UpdateKepwWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateKepwWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1UpdateKepwRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKepw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateKepwAsync (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1UpdateKepwRequest request = null)
        {
             ApiResponse<Object> localVarResponse = await UpdateKepwAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edycja karty 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateKepwAsyncWithHttpInfo (WasteRegisterPublicApiApiModelsRequestsWasteRegisterWreckWasteRecordCardKepwV1UpdateKepwRequest request = null)
        {

            var localVarPath = "/WasteRegister/WreckWasteRecordCard/v1/Kepw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateKepw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
